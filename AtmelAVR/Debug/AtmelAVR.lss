
AtmelAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000198  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d12  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009f7  00000000  00000000  00001022  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d10  00000000  00000000  00001a19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  0000272c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000734f  00000000  00000000  00002894  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000031d  00000000  00000000  00009be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00009f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002bd8  00000000  00000000  00009f88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e9       	ldi	r30, 0x98	; 152
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	6c d0       	rcall	.+216    	; 0x18c <main>
  b4:	6f c0       	rjmp	.+222    	; 0x194 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait>:
 */ 
#include "toolbox.h"

void wait( int ms )
{
	for (int i=0; i<ms; i++)
  b8:	18 16       	cp	r1, r24
  ba:	19 06       	cpc	r1, r25
  bc:	6c f4       	brge	.+26     	; 0xd8 <wait+0x20>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	ef ec       	ldi	r30, 0xCF	; 207
  c4:	f7 e0       	ldi	r31, 0x07	; 7
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <wait+0xe>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <wait+0x14>
  cc:	00 00       	nop
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	82 17       	cp	r24, r18
  d4:	93 07       	cpc	r25, r19
  d6:	a9 f7       	brne	.-22     	; 0xc2 <wait+0xa>
  d8:	08 95       	ret

000000da <start>:
		
		PORTD = BIT(7);
		yieldSleep(100, 75, &state);		
		PORTD = 0;
		yieldSleep(waitT / state, 200 / state, &state);
	}
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	82 bb       	out	0x12, r24	; 18
  de:	85 99       	sbic	0x10, 5	; 16
  e0:	05 c0       	rjmp	.+10     	; 0xec <start+0x12>
  e2:	86 99       	sbic	0x10, 6	; 16
  e4:	06 c0       	rjmp	.+12     	; 0xf2 <start+0x18>
  e6:	8d e6       	ldi	r24, 0x6D	; 109
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	08 95       	ret
  ec:	8b e8       	ldi	r24, 0x8B	; 139
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	08 95       	ret
  f2:	8c e7       	ldi	r24, 0x7C	; 124
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	08 95       	ret

000000f8 <s1>:
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	82 bb       	out	0x12, r24	; 18
  fc:	85 99       	sbic	0x10, 5	; 16
  fe:	05 c0       	rjmp	.+10     	; 0x10a <s1+0x12>
 100:	87 99       	sbic	0x10, 7	; 16
 102:	06 c0       	rjmp	.+12     	; 0x110 <s1+0x18>
 104:	8c e7       	ldi	r24, 0x7C	; 124
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	08 95       	ret
 10a:	8b e8       	ldi	r24, 0x8B	; 139
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	08 95       	ret
 110:	8d e6       	ldi	r24, 0x6D	; 109
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	08 95       	ret

00000116 <s2>:
 116:	84 e0       	ldi	r24, 0x04	; 4
 118:	82 bb       	out	0x12, r24	; 18
 11a:	85 99       	sbic	0x10, 5	; 16
 11c:	07 c0       	rjmp	.+14     	; 0x12c <s2+0x16>
 11e:	86 99       	sbic	0x10, 6	; 16
 120:	08 c0       	rjmp	.+16     	; 0x132 <s2+0x1c>
 122:	87 99       	sbic	0x10, 7	; 16
 124:	09 c0       	rjmp	.+18     	; 0x138 <s2+0x22>
 126:	8b e8       	ldi	r24, 0x8B	; 139
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	08 95       	ret
 12c:	8f e9       	ldi	r24, 0x9F	; 159
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	08 95       	ret
 132:	8c e7       	ldi	r24, 0x7C	; 124
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	08 95       	ret
 138:	8d e6       	ldi	r24, 0x6D	; 109
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	08 95       	ret

0000013e <s3>:
 13e:	88 e0       	ldi	r24, 0x08	; 8
 140:	82 bb       	out	0x12, r24	; 18
 142:	85 99       	sbic	0x10, 5	; 16
 144:	07 c0       	rjmp	.+14     	; 0x154 <s3+0x16>
 146:	86 99       	sbic	0x10, 6	; 16
 148:	08 c0       	rjmp	.+16     	; 0x15a <s3+0x1c>
 14a:	87 99       	sbic	0x10, 7	; 16
 14c:	09 c0       	rjmp	.+18     	; 0x160 <s3+0x22>
 14e:	8f e9       	ldi	r24, 0x9F	; 159
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	08 95       	ret
 154:	83 eb       	ldi	r24, 0xB3	; 179
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	08 95       	ret
 15a:	83 eb       	ldi	r24, 0xB3	; 179
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	08 95       	ret
 160:	8d e6       	ldi	r24, 0x6D	; 109
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	08 95       	ret

00000166 <end>:
 166:	80 e1       	ldi	r24, 0x10	; 16
 168:	82 bb       	out	0x12, r24	; 18
 16a:	87 99       	sbic	0x10, 7	; 16
 16c:	03 c0       	rjmp	.+6      	; 0x174 <end+0xe>
 16e:	83 eb       	ldi	r24, 0xB3	; 179
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	08 95       	ret
 174:	8d e6       	ldi	r24, 0x6D	; 109
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	08 95       	ret

0000017a <opdrB7a>:


void opdrB7a() 
{
	void* (*state)();
	state = &start;
 17a:	cd e6       	ldi	r28, 0x6D	; 109
 17c:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (true)
	{
		state = state();
 17e:	fe 01       	movw	r30, r28
 180:	09 95       	icall
 182:	ec 01       	movw	r28, r24
		wait(200);
 184:	88 ec       	ldi	r24, 0xC8	; 200
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	97 df       	rcall	.-210    	; 0xb8 <wait>
 18a:	f9 cf       	rjmp	.-14     	; 0x17e <opdrB7a+0x4>

0000018c <main>:
#include "main.h"
#include "week1.h"

int main (void)
{
	opdrB7a();
 18c:	f6 df       	rcall	.-20     	; 0x17a <opdrB7a>

	return 1;
}
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	08 95       	ret

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
