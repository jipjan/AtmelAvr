
Snake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00001058  000010ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001058  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  0080010c  0080010c  000010f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019f1  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d8e  00000000  00000000  00002d01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d24  00000000  00000000  00003a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b0  00000000  00000000  000047b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000706  00000000  00000000  00004b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000797  00000000  00000000  0000526a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00005a01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	8d c0       	rjmp	.+282    	; 0x120 <__bad_interrupt>
       6:	00 00       	nop
       8:	8b c0       	rjmp	.+278    	; 0x120 <__bad_interrupt>
       a:	00 00       	nop
       c:	89 c0       	rjmp	.+274    	; 0x120 <__bad_interrupt>
       e:	00 00       	nop
      10:	87 c0       	rjmp	.+270    	; 0x120 <__bad_interrupt>
      12:	00 00       	nop
      14:	85 c0       	rjmp	.+266    	; 0x120 <__bad_interrupt>
      16:	00 00       	nop
      18:	83 c0       	rjmp	.+262    	; 0x120 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	81 c0       	rjmp	.+258    	; 0x120 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7f c0       	rjmp	.+254    	; 0x120 <__bad_interrupt>
      22:	00 00       	nop
      24:	7d c0       	rjmp	.+250    	; 0x120 <__bad_interrupt>
      26:	00 00       	nop
      28:	7b c0       	rjmp	.+246    	; 0x120 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	79 c0       	rjmp	.+242    	; 0x120 <__bad_interrupt>
      2e:	00 00       	nop
      30:	77 c0       	rjmp	.+238    	; 0x120 <__bad_interrupt>
      32:	00 00       	nop
      34:	75 c0       	rjmp	.+234    	; 0x120 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c0       	rjmp	.+230    	; 0x120 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	71 c0       	rjmp	.+226    	; 0x120 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6f c0       	rjmp	.+222    	; 0x120 <__bad_interrupt>
      42:	00 00       	nop
      44:	6d c0       	rjmp	.+218    	; 0x120 <__bad_interrupt>
      46:	00 00       	nop
      48:	6b c0       	rjmp	.+214    	; 0x120 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	69 c0       	rjmp	.+210    	; 0x120 <__bad_interrupt>
      4e:	00 00       	nop
      50:	67 c0       	rjmp	.+206    	; 0x120 <__bad_interrupt>
      52:	00 00       	nop
      54:	65 c0       	rjmp	.+202    	; 0x120 <__bad_interrupt>
      56:	00 00       	nop
      58:	63 c0       	rjmp	.+198    	; 0x120 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	61 c0       	rjmp	.+194    	; 0x120 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5f c0       	rjmp	.+190    	; 0x120 <__bad_interrupt>
      62:	00 00       	nop
      64:	5d c0       	rjmp	.+186    	; 0x120 <__bad_interrupt>
      66:	00 00       	nop
      68:	5b c0       	rjmp	.+182    	; 0x120 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	59 c0       	rjmp	.+178    	; 0x120 <__bad_interrupt>
      6e:	00 00       	nop
      70:	57 c0       	rjmp	.+174    	; 0x120 <__bad_interrupt>
      72:	00 00       	nop
      74:	55 c0       	rjmp	.+170    	; 0x120 <__bad_interrupt>
      76:	00 00       	nop
      78:	53 c0       	rjmp	.+166    	; 0x120 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	51 c0       	rjmp	.+162    	; 0x120 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4f c0       	rjmp	.+158    	; 0x120 <__bad_interrupt>
      82:	00 00       	nop
      84:	4d c0       	rjmp	.+154    	; 0x120 <__bad_interrupt>
      86:	00 00       	nop
      88:	4b c0       	rjmp	.+150    	; 0x120 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 00       	.word	0x0008	; ????
      8e:	00 00       	nop
      90:	be 92       	st	-X, r11
      92:	24 49       	sbci	r18, 0x94	; 148
      94:	12 3e       	cpi	r17, 0xE2	; 226
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
      9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
      9e:	4c 3e       	cpi	r20, 0xEC	; 236
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	be ab       	std	Y+54, r27	; 0x36
      a6:	aa aa       	std	Y+50, r10	; 0x32
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	00 08       	sbc	r0, r0
      ba:	41 78       	andi	r20, 0x81	; 129
      bc:	d3 bb       	out	0x13, r29	; 19
      be:	43 87       	std	Z+11, r20	; 0x0b
      c0:	d1 13       	cpse	r29, r17
      c2:	3d 19       	sub	r19, r13
      c4:	0e 3c       	cpi	r16, 0xCE	; 206
      c6:	c3 bd       	out	0x23, r28	; 35
      c8:	42 82       	std	Z+2, r4	; 0x02
      ca:	ad 2b       	or	r26, r29
      cc:	3e 68       	ori	r19, 0x8E	; 142
      ce:	ec 82       	std	Y+4, r14	; 0x04
      d0:	76 be       	out	0x36, r7	; 54
      d2:	d9 8f       	std	Y+25, r29	; 0x19
      d4:	e1 a9       	ldd	r30, Z+49	; 0x31
      d6:	3e 4c       	sbci	r19, 0xCE	; 206
      d8:	80 ef       	ldi	r24, 0xF0	; 240
      da:	ff be       	out	0x3f, r15	; 63
      dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <__floatsisf+0x36>
      de:	ff 7f       	andi	r31, 0xFF	; 255
      e0:	3f 00       	.word	0x003f	; ????
      e2:	00 00       	nop
	...

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d0 e1       	ldi	r29, 0x10	; 16
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	11 e0       	ldi	r17, 0x01	; 1
      f4:	a0 e0       	ldi	r26, 0x00	; 0
      f6:	b1 e0       	ldi	r27, 0x01	; 1
      f8:	e8 e5       	ldi	r30, 0x58	; 88
      fa:	f0 e1       	ldi	r31, 0x10	; 16
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0b bf       	out	0x3b, r16	; 59
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x14>
     102:	07 90       	elpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	ac 30       	cpi	r26, 0x0C	; 12
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0x10>

0000010c <__do_clear_bss>:
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	ac e0       	ldi	r26, 0x0C	; 12
     110:	b1 e0       	ldi	r27, 0x01	; 1
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	a5 32       	cpi	r26, 0x25	; 37
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	8d d2       	rcall	.+1306   	; 0x638 <main>
     11e:	9a c7       	rjmp	.+3892   	; 0x1054 <_exit>

00000120 <__bad_interrupt>:
     120:	6f cf       	rjmp	.-290    	; 0x0 <__vectors>

00000122 <time>:
     122:	fc 01       	movw	r30, r24
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	f8 94       	cli
     128:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <__system_time>
     12c:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <__system_time+0x1>
     130:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__system_time+0x2>
     134:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__system_time+0x3>
     138:	0f be       	out	0x3f, r0	; 63
     13a:	30 97       	sbiw	r30, 0x00	; 0
     13c:	21 f0       	breq	.+8      	; 0x146 <time+0x24>
     13e:	60 83       	st	Z, r22
     140:	71 83       	std	Z+1, r23	; 0x01
     142:	82 83       	std	Z+2, r24	; 0x02
     144:	93 83       	std	Z+3, r25	; 0x03
     146:	08 95       	ret

00000148 <displaySetPixel>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
     148:	e6 2f       	mov	r30, r22
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	e4 5f       	subi	r30, 0xF4	; 244
     14e:	fe 4f       	sbci	r31, 0xFE	; 254
     150:	21 e0       	ldi	r18, 0x01	; 1
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	02 c0       	rjmp	.+4      	; 0x15a <displaySetPixel+0x12>
     156:	22 0f       	add	r18, r18
     158:	33 1f       	adc	r19, r19
     15a:	8a 95       	dec	r24
     15c:	e2 f7       	brpl	.-8      	; 0x156 <displaySetPixel+0xe>
     15e:	80 81       	ld	r24, Z
     160:	28 2b       	or	r18, r24
     162:	20 83       	st	Z, r18
     164:	08 95       	ret

00000166 <displayClr>:
     166:	ec e0       	ldi	r30, 0x0C	; 12
     168:	f1 e0       	ldi	r31, 0x01	; 1
     16a:	84 e1       	ldi	r24, 0x14	; 20
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	11 92       	st	Z+, r1
     170:	e8 17       	cp	r30, r24
     172:	f9 07       	cpc	r31, r25
     174:	e1 f7       	brne	.-8      	; 0x16e <displayClr+0x8>
     176:	08 95       	ret

00000178 <twi_init>:
     178:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     17c:	80 e2       	ldi	r24, 0x20	; 32
     17e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     182:	08 95       	ret

00000184 <twi_start>:
     184:	84 ea       	ldi	r24, 0xA4	; 164
     186:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     18a:	e4 e7       	ldi	r30, 0x74	; 116
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	88 23       	and	r24, r24
     192:	ec f7       	brge	.-6      	; 0x18e <twi_start+0xa>
     194:	08 95       	ret

00000196 <twi_tx>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
     196:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
     19a:	84 e8       	ldi	r24, 0x84	; 132
     19c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
     1a0:	e4 e7       	ldi	r30, 0x74	; 116
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	88 23       	and	r24, r24
     1a8:	ec f7       	brge	.-6      	; 0x1a4 <twi_tx+0xe>
}
     1aa:	08 95       	ret

000001ac <displayInitHT16K33>:
inputs:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	08 2f       	mov	r16, r24
	// System setup page 30 ht16k33 datasheet
	twi_start();
     1b6:	e6 df       	rcall	.-52     	; 0x184 <twi_start>
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
     1b8:	80 2f       	mov	r24, r16
     1ba:	ed df       	rcall	.-38     	; 0x196 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
     1bc:	81 e2       	ldi	r24, 0x21	; 33
     1be:	eb df       	rcall	.-42     	; 0x196 <twi_tx>
     1c0:	c4 e7       	ldi	r28, 0x74	; 116
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
     1c2:	d0 e0       	ldi	r29, 0x00	; 0
     1c4:	14 e9       	ldi	r17, 0x94	; 148
     1c6:	18 83       	st	Y, r17
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();
		
	// ROW/INT set. Page 31 ht16k33 datasheet
	twi_start();
     1c8:	dd df       	rcall	.-70     	; 0x184 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
     1ca:	80 2f       	mov	r24, r16
     1cc:	e4 df       	rcall	.-56     	; 0x196 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output (default)
     1ce:	80 ea       	ldi	r24, 0xA0	; 160
     1d0:	e2 df       	rcall	.-60     	; 0x196 <twi_tx>
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
     1d2:	18 83       	st	Y, r17
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output (default)
	twi_stop();

	// Dimming set
	twi_start();
     1d4:	d7 df       	rcall	.-82     	; 0x184 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
     1d6:	80 2f       	mov	r24, r16
     1d8:	de df       	rcall	.-68     	; 0x196 <twi_tx>
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
     1da:	81 ee       	ldi	r24, 0xE1	; 225
     1dc:	dc df       	rcall	.-72     	; 0x196 <twi_tx>
     1de:	18 83       	st	Y, r17
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
     1e0:	d1 df       	rcall	.-94     	; 0x184 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
	twi_stop();

	// Display set
	twi_start();
     1e2:	80 2f       	mov	r24, r16
     1e4:	d8 df       	rcall	.-80     	; 0x196 <twi_tx>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
     1e6:	81 e8       	ldi	r24, 0x81	; 129
     1e8:	d6 df       	rcall	.-84     	; 0x196 <twi_tx>
     1ea:	18 83       	st	Y, r17
	twi_tx(0x81);			// Display ON, Blinking OFF
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	1f 91       	pop	r17
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
     1f2:	0f 91       	pop	r16
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
	*/
}
     1f4:	08 95       	ret

000001f6 <displayInit>:
     1f6:	c0 df       	rcall	.-128    	; 0x178 <twi_init>
     1f8:	88 ee       	ldi	r24, 0xE8	; 232
     1fa:	d8 cf       	rjmp	.-80     	; 0x1ac <displayInitHT16K33>
     1fc:	08 95       	ret

000001fe <display>:
inputs:
outputs:
notes:		Let op de 'vreemde' shift, foutje in printplaat?
Version:	DMK, Initial code
*******************************************************************/
{
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
	// Second display
	twi_start();
     206:	be df       	rcall	.-132    	; 0x184 <twi_start>
	twi_tx(D0_I2C_ADDR);
     208:	88 ee       	ldi	r24, 0xE8	; 232
     20a:	c5 df       	rcall	.-118    	; 0x196 <twi_tx>
	twi_tx(0x00);
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	c3 df       	rcall	.-122    	; 0x196 <twi_tx>
     210:	c4 e1       	ldi	r28, 0x14	; 20
     212:	d1 e0       	ldi	r29, 0x01	; 1
     214:	0c e0       	ldi	r16, 0x0C	; 12
     216:	11 e0       	ldi	r17, 0x01	; 1
     218:	8a 91       	ld	r24, -Y
	for( uint8_t idx = 0; idx < 8; idx++ ) {
		uint8_t a = buf[7 + 0 * 8 - idx];
     21a:	80 fb       	bst	r24, 0
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
     21c:	87 95       	ror	r24
     21e:	87 f9       	bld	r24, 7
     220:	ba df       	rcall	.-140    	; 0x196 <twi_tx>
		twi_tx( 0x00);
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	b8 df       	rcall	.-144    	; 0x196 <twi_tx>
     226:	c0 17       	cp	r28, r16
{
	// Second display
	twi_start();
	twi_tx(D0_I2C_ADDR);
	twi_tx(0x00);
	for( uint8_t idx = 0; idx < 8; idx++ ) {
     228:	d1 07       	cpc	r29, r17
     22a:	b1 f7       	brne	.-20     	; 0x218 <display+0x1a>
     22c:	84 e9       	ldi	r24, 0x94	; 148
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
     22e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     232:	df 91       	pop	r29
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
}
     234:	cf 91       	pop	r28
     236:	1f 91       	pop	r17
     238:	0f 91       	pop	r16
     23a:	08 95       	ret

0000023c <gl_change_direction>:

location* foodLoc;

void gl_change_direction(uint8_t dir)
{
	if (dir == LEFT && direction == RIGHT)	return;
     23c:	84 30       	cpi	r24, 0x04	; 4
     23e:	29 f4       	brne	.+10     	; 0x24a <gl_change_direction+0xe>
     240:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <direction>
     244:	92 30       	cpi	r25, 0x02	; 2
     246:	a9 f4       	brne	.+42     	; 0x272 <gl_change_direction+0x36>
     248:	08 95       	ret
	if (dir == RIGHT && direction == LEFT)	return;
     24a:	82 30       	cpi	r24, 0x02	; 2
     24c:	29 f4       	brne	.+10     	; 0x258 <gl_change_direction+0x1c>
     24e:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <direction>
     252:	94 30       	cpi	r25, 0x04	; 4
     254:	71 f4       	brne	.+28     	; 0x272 <gl_change_direction+0x36>
     256:	08 95       	ret
	if (dir == UP && direction == DOWN)		return;
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	29 f4       	brne	.+10     	; 0x266 <gl_change_direction+0x2a>
     25c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <direction>
     260:	93 30       	cpi	r25, 0x03	; 3
     262:	39 f4       	brne	.+14     	; 0x272 <gl_change_direction+0x36>
     264:	08 95       	ret
	if (dir == DOWN && direction == UP)		return;
     266:	83 30       	cpi	r24, 0x03	; 3
     268:	21 f4       	brne	.+8      	; 0x272 <gl_change_direction+0x36>
     26a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <direction>
     26e:	91 30       	cpi	r25, 0x01	; 1
     270:	11 f0       	breq	.+4      	; 0x276 <gl_change_direction+0x3a>
	direction = dir;
     272:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <direction>
     276:	08 95       	ret

00000278 <gl_compare_locations>:
			return 1;
	return 0;
}

int gl_compare_locations(location* first, location* second)
{
     278:	fc 01       	movw	r30, r24
	return (first->x == second->x && first->y == second->y);
     27a:	90 81       	ld	r25, Z
     27c:	db 01       	movw	r26, r22
     27e:	8c 91       	ld	r24, X
     280:	98 13       	cpse	r25, r24
     282:	09 c0       	rjmp	.+18     	; 0x296 <gl_compare_locations+0x1e>
     284:	21 e0       	ldi	r18, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	31 81       	ldd	r19, Z+1	; 0x01
     28a:	11 96       	adiw	r26, 0x01	; 1
     28c:	8c 91       	ld	r24, X
     28e:	38 13       	cpse	r19, r24
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	82 2f       	mov	r24, r18
     294:	08 95       	ret
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
}
     29a:	08 95       	ret

0000029c <gl_check_collision>:
	gl_make_food();
	gl_loc_to_display();
}

int gl_check_collision(location* locations, location* other)
{
     29c:	ef 92       	push	r14
     29e:	ff 92       	push	r15
     2a0:	0f 93       	push	r16
     2a2:	1f 93       	push	r17
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
	for (uint8_t i = 0; i < snake_length; i++)
     2a8:	00 91 1a 01 	lds	r16, 0x011A	; 0x80011a <snake_length>
     2ac:	00 23       	and	r16, r16
     2ae:	71 f0       	breq	.+28     	; 0x2cc <gl_check_collision+0x30>
     2b0:	7b 01       	movw	r14, r22
     2b2:	c8 2f       	mov	r28, r24
     2b4:	d9 2f       	mov	r29, r25
     2b6:	10 e0       	ldi	r17, 0x00	; 0
		if (gl_compare_locations(&locations[i], other))
     2b8:	b7 01       	movw	r22, r14
     2ba:	ce 01       	movw	r24, r28
     2bc:	dd df       	rcall	.-70     	; 0x278 <gl_compare_locations>
     2be:	00 97       	sbiw	r24, 0x00	; 0
     2c0:	41 f4       	brne	.+16     	; 0x2d2 <gl_check_collision+0x36>
	gl_loc_to_display();
}

int gl_check_collision(location* locations, location* other)
{
	for (uint8_t i = 0; i < snake_length; i++)
     2c2:	1f 5f       	subi	r17, 0xFF	; 255
     2c4:	22 96       	adiw	r28, 0x02	; 2
     2c6:	10 13       	cpse	r17, r16
     2c8:	f7 cf       	rjmp	.-18     	; 0x2b8 <gl_check_collision+0x1c>
     2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <gl_check_collision+0x3a>
		if (gl_compare_locations(&locations[i], other))
			return 1;
	return 0;
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <gl_check_collision+0x3a>

int gl_check_collision(location* locations, location* other)
{
	for (uint8_t i = 0; i < snake_length; i++)
		if (gl_compare_locations(&locations[i], other))
			return 1;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	90 e0       	ldi	r25, 0x00	; 0
	return 0;
}
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	1f 91       	pop	r17
     2dc:	0f 91       	pop	r16
     2de:	ff 90       	pop	r15
     2e0:	ef 90       	pop	r14
     2e2:	08 95       	ret

000002e4 <gl_make_food>:
{
	return (first->x == second->x && first->y == second->y);
}

void gl_make_food()
{
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
	foodLoc->x = rand() % DOTMATRIX_SIZE;
     2e8:	c0 91 1b 01 	lds	r28, 0x011B	; 0x80011b <foodLoc>
     2ec:	d0 91 1c 01 	lds	r29, 0x011C	; 0x80011c <foodLoc+0x1>
     2f0:	3d d6       	rcall	.+3194   	; 0xf6c <rand>
     2f2:	87 70       	andi	r24, 0x07	; 7
     2f4:	90 78       	andi	r25, 0x80	; 128
     2f6:	99 23       	and	r25, r25
     2f8:	24 f4       	brge	.+8      	; 0x302 <gl_make_food+0x1e>
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	88 6f       	ori	r24, 0xF8	; 248
     2fe:	9f 6f       	ori	r25, 0xFF	; 255
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	88 83       	st	Y, r24
	foodLoc->y = rand() % DOTMATRIX_SIZE;
     304:	c0 91 1b 01 	lds	r28, 0x011B	; 0x80011b <foodLoc>
     308:	d0 91 1c 01 	lds	r29, 0x011C	; 0x80011c <foodLoc+0x1>
     30c:	2f d6       	rcall	.+3166   	; 0xf6c <rand>
     30e:	87 70       	andi	r24, 0x07	; 7
     310:	90 78       	andi	r25, 0x80	; 128
     312:	99 23       	and	r25, r25
     314:	24 f4       	brge	.+8      	; 0x31e <gl_make_food+0x3a>
     316:	01 97       	sbiw	r24, 0x01	; 1
     318:	88 6f       	ori	r24, 0xF8	; 248
     31a:	9f 6f       	ori	r25, 0xFF	; 255
     31c:	01 96       	adiw	r24, 0x01	; 1
     31e:	89 83       	std	Y+1, r24	; 0x01
	if (gl_check_collision(temp, foodLoc))
     320:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <foodLoc>
     324:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <foodLoc+0x1>
     328:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <temp>
     32c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <temp+0x1>
     330:	b5 df       	rcall	.-150    	; 0x29c <gl_check_collision>
     332:	89 2b       	or	r24, r25
		gl_make_food();
     334:	09 f0       	breq	.+2      	; 0x338 <gl_make_food+0x54>
     336:	d6 df       	rcall	.-84     	; 0x2e4 <gl_make_food>
}
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <gl_set_speed>:

void gl_set_speed(uint16_t setSpeed)
{
	speed = setSpeed;
     33e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <speed>
     342:	08 95       	ret

00000344 <gl_speed_increase>:
}

void gl_speed_increase()
{
	uint8_t division = speed / 20;
     344:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <speed>
	speed = speed - division;
     348:	8d ec       	ldi	r24, 0xCD	; 205
     34a:	98 9f       	mul	r25, r24
     34c:	81 2d       	mov	r24, r1
     34e:	11 24       	eor	r1, r1
     350:	82 95       	swap	r24
     352:	8f 70       	andi	r24, 0x0F	; 15
     354:	98 1b       	sub	r25, r24
     356:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <speed>
     35a:	08 95       	ret

0000035c <gl_get_speed>:
}

uint8_t gl_get_speed()
{
	return speed;
}
     35c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <speed>
     360:	08 95       	ret

00000362 <gl_loc_to_display>:
	
	// display
	gl_loc_to_display();
}

void gl_loc_to_display() {
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
	emptyDisplay();
     366:	dc d1       	rcall	.+952    	; 0x720 <emptyDisplay>
	writeLedDisplay(snake_length - 2);
     368:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <snake_length>
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	02 97       	sbiw	r24, 0x02	; 2
	
	
	displayClr();
     370:	e1 d1       	rcall	.+962    	; 0x734 <writeLedDisplay>
     372:	f9 de       	rcall	.-526    	; 0x166 <displayClr>
	for (int i = 0; i < snake_length; i++)
     374:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <snake_length>
     378:	88 23       	and	r24, r24
     37a:	a9 f0       	breq	.+42     	; 0x3a6 <gl_loc_to_display+0x44>
     37c:	c0 e0       	ldi	r28, 0x00	; 0
     37e:	d0 e0       	ldi	r29, 0x00	; 0
		displaySetPixel(current[i].x, current[i].y);
     380:	ce 01       	movw	r24, r28
     382:	88 0f       	add	r24, r24
     384:	99 1f       	adc	r25, r25
     386:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <current>
     38a:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <current+0x1>
     38e:	e8 0f       	add	r30, r24
     390:	f9 1f       	adc	r31, r25
     392:	61 81       	ldd	r22, Z+1	; 0x01
     394:	80 81       	ld	r24, Z
     396:	d8 de       	rcall	.-592    	; 0x148 <displaySetPixel>
	emptyDisplay();
	writeLedDisplay(snake_length - 2);
	
	
	displayClr();
	for (int i = 0; i < snake_length; i++)
     398:	21 96       	adiw	r28, 0x01	; 1
     39a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <snake_length>
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	c8 17       	cp	r28, r24
     3a2:	d9 07       	cpc	r29, r25
     3a4:	6c f3       	brlt	.-38     	; 0x380 <gl_loc_to_display+0x1e>
		displaySetPixel(current[i].x, current[i].y);
	displaySetPixel(foodLoc->x, foodLoc->y);
     3a6:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <foodLoc>
     3aa:	f0 91 1c 01 	lds	r31, 0x011C	; 0x80011c <foodLoc+0x1>
     3ae:	61 81       	ldd	r22, Z+1	; 0x01
     3b0:	80 81       	ld	r24, Z
	display();
     3b2:	ca de       	rcall	.-620    	; 0x148 <displaySetPixel>
     3b4:	24 df       	rcall	.-440    	; 0x1fe <display>
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <gl_restart>:
	if (dir == DOWN && direction == UP)		return;
	direction = dir;
}

void gl_restart()
{
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
	spi_masterInit();
     3c4:	5b d1       	rcall	.+694    	; 0x67c <spi_masterInit>
	displayDriverInit();
     3c6:	7c d1       	rcall	.+760    	; 0x6c0 <displayDriverInit>
     3c8:	80 e0       	ldi	r24, 0x00	; 0
	srand(time(NULL));
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	aa de       	rcall	.-684    	; 0x122 <time>
     3ce:	cb 01       	movw	r24, r22
     3d0:	d0 d5       	rcall	.+2976   	; 0xf72 <srand>
     3d2:	82 e0       	ldi	r24, 0x02	; 2
	snake_length = 2;
     3d4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <snake_length>
     3d8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <temp>
	
	free(temp);
     3dc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <temp+0x1>
     3e0:	f5 d4       	rcall	.+2538   	; 0xdcc <free>
     3e2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <current>
	free(current);
     3e6:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <current+0x1>
     3ea:	f0 d4       	rcall	.+2528   	; 0xdcc <free>
     3ec:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <foodLoc>
	free(foodLoc);
     3f0:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <foodLoc+0x1>
     3f4:	eb d4       	rcall	.+2518   	; 0xdcc <free>
     3f6:	00 91 0a 01 	lds	r16, 0x010A	; 0x80010a <loc_size>
	
	foodLoc = malloc(loc_size);
     3fa:	10 91 0b 01 	lds	r17, 0x010B	; 0x80010b <loc_size+0x1>
     3fe:	c8 01       	movw	r24, r16
     400:	4d d4       	rcall	.+2202   	; 0xc9c <malloc>
     402:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <foodLoc+0x1>
     406:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <foodLoc>
     40a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <snake_length>
	temp = malloc(loc_size * snake_length);
     40e:	80 9f       	mul	r24, r16
     410:	e0 01       	movw	r28, r0
     412:	81 9f       	mul	r24, r17
     414:	d0 0d       	add	r29, r0
     416:	11 24       	eor	r1, r1
     418:	ce 01       	movw	r24, r28
     41a:	40 d4       	rcall	.+2176   	; 0xc9c <malloc>
     41c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <temp+0x1>
     420:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <temp>
     424:	ce 01       	movw	r24, r28
	current = malloc(loc_size * snake_length);
     426:	3a d4       	rcall	.+2164   	; 0xc9c <malloc>
     428:	fc 01       	movw	r30, r24
     42a:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <current+0x1>
     42e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <current>
     432:	83 e0       	ldi	r24, 0x03	; 3
	
	current[0].x = 3;
     434:	80 83       	st	Z, r24
	current[0].y = 4;
     436:	94 e0       	ldi	r25, 0x04	; 4
     438:	91 83       	std	Z+1, r25	; 0x01
	current[1].x = 3;
     43a:	82 83       	std	Z+2, r24	; 0x02
	current[1].y = 5;
     43c:	95 e0       	ldi	r25, 0x05	; 5
     43e:	93 83       	std	Z+3, r25	; 0x03
	
	direction = DOWN;
     440:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <direction>
	
	gl_make_food();
     444:	4f df       	rcall	.-354    	; 0x2e4 <gl_make_food>
     446:	8d df       	rcall	.-230    	; 0x362 <gl_loc_to_display>
	gl_loc_to_display();
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
}
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	08 95       	ret

00000452 <gl_gamestep>:
     452:	cf 92       	push	r12
     454:	df 92       	push	r13
{
	return speed;
}

void gl_gamestep()
{
     456:	ef 92       	push	r14
     458:	ff 92       	push	r15
     45a:	0f 93       	push	r16
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	00 d0       	rcall	.+0      	; 0x464 <gl_gamestep+0x12>
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
	// Determine next location of head
	location nextLoc = current[0];
     468:	00 91 17 01 	lds	r16, 0x0117	; 0x800117 <current>
     46c:	10 91 18 01 	lds	r17, 0x0118	; 0x800118 <current+0x1>
     470:	f8 01       	movw	r30, r16
     472:	80 81       	ld	r24, Z
     474:	91 81       	ldd	r25, Z+1	; 0x01
     476:	9a 83       	std	Y+2, r25	; 0x02
     478:	89 83       	std	Y+1, r24	; 0x01
	switch (direction) {
     47a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <direction>
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	81 f1       	breq	.+96     	; 0x4e2 <gl_gamestep+0x90>
     482:	18 f4       	brcc	.+6      	; 0x48a <gl_gamestep+0x38>
     484:	81 30       	cpi	r24, 0x01	; 1
     486:	31 f0       	breq	.+12     	; 0x494 <gl_gamestep+0x42>
     488:	38 c0       	rjmp	.+112    	; 0x4fa <gl_gamestep+0xa8>
     48a:	83 30       	cpi	r24, 0x03	; 3
     48c:	81 f0       	breq	.+32     	; 0x4ae <gl_gamestep+0x5c>
     48e:	84 30       	cpi	r24, 0x04	; 4
     490:	d9 f0       	breq	.+54     	; 0x4c8 <gl_gamestep+0x76>
     492:	33 c0       	rjmp	.+102    	; 0x4fa <gl_gamestep+0xa8>
		case UP:
		nextLoc.y = (nextLoc.y + DOTMATRIX_SIZE + 1) % DOTMATRIX_SIZE;
     494:	8a 81       	ldd	r24, Y+2	; 0x02
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	09 96       	adiw	r24, 0x09	; 9
     49a:	87 70       	andi	r24, 0x07	; 7
     49c:	90 78       	andi	r25, 0x80	; 128
     49e:	99 23       	and	r25, r25
     4a0:	24 f4       	brge	.+8      	; 0x4aa <gl_gamestep+0x58>
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	88 6f       	ori	r24, 0xF8	; 248
     4a6:	9f 6f       	ori	r25, 0xFF	; 255
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	8a 83       	std	Y+2, r24	; 0x02
		break;
     4ac:	26 c0       	rjmp	.+76     	; 0x4fa <gl_gamestep+0xa8>
		case DOWN:
		nextLoc.y = (nextLoc.y + DOTMATRIX_SIZE - 1) % DOTMATRIX_SIZE;
     4ae:	8a 81       	ldd	r24, Y+2	; 0x02
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	07 96       	adiw	r24, 0x07	; 7
     4b4:	87 70       	andi	r24, 0x07	; 7
     4b6:	90 78       	andi	r25, 0x80	; 128
     4b8:	99 23       	and	r25, r25
     4ba:	24 f4       	brge	.+8      	; 0x4c4 <gl_gamestep+0x72>
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	88 6f       	ori	r24, 0xF8	; 248
     4c0:	9f 6f       	ori	r25, 0xFF	; 255
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	8a 83       	std	Y+2, r24	; 0x02
		break;
     4c6:	19 c0       	rjmp	.+50     	; 0x4fa <gl_gamestep+0xa8>
		case LEFT:
		nextLoc.x = (nextLoc.x + DOTMATRIX_SIZE - 1) % DOTMATRIX_SIZE;
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	07 96       	adiw	r24, 0x07	; 7
     4ce:	87 70       	andi	r24, 0x07	; 7
     4d0:	90 78       	andi	r25, 0x80	; 128
     4d2:	99 23       	and	r25, r25
     4d4:	24 f4       	brge	.+8      	; 0x4de <gl_gamestep+0x8c>
     4d6:	01 97       	sbiw	r24, 0x01	; 1
     4d8:	88 6f       	ori	r24, 0xF8	; 248
     4da:	9f 6f       	ori	r25, 0xFF	; 255
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	89 83       	std	Y+1, r24	; 0x01
		break;
     4e0:	0c c0       	rjmp	.+24     	; 0x4fa <gl_gamestep+0xa8>
		case RIGHT:
		nextLoc.x = (nextLoc.x + DOTMATRIX_SIZE + 1) % DOTMATRIX_SIZE;
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	09 96       	adiw	r24, 0x09	; 9
     4e8:	87 70       	andi	r24, 0x07	; 7
     4ea:	90 78       	andi	r25, 0x80	; 128
     4ec:	99 23       	and	r25, r25
     4ee:	24 f4       	brge	.+8      	; 0x4f8 <gl_gamestep+0xa6>
     4f0:	01 97       	sbiw	r24, 0x01	; 1
     4f2:	88 6f       	ori	r24, 0xF8	; 248
     4f4:	9f 6f       	ori	r25, 0xFF	; 255
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	
	// Check collision
	if (gl_check_collision(current, &nextLoc) && !gl_compare_locations(&nextLoc, &current[snake_length - 1]))
     4fa:	be 01       	movw	r22, r28
     4fc:	6f 5f       	subi	r22, 0xFF	; 255
     4fe:	7f 4f       	sbci	r23, 0xFF	; 255
     500:	c8 01       	movw	r24, r16
     502:	cc de       	rcall	.-616    	; 0x29c <gl_check_collision>
     504:	89 2b       	or	r24, r25
     506:	99 f0       	breq	.+38     	; 0x52e <gl_gamestep+0xdc>
     508:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <snake_length>
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	61 50       	subi	r22, 0x01	; 1
     510:	70 48       	sbci	r23, 0x80	; 128
     512:	66 0f       	add	r22, r22
     514:	77 1f       	adc	r23, r23
     516:	60 0f       	add	r22, r16
     518:	71 1f       	adc	r23, r17
     51a:	ce 01       	movw	r24, r28
     51c:	01 96       	adiw	r24, 0x01	; 1
     51e:	ac de       	rcall	.-680    	; 0x278 <gl_compare_locations>
     520:	89 2b       	or	r24, r25
     522:	29 f4       	brne	.+10     	; 0x52e <gl_gamestep+0xdc>
	{
		wait(2000);
     524:	80 ed       	ldi	r24, 0xD0	; 208
     526:	97 e0       	ldi	r25, 0x07	; 7
		gl_restart();
     528:	7c d1       	rcall	.+760    	; 0x822 <wait>
     52a:	48 df       	rcall	.-368    	; 0x3bc <gl_restart>
     52c:	7a c0       	rjmp	.+244    	; 0x622 <gl_gamestep+0x1d0>
		return;
	}
	
	// Check food
	if (gl_compare_locations(&nextLoc, foodLoc)) {
     52e:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <foodLoc>
     532:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <foodLoc+0x1>
     536:	ce 01       	movw	r24, r28
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	9e de       	rcall	.-708    	; 0x278 <gl_compare_locations>
     53c:	89 2b       	or	r24, r25
     53e:	09 f4       	brne	.+2      	; 0x542 <gl_gamestep+0xf0>
     540:	43 c0       	rjmp	.+134    	; 0x5c8 <gl_gamestep+0x176>
		snake_length++;
     542:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <snake_length>
     546:	8f 5f       	subi	r24, 0xFF	; 255
     548:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <snake_length>
		free(temp);
     54c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <temp>
     550:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <temp+0x1>
     554:	3b d4       	rcall	.+2166   	; 0xdcc <free>
		temp = malloc(snake_length * loc_size);
     556:	c0 90 0a 01 	lds	r12, 0x010A	; 0x80010a <loc_size>
     55a:	d0 90 0b 01 	lds	r13, 0x010B	; 0x80010b <loc_size+0x1>
     55e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <snake_length>
     562:	8c 9d       	mul	r24, r12
     564:	80 01       	movw	r16, r0
     566:	8d 9d       	mul	r24, r13
     568:	10 0d       	add	r17, r0
     56a:	11 24       	eor	r1, r1
     56c:	c8 01       	movw	r24, r16
     56e:	96 d3       	rcall	.+1836   	; 0xc9c <malloc>
     570:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <temp+0x1>
     574:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <temp>
		memcpy(temp + 1, current, snake_length * loc_size - loc_size);
     578:	e0 90 17 01 	lds	r14, 0x0117	; 0x800117 <current>
     57c:	f0 90 18 01 	lds	r15, 0x0118	; 0x800118 <current+0x1>
     580:	a8 01       	movw	r20, r16
     582:	4c 19       	sub	r20, r12
     584:	5d 09       	sbc	r21, r13
     586:	b7 01       	movw	r22, r14
     588:	02 96       	adiw	r24, 0x02	; 2
		free(current);
     58a:	fe d4       	rcall	.+2556   	; 0xf88 <memcpy>
     58c:	c7 01       	movw	r24, r14
     58e:	1e d4       	rcall	.+2108   	; 0xdcc <free>
		current = malloc(snake_length * loc_size);
     590:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <snake_length>
     594:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <loc_size>
     598:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <loc_size+0x1>
     59c:	ac 01       	movw	r20, r24
     59e:	24 9f       	mul	r18, r20
     5a0:	c0 01       	movw	r24, r0
     5a2:	25 9f       	mul	r18, r21
     5a4:	90 0d       	add	r25, r0
     5a6:	11 24       	eor	r1, r1
     5a8:	79 d3       	rcall	.+1778   	; 0xc9c <malloc>
     5aa:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <current+0x1>
     5ae:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <current>
		temp[0] = nextLoc;
     5b2:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <temp>
     5b6:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <temp+0x1>
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	9a 81       	ldd	r25, Y+2	; 0x02
     5be:	91 83       	std	Z+1, r25	; 0x01
		gl_make_food();
     5c0:	80 83       	st	Z, r24
     5c2:	90 de       	rcall	.-736    	; 0x2e4 <gl_make_food>
		gl_speed_increase();
     5c4:	bf de       	rcall	.-642    	; 0x344 <gl_speed_increase>
     5c6:	1c c0       	rjmp	.+56     	; 0x600 <gl_gamestep+0x1ae>
     5c8:	e0 90 14 01 	lds	r14, 0x0114	; 0x800114 <temp>
	} else {
		memcpy(temp + 1, current, snake_length * loc_size - loc_size);
     5cc:	f0 90 15 01 	lds	r15, 0x0115	; 0x800115 <temp+0x1>
     5d0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <snake_length>
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	01 97       	sbiw	r24, 0x01	; 1
     5d8:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <loc_size>
     5dc:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <loc_size+0x1>
     5e0:	82 9f       	mul	r24, r18
     5e2:	a0 01       	movw	r20, r0
     5e4:	83 9f       	mul	r24, r19
     5e6:	50 0d       	add	r21, r0
     5e8:	92 9f       	mul	r25, r18
     5ea:	50 0d       	add	r21, r0
     5ec:	11 24       	eor	r1, r1
     5ee:	b8 01       	movw	r22, r16
     5f0:	c7 01       	movw	r24, r14
     5f2:	02 96       	adiw	r24, 0x02	; 2
     5f4:	c9 d4       	rcall	.+2450   	; 0xf88 <memcpy>
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
		temp[0] = nextLoc;
     5f8:	9a 81       	ldd	r25, Y+2	; 0x02
     5fa:	f7 01       	movw	r30, r14
     5fc:	91 83       	std	Z+1, r25	; 0x01
     5fe:	80 83       	st	Z, r24
     600:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <current>
	}
	location* switcharoo = current;
     604:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <current+0x1>
	current = temp;
     608:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <temp>
     60c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <temp+0x1>
     610:	30 93 18 01 	sts	0x0118, r19	; 0x800118 <current+0x1>
     614:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <current>
	temp = switcharoo;
     618:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <temp+0x1>
     61c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <temp>
	
	// display
	gl_loc_to_display();
     620:	a0 de       	rcall	.-704    	; 0x362 <gl_loc_to_display>
     622:	0f 90       	pop	r0
}
     624:	0f 90       	pop	r0
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	ff 90       	pop	r15
     630:	ef 90       	pop	r14
     632:	df 90       	pop	r13
     634:	cf 90       	pop	r12
     636:	08 95       	ret

00000638 <main>:
}
*/

int main( void )
{
	displayInit();	
     638:	de dd       	rcall	.-1092   	; 0x1f6 <displayInit>
	displayClr();
     63a:	95 dd       	rcall	.-1238   	; 0x166 <displayClr>
	display();
     63c:	e0 dd       	rcall	.-1088   	; 0x1fe <display>
     63e:	be de       	rcall	.-644    	; 0x3bc <gl_restart>
	EIMSK = 0b1111;			// Enable INT1 & INT2
		
	sei();
	*/
	
	gl_restart();
     640:	84 ef       	ldi	r24, 0xF4	; 244
	gl_set_speed(500);
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	7c de       	rcall	.-776    	; 0x33e <gl_set_speed>
     646:	8f ef       	ldi	r24, 0xFF	; 255
	
	DDRB = 0xFF;
     648:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;	
     64a:	8a bb       	out	0x1a, r24	; 26
	
	while(1) {
		wait(gl_get_speed());
     64c:	87 de       	rcall	.-754    	; 0x35c <gl_get_speed>
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	e8 d0       	rcall	.+464    	; 0x822 <wait>
     652:	cd 9b       	sbis	0x19, 5	; 25
		if (PINA & BIT(5))
     654:	03 c0       	rjmp	.+6      	; 0x65c <main+0x24>
			gl_change_direction(RIGHT);
     656:	82 e0       	ldi	r24, 0x02	; 2
     658:	f1 dd       	rcall	.-1054   	; 0x23c <gl_change_direction>
     65a:	0e c0       	rjmp	.+28     	; 0x678 <main+0x40>
     65c:	ce 9b       	sbis	0x19, 6	; 25
		else if (PINA & BIT(6))
     65e:	03 c0       	rjmp	.+6      	; 0x666 <main+0x2e>
			gl_change_direction(DOWN);
     660:	83 e0       	ldi	r24, 0x03	; 3
     662:	ec dd       	rcall	.-1064   	; 0x23c <gl_change_direction>
     664:	09 c0       	rjmp	.+18     	; 0x678 <main+0x40>
		else if (PINA & BIT(7))
     666:	cf 9b       	sbis	0x19, 7	; 25
			gl_change_direction(LEFT);
     668:	03 c0       	rjmp	.+6      	; 0x670 <main+0x38>
     66a:	84 e0       	ldi	r24, 0x04	; 4
     66c:	e7 dd       	rcall	.-1074   	; 0x23c <gl_change_direction>
     66e:	04 c0       	rjmp	.+8      	; 0x678 <main+0x40>
		else if (PINB & BIT(6))
     670:	b6 9b       	sbis	0x16, 6	; 22
     672:	02 c0       	rjmp	.+4      	; 0x678 <main+0x40>
			gl_change_direction(UP);
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	e2 dd       	rcall	.-1084   	; 0x23c <gl_change_direction>
     678:	ec de       	rcall	.-552    	; 0x452 <gl_gamestep>
		
		gl_gamestep();
     67a:	e8 cf       	rjmp	.-48     	; 0x64c <main+0x14>

0000067c <spi_masterInit>:
     67c:	8f ef       	ldi	r24, 0xFF	; 255
	}
     67e:	87 bb       	out	0x17, r24	; 23
void displayOff()
{
	spi_slaveSelect(0); // Select display chip
	spi_write(0x0C); // Register 0B: Shutdown register
	spi_write(0x00); // -> 1 = Normal operation
	spi_slaveDeSelect(0); // Deselect display chip
     680:	bb 98       	cbi	0x17, 3	; 23
     682:	c0 9a       	sbi	0x18, 0	; 24
     684:	82 e5       	ldi	r24, 0x52	; 82
     686:	8d b9       	out	0x0d, r24	; 13
     688:	08 95       	ret

0000068a <spi_write>:
     68a:	8f b9       	out	0x0f, r24	; 15
     68c:	77 9b       	sbis	0x0e, 7	; 14
     68e:	fe cf       	rjmp	.-4      	; 0x68c <spi_write+0x2>
     690:	08 95       	ret

00000692 <spi_slaveSelect>:
     692:	98 b3       	in	r25, 0x18	; 24
     694:	21 e0       	ldi	r18, 0x01	; 1
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	02 c0       	rjmp	.+4      	; 0x69e <spi_slaveSelect+0xc>
     69a:	22 0f       	add	r18, r18
     69c:	33 1f       	adc	r19, r19
     69e:	8a 95       	dec	r24
     6a0:	e2 f7       	brpl	.-8      	; 0x69a <spi_slaveSelect+0x8>
     6a2:	20 95       	com	r18
     6a4:	29 23       	and	r18, r25
     6a6:	28 bb       	out	0x18, r18	; 24
     6a8:	08 95       	ret

000006aa <spi_slaveDeSelect>:
     6aa:	98 b3       	in	r25, 0x18	; 24
     6ac:	21 e0       	ldi	r18, 0x01	; 1
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <spi_slaveDeSelect+0xc>
     6b2:	22 0f       	add	r18, r18
     6b4:	33 1f       	adc	r19, r19
     6b6:	8a 95       	dec	r24
     6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <spi_slaveDeSelect+0x8>
     6ba:	29 2b       	or	r18, r25
     6bc:	28 bb       	out	0x18, r18	; 24
     6be:	08 95       	ret

000006c0 <displayDriverInit>:
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	e7 df       	rcall	.-50     	; 0x692 <spi_slaveSelect>
     6c4:	89 e0       	ldi	r24, 0x09	; 9
     6c6:	e1 df       	rcall	.-62     	; 0x68a <spi_write>
     6c8:	8f e0       	ldi	r24, 0x0F	; 15
     6ca:	df df       	rcall	.-66     	; 0x68a <spi_write>
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	ed df       	rcall	.-38     	; 0x6aa <spi_slaveDeSelect>
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	df df       	rcall	.-66     	; 0x692 <spi_slaveSelect>
     6d4:	8a e0       	ldi	r24, 0x0A	; 10
     6d6:	d9 df       	rcall	.-78     	; 0x68a <spi_write>
     6d8:	84 e0       	ldi	r24, 0x04	; 4
     6da:	d7 df       	rcall	.-82     	; 0x68a <spi_write>
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	e5 df       	rcall	.-54     	; 0x6aa <spi_slaveDeSelect>
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	d7 df       	rcall	.-82     	; 0x692 <spi_slaveSelect>
     6e4:	8b e0       	ldi	r24, 0x0B	; 11
     6e6:	d1 df       	rcall	.-94     	; 0x68a <spi_write>
     6e8:	83 e0       	ldi	r24, 0x03	; 3
     6ea:	cf df       	rcall	.-98     	; 0x68a <spi_write>
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	dd df       	rcall	.-70     	; 0x6aa <spi_slaveDeSelect>
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	cf df       	rcall	.-98     	; 0x692 <spi_slaveSelect>
     6f4:	8c e0       	ldi	r24, 0x0C	; 12
     6f6:	c9 df       	rcall	.-110    	; 0x68a <spi_write>
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	c7 df       	rcall	.-114    	; 0x68a <spi_write>
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	d5 cf       	rjmp	.-86     	; 0x6aa <spi_slaveDeSelect>
     700:	08 95       	ret

00000702 <spi_writeWord>:
}

void spi_writeWord(unsigned char address, unsigned char data)
{
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	d8 2f       	mov	r29, r24
     708:	c6 2f       	mov	r28, r22
	spi_slaveSelect(0);
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	c2 df       	rcall	.-124    	; 0x692 <spi_slaveSelect>
	spi_write(address);
     70e:	8d 2f       	mov	r24, r29
     710:	bc df       	rcall	.-136    	; 0x68a <spi_write>
	spi_write(data);
     712:	8c 2f       	mov	r24, r28
     714:	ba df       	rcall	.-140    	; 0x68a <spi_write>
	spi_slaveDeSelect(0);
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	c8 df       	rcall	.-112    	; 0x6aa <spi_slaveDeSelect>
     71a:	df 91       	pop	r29
}
     71c:	cf 91       	pop	r28
     71e:	08 95       	ret

00000720 <emptyDisplay>:
     720:	cf 93       	push	r28

void emptyDisplay()
{
     722:	c1 e0       	ldi	r28, 0x01	; 1
	for (int i = 1; i <=4; i++)
	spi_writeWord(i, 0xF);
     724:	6f e0       	ldi	r22, 0x0F	; 15
     726:	8c 2f       	mov	r24, r28
     728:	ec df       	rcall	.-40     	; 0x702 <spi_writeWord>
     72a:	cf 5f       	subi	r28, 0xFF	; 255
	spi_slaveDeSelect(0);
}

void emptyDisplay()
{
	for (int i = 1; i <=4; i++)
     72c:	c5 30       	cpi	r28, 0x05	; 5
     72e:	d1 f7       	brne	.-12     	; 0x724 <emptyDisplay+0x4>
	spi_writeWord(i, 0xF);
}
     730:	cf 91       	pop	r28
     732:	08 95       	ret

00000734 <writeLedDisplay>:

void writeLedDisplay(int value)
{
     734:	af 92       	push	r10
     736:	bf 92       	push	r11
     738:	cf 92       	push	r12
     73a:	df 92       	push	r13
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	89 31       	cpi	r24, 0x19	; 25
     74a:	2c ef       	ldi	r18, 0xFC	; 252
     74c:	92 07       	cpc	r25, r18
     74e:	14 f4       	brge	.+4      	; 0x754 <writeLedDisplay+0x20>
     750:	89 e1       	ldi	r24, 0x19	; 25
     752:	9c ef       	ldi	r25, 0xFC	; 252
     754:	ec 01       	movw	r28, r24
     756:	c0 31       	cpi	r28, 0x10	; 16
     758:	87 e2       	ldi	r24, 0x27	; 39
     75a:	d8 07       	cpc	r29, r24
     75c:	14 f0       	brlt	.+4      	; 0x762 <writeLedDisplay+0x2e>
     75e:	cf e0       	ldi	r28, 0x0F	; 15
     760:	d7 e2       	ldi	r29, 0x27	; 39
	if (value > 9999)
	value = 9999;
	else if (value < -999)
	value = -999;
	
	if (value >= 0)
     762:	dd 23       	and	r29, r29
     764:	3c f1       	brlt	.+78     	; 0x7b4 <writeLedDisplay+0x80>
	{
		int length = (int) log10(value) + 1;
     766:	be 01       	movw	r22, r28
     768:	0d 2e       	mov	r0, r29
     76a:	00 0c       	add	r0, r0
     76c:	88 0b       	sbc	r24, r24
     76e:	99 0b       	sbc	r25, r25
     770:	9c d0       	rcall	.+312    	; 0x8aa <__floatsisf>
     772:	ff d0       	rcall	.+510    	; 0x972 <log10>
     774:	67 d0       	rcall	.+206    	; 0x844 <__fixsfsi>
     776:	6b 01       	movw	r12, r22
     778:	2f ef       	ldi	r18, 0xFF	; 255
     77a:	c2 1a       	sub	r12, r18
     77c:	d2 0a       	sbc	r13, r18
		for (int i = 1; i <= length; i++)
     77e:	1c 14       	cp	r1, r12
     780:	1d 04       	cpc	r1, r13
     782:	0c f0       	brlt	.+2      	; 0x786 <writeLedDisplay+0x52>
     784:	43 c0       	rjmp	.+134    	; 0x80c <writeLedDisplay+0xd8>
     786:	01 e0       	ldi	r16, 0x01	; 1
     788:	10 e0       	ldi	r17, 0x00	; 0
		{
			spi_writeWord(i, value % 10);
     78a:	0f 2e       	mov	r0, r31
     78c:	fa e0       	ldi	r31, 0x0A	; 10
     78e:	af 2e       	mov	r10, r31
     790:	b1 2c       	mov	r11, r1
     792:	f0 2d       	mov	r31, r0
     794:	ce 01       	movw	r24, r28
     796:	b5 01       	movw	r22, r10
     798:	5a d2       	rcall	.+1204   	; 0xc4e <__divmodhi4>
     79a:	e6 2e       	mov	r14, r22
     79c:	f7 2e       	mov	r15, r23
     79e:	68 2f       	mov	r22, r24
     7a0:	80 2f       	mov	r24, r16
     7a2:	af df       	rcall	.-162    	; 0x702 <spi_writeWord>
			value /= 10;
     7a4:	ce 2d       	mov	r28, r14
     7a6:	df 2d       	mov	r29, r15
	value = -999;
	
	if (value >= 0)
	{
		int length = (int) log10(value) + 1;
		for (int i = 1; i <= length; i++)
     7a8:	0f 5f       	subi	r16, 0xFF	; 255
     7aa:	1f 4f       	sbci	r17, 0xFF	; 255
     7ac:	c0 16       	cp	r12, r16
     7ae:	d1 06       	cpc	r13, r17
     7b0:	8c f7       	brge	.-30     	; 0x794 <writeLedDisplay+0x60>
     7b2:	2c c0       	rjmp	.+88     	; 0x80c <writeLedDisplay+0xd8>
			value /= 10;
		}
	}
	else
	{
		value = -value;
     7b4:	d1 95       	neg	r29
     7b6:	c1 95       	neg	r28
     7b8:	d1 09       	sbc	r29, r1
		int length = (int) log10(value) + 1;
     7ba:	be 01       	movw	r22, r28
     7bc:	0d 2e       	mov	r0, r29
     7be:	00 0c       	add	r0, r0
     7c0:	88 0b       	sbc	r24, r24
     7c2:	99 0b       	sbc	r25, r25
     7c4:	72 d0       	rcall	.+228    	; 0x8aa <__floatsisf>
     7c6:	d5 d0       	rcall	.+426    	; 0x972 <log10>
     7c8:	3d d0       	rcall	.+122    	; 0x844 <__fixsfsi>
     7ca:	6b 01       	movw	r12, r22
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	c2 1a       	sub	r12, r18
		spi_writeWord(length + 1, 10);
     7d0:	d2 0a       	sbc	r13, r18
     7d2:	6a e0       	ldi	r22, 0x0A	; 10
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	8c 0d       	add	r24, r12
     7d8:	94 df       	rcall	.-216    	; 0x702 <spi_writeWord>
		for (int i = 1; i <= length; i++)
     7da:	1c 14       	cp	r1, r12
     7dc:	1d 04       	cpc	r1, r13
     7de:	b4 f4       	brge	.+44     	; 0x80c <writeLedDisplay+0xd8>
     7e0:	01 e0       	ldi	r16, 0x01	; 1
		{
			spi_writeWord(i, value % 10);
     7e2:	10 e0       	ldi	r17, 0x00	; 0
     7e4:	0f 2e       	mov	r0, r31
     7e6:	fa e0       	ldi	r31, 0x0A	; 10
     7e8:	af 2e       	mov	r10, r31
     7ea:	b1 2c       	mov	r11, r1
     7ec:	f0 2d       	mov	r31, r0
     7ee:	ce 01       	movw	r24, r28
     7f0:	b5 01       	movw	r22, r10
     7f2:	2d d2       	rcall	.+1114   	; 0xc4e <__divmodhi4>
     7f4:	e6 2e       	mov	r14, r22
     7f6:	f7 2e       	mov	r15, r23
     7f8:	68 2f       	mov	r22, r24
     7fa:	80 2f       	mov	r24, r16
     7fc:	82 df       	rcall	.-252    	; 0x702 <spi_writeWord>
			value /= 10;
     7fe:	ce 2d       	mov	r28, r14
     800:	df 2d       	mov	r29, r15
	else
	{
		value = -value;
		int length = (int) log10(value) + 1;
		spi_writeWord(length + 1, 10);
		for (int i = 1; i <= length; i++)
     802:	0f 5f       	subi	r16, 0xFF	; 255
     804:	1f 4f       	sbci	r17, 0xFF	; 255
     806:	c0 16       	cp	r12, r16
     808:	d1 06       	cpc	r13, r17
     80a:	8c f7       	brge	.-30     	; 0x7ee <writeLedDisplay+0xba>
			spi_writeWord(i, value % 10);
			value /= 10;
		}
	}
	
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	df 90       	pop	r13
     81a:	cf 90       	pop	r12
     81c:	bf 90       	pop	r11
     81e:	af 90       	pop	r10
     820:	08 95       	ret

00000822 <wait>:
 */ 
#include "toolbox.h"

void wait( int ms )
{
	for (int i=0; i<ms; i++)
     822:	18 16       	cp	r1, r24
     824:	19 06       	cpc	r1, r25
     826:	6c f4       	brge	.+26     	; 0x842 <wait+0x20>
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     82c:	ef ec       	ldi	r30, 0xCF	; 207
     82e:	f7 e0       	ldi	r31, 0x07	; 7
     830:	31 97       	sbiw	r30, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <wait+0xe>
     834:	00 c0       	rjmp	.+0      	; 0x836 <wait+0x14>
     836:	00 00       	nop
     838:	2f 5f       	subi	r18, 0xFF	; 255
     83a:	3f 4f       	sbci	r19, 0xFF	; 255
     83c:	82 17       	cp	r24, r18
     83e:	93 07       	cpc	r25, r19
     840:	a9 f7       	brne	.-22     	; 0x82c <wait+0xa>
     842:	08 95       	ret

00000844 <__fixsfsi>:
     844:	04 d0       	rcall	.+8      	; 0x84e <__fixunssfsi>
     846:	68 94       	set
     848:	b1 11       	cpse	r27, r1
     84a:	8d c0       	rjmp	.+282    	; 0x966 <__fp_szero>
     84c:	08 95       	ret

0000084e <__fixunssfsi>:
     84e:	70 d0       	rcall	.+224    	; 0x930 <__fp_splitA>
     850:	88 f0       	brcs	.+34     	; 0x874 <__fixunssfsi+0x26>
     852:	9f 57       	subi	r25, 0x7F	; 127
     854:	90 f0       	brcs	.+36     	; 0x87a <__fixunssfsi+0x2c>
     856:	b9 2f       	mov	r27, r25
     858:	99 27       	eor	r25, r25
     85a:	b7 51       	subi	r27, 0x17	; 23
     85c:	a0 f0       	brcs	.+40     	; 0x886 <__fixunssfsi+0x38>
     85e:	d1 f0       	breq	.+52     	; 0x894 <__fixunssfsi+0x46>
     860:	66 0f       	add	r22, r22
     862:	77 1f       	adc	r23, r23
     864:	88 1f       	adc	r24, r24
     866:	99 1f       	adc	r25, r25
     868:	1a f0       	brmi	.+6      	; 0x870 <__fixunssfsi+0x22>
     86a:	ba 95       	dec	r27
     86c:	c9 f7       	brne	.-14     	; 0x860 <__fixunssfsi+0x12>
     86e:	12 c0       	rjmp	.+36     	; 0x894 <__fixunssfsi+0x46>
     870:	b1 30       	cpi	r27, 0x01	; 1
     872:	81 f0       	breq	.+32     	; 0x894 <__fixunssfsi+0x46>
     874:	77 d0       	rcall	.+238    	; 0x964 <__fp_zero>
     876:	b1 e0       	ldi	r27, 0x01	; 1
     878:	08 95       	ret
     87a:	74 c0       	rjmp	.+232    	; 0x964 <__fp_zero>
     87c:	67 2f       	mov	r22, r23
     87e:	78 2f       	mov	r23, r24
     880:	88 27       	eor	r24, r24
     882:	b8 5f       	subi	r27, 0xF8	; 248
     884:	39 f0       	breq	.+14     	; 0x894 <__fixunssfsi+0x46>
     886:	b9 3f       	cpi	r27, 0xF9	; 249
     888:	cc f3       	brlt	.-14     	; 0x87c <__fixunssfsi+0x2e>
     88a:	86 95       	lsr	r24
     88c:	77 95       	ror	r23
     88e:	67 95       	ror	r22
     890:	b3 95       	inc	r27
     892:	d9 f7       	brne	.-10     	; 0x88a <__fixunssfsi+0x3c>
     894:	3e f4       	brtc	.+14     	; 0x8a4 <__fixunssfsi+0x56>
     896:	90 95       	com	r25
     898:	80 95       	com	r24
     89a:	70 95       	com	r23
     89c:	61 95       	neg	r22
     89e:	7f 4f       	sbci	r23, 0xFF	; 255
     8a0:	8f 4f       	sbci	r24, 0xFF	; 255
     8a2:	9f 4f       	sbci	r25, 0xFF	; 255
     8a4:	08 95       	ret

000008a6 <__floatunsisf>:
     8a6:	e8 94       	clt
     8a8:	09 c0       	rjmp	.+18     	; 0x8bc <__floatsisf+0x12>

000008aa <__floatsisf>:
     8aa:	97 fb       	bst	r25, 7
     8ac:	3e f4       	brtc	.+14     	; 0x8bc <__floatsisf+0x12>
     8ae:	90 95       	com	r25
     8b0:	80 95       	com	r24
     8b2:	70 95       	com	r23
     8b4:	61 95       	neg	r22
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	8f 4f       	sbci	r24, 0xFF	; 255
     8ba:	9f 4f       	sbci	r25, 0xFF	; 255
     8bc:	99 23       	and	r25, r25
     8be:	a9 f0       	breq	.+42     	; 0x8ea <__floatsisf+0x40>
     8c0:	f9 2f       	mov	r31, r25
     8c2:	96 e9       	ldi	r25, 0x96	; 150
     8c4:	bb 27       	eor	r27, r27
     8c6:	93 95       	inc	r25
     8c8:	f6 95       	lsr	r31
     8ca:	87 95       	ror	r24
     8cc:	77 95       	ror	r23
     8ce:	67 95       	ror	r22
     8d0:	b7 95       	ror	r27
     8d2:	f1 11       	cpse	r31, r1
     8d4:	f8 cf       	rjmp	.-16     	; 0x8c6 <__floatsisf+0x1c>
     8d6:	fa f4       	brpl	.+62     	; 0x916 <__floatsisf+0x6c>
     8d8:	bb 0f       	add	r27, r27
     8da:	11 f4       	brne	.+4      	; 0x8e0 <__floatsisf+0x36>
     8dc:	60 ff       	sbrs	r22, 0
     8de:	1b c0       	rjmp	.+54     	; 0x916 <__floatsisf+0x6c>
     8e0:	6f 5f       	subi	r22, 0xFF	; 255
     8e2:	7f 4f       	sbci	r23, 0xFF	; 255
     8e4:	8f 4f       	sbci	r24, 0xFF	; 255
     8e6:	9f 4f       	sbci	r25, 0xFF	; 255
     8e8:	16 c0       	rjmp	.+44     	; 0x916 <__floatsisf+0x6c>
     8ea:	88 23       	and	r24, r24
     8ec:	11 f0       	breq	.+4      	; 0x8f2 <__floatsisf+0x48>
     8ee:	96 e9       	ldi	r25, 0x96	; 150
     8f0:	11 c0       	rjmp	.+34     	; 0x914 <__floatsisf+0x6a>
     8f2:	77 23       	and	r23, r23
     8f4:	21 f0       	breq	.+8      	; 0x8fe <__floatsisf+0x54>
     8f6:	9e e8       	ldi	r25, 0x8E	; 142
     8f8:	87 2f       	mov	r24, r23
     8fa:	76 2f       	mov	r23, r22
     8fc:	05 c0       	rjmp	.+10     	; 0x908 <__floatsisf+0x5e>
     8fe:	66 23       	and	r22, r22
     900:	71 f0       	breq	.+28     	; 0x91e <__floatsisf+0x74>
     902:	96 e8       	ldi	r25, 0x86	; 134
     904:	86 2f       	mov	r24, r22
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	2a f0       	brmi	.+10     	; 0x916 <__floatsisf+0x6c>
     90c:	9a 95       	dec	r25
     90e:	66 0f       	add	r22, r22
     910:	77 1f       	adc	r23, r23
     912:	88 1f       	adc	r24, r24
     914:	da f7       	brpl	.-10     	; 0x90c <__floatsisf+0x62>
     916:	88 0f       	add	r24, r24
     918:	96 95       	lsr	r25
     91a:	87 95       	ror	r24
     91c:	97 f9       	bld	r25, 7
     91e:	08 95       	ret

00000920 <__fp_split3>:
     920:	57 fd       	sbrc	r21, 7
     922:	90 58       	subi	r25, 0x80	; 128
     924:	44 0f       	add	r20, r20
     926:	55 1f       	adc	r21, r21
     928:	59 f0       	breq	.+22     	; 0x940 <__fp_splitA+0x10>
     92a:	5f 3f       	cpi	r21, 0xFF	; 255
     92c:	71 f0       	breq	.+28     	; 0x94a <__fp_splitA+0x1a>
     92e:	47 95       	ror	r20

00000930 <__fp_splitA>:
     930:	88 0f       	add	r24, r24
     932:	97 fb       	bst	r25, 7
     934:	99 1f       	adc	r25, r25
     936:	61 f0       	breq	.+24     	; 0x950 <__fp_splitA+0x20>
     938:	9f 3f       	cpi	r25, 0xFF	; 255
     93a:	79 f0       	breq	.+30     	; 0x95a <__fp_splitA+0x2a>
     93c:	87 95       	ror	r24
     93e:	08 95       	ret
     940:	12 16       	cp	r1, r18
     942:	13 06       	cpc	r1, r19
     944:	14 06       	cpc	r1, r20
     946:	55 1f       	adc	r21, r21
     948:	f2 cf       	rjmp	.-28     	; 0x92e <__fp_split3+0xe>
     94a:	46 95       	lsr	r20
     94c:	f1 df       	rcall	.-30     	; 0x930 <__fp_splitA>
     94e:	08 c0       	rjmp	.+16     	; 0x960 <__fp_splitA+0x30>
     950:	16 16       	cp	r1, r22
     952:	17 06       	cpc	r1, r23
     954:	18 06       	cpc	r1, r24
     956:	99 1f       	adc	r25, r25
     958:	f1 cf       	rjmp	.-30     	; 0x93c <__fp_splitA+0xc>
     95a:	86 95       	lsr	r24
     95c:	71 05       	cpc	r23, r1
     95e:	61 05       	cpc	r22, r1
     960:	08 94       	sec
     962:	08 95       	ret

00000964 <__fp_zero>:
     964:	e8 94       	clt

00000966 <__fp_szero>:
     966:	bb 27       	eor	r27, r27
     968:	66 27       	eor	r22, r22
     96a:	77 27       	eor	r23, r23
     96c:	cb 01       	movw	r24, r22
     96e:	97 f9       	bld	r25, 7
     970:	08 95       	ret

00000972 <log10>:
     972:	0a d0       	rcall	.+20     	; 0x988 <log>
     974:	29 ed       	ldi	r18, 0xD9	; 217
     976:	3b e5       	ldi	r19, 0x5B	; 91
     978:	4e ed       	ldi	r20, 0xDE	; 222
     97a:	5e e3       	ldi	r21, 0x3E	; 62
     97c:	45 c0       	rjmp	.+138    	; 0xa08 <__mulsf3>
     97e:	0e f0       	brts	.+2      	; 0x982 <log10+0x10>
     980:	11 c1       	rjmp	.+546    	; 0xba4 <__fp_mpack>
     982:	1e c1       	rjmp	.+572    	; 0xbc0 <__fp_nan>
     984:	68 94       	set
     986:	08 c1       	rjmp	.+528    	; 0xb98 <__fp_inf>

00000988 <log>:
     988:	d3 df       	rcall	.-90     	; 0x930 <__fp_splitA>
     98a:	c8 f3       	brcs	.-14     	; 0x97e <log10+0xc>
     98c:	99 23       	and	r25, r25
     98e:	d1 f3       	breq	.-12     	; 0x984 <log10+0x12>
     990:	c6 f3       	brts	.-16     	; 0x982 <log10+0x10>
     992:	df 93       	push	r29
     994:	cf 93       	push	r28
     996:	1f 93       	push	r17
     998:	0f 93       	push	r16
     99a:	ff 92       	push	r15
     99c:	c9 2f       	mov	r28, r25
     99e:	dd 27       	eor	r29, r29
     9a0:	88 23       	and	r24, r24
     9a2:	2a f0       	brmi	.+10     	; 0x9ae <log+0x26>
     9a4:	21 97       	sbiw	r28, 0x01	; 1
     9a6:	66 0f       	add	r22, r22
     9a8:	77 1f       	adc	r23, r23
     9aa:	88 1f       	adc	r24, r24
     9ac:	da f7       	brpl	.-10     	; 0x9a4 <log+0x1c>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e8       	ldi	r20, 0x80	; 128
     9b4:	5f eb       	ldi	r21, 0xBF	; 191
     9b6:	9f e3       	ldi	r25, 0x3F	; 63
     9b8:	88 39       	cpi	r24, 0x98	; 152
     9ba:	20 f0       	brcs	.+8      	; 0x9c4 <log+0x3c>
     9bc:	80 3e       	cpi	r24, 0xE0	; 224
     9be:	30 f0       	brcs	.+12     	; 0x9cc <log+0x44>
     9c0:	21 96       	adiw	r28, 0x01	; 1
     9c2:	8f 77       	andi	r24, 0x7F	; 127
     9c4:	85 d0       	rcall	.+266    	; 0xad0 <__addsf3>
     9c6:	ec e8       	ldi	r30, 0x8C	; 140
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	03 c0       	rjmp	.+6      	; 0x9d2 <log+0x4a>
     9cc:	81 d0       	rcall	.+258    	; 0xad0 <__addsf3>
     9ce:	e9 eb       	ldi	r30, 0xB9	; 185
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	f9 d0       	rcall	.+498    	; 0xbc6 <__fp_powser>
     9d4:	8b 01       	movw	r16, r22
     9d6:	be 01       	movw	r22, r28
     9d8:	ec 01       	movw	r28, r24
     9da:	fb 2e       	mov	r15, r27
     9dc:	6f 57       	subi	r22, 0x7F	; 127
     9de:	71 09       	sbc	r23, r1
     9e0:	75 95       	asr	r23
     9e2:	77 1f       	adc	r23, r23
     9e4:	88 0b       	sbc	r24, r24
     9e6:	99 0b       	sbc	r25, r25
     9e8:	60 df       	rcall	.-320    	; 0x8aa <__floatsisf>
     9ea:	28 e1       	ldi	r18, 0x18	; 24
     9ec:	32 e7       	ldi	r19, 0x72	; 114
     9ee:	41 e3       	ldi	r20, 0x31	; 49
     9f0:	5f e3       	ldi	r21, 0x3F	; 63
     9f2:	16 d0       	rcall	.+44     	; 0xa20 <__mulsf3x>
     9f4:	af 2d       	mov	r26, r15
     9f6:	98 01       	movw	r18, r16
     9f8:	ae 01       	movw	r20, r28
     9fa:	ff 90       	pop	r15
     9fc:	0f 91       	pop	r16
     9fe:	1f 91       	pop	r17
     a00:	cf 91       	pop	r28
     a02:	df 91       	pop	r29
     a04:	76 d0       	rcall	.+236    	; 0xaf2 <__addsf3x>
     a06:	12 c1       	rjmp	.+548    	; 0xc2c <__fp_round>

00000a08 <__mulsf3>:
     a08:	0b d0       	rcall	.+22     	; 0xa20 <__mulsf3x>
     a0a:	10 c1       	rjmp	.+544    	; 0xc2c <__fp_round>
     a0c:	01 d1       	rcall	.+514    	; 0xc10 <__fp_pscA>
     a0e:	28 f0       	brcs	.+10     	; 0xa1a <__mulsf3+0x12>
     a10:	06 d1       	rcall	.+524    	; 0xc1e <__fp_pscB>
     a12:	18 f0       	brcs	.+6      	; 0xa1a <__mulsf3+0x12>
     a14:	95 23       	and	r25, r21
     a16:	09 f0       	breq	.+2      	; 0xa1a <__mulsf3+0x12>
     a18:	bf c0       	rjmp	.+382    	; 0xb98 <__fp_inf>
     a1a:	d2 c0       	rjmp	.+420    	; 0xbc0 <__fp_nan>
     a1c:	11 24       	eor	r1, r1
     a1e:	a3 cf       	rjmp	.-186    	; 0x966 <__fp_szero>

00000a20 <__mulsf3x>:
     a20:	7f df       	rcall	.-258    	; 0x920 <__fp_split3>
     a22:	a0 f3       	brcs	.-24     	; 0xa0c <__mulsf3+0x4>

00000a24 <__mulsf3_pse>:
     a24:	95 9f       	mul	r25, r21
     a26:	d1 f3       	breq	.-12     	; 0xa1c <__mulsf3+0x14>
     a28:	95 0f       	add	r25, r21
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	55 1f       	adc	r21, r21
     a2e:	62 9f       	mul	r22, r18
     a30:	f0 01       	movw	r30, r0
     a32:	72 9f       	mul	r23, r18
     a34:	bb 27       	eor	r27, r27
     a36:	f0 0d       	add	r31, r0
     a38:	b1 1d       	adc	r27, r1
     a3a:	63 9f       	mul	r22, r19
     a3c:	aa 27       	eor	r26, r26
     a3e:	f0 0d       	add	r31, r0
     a40:	b1 1d       	adc	r27, r1
     a42:	aa 1f       	adc	r26, r26
     a44:	64 9f       	mul	r22, r20
     a46:	66 27       	eor	r22, r22
     a48:	b0 0d       	add	r27, r0
     a4a:	a1 1d       	adc	r26, r1
     a4c:	66 1f       	adc	r22, r22
     a4e:	82 9f       	mul	r24, r18
     a50:	22 27       	eor	r18, r18
     a52:	b0 0d       	add	r27, r0
     a54:	a1 1d       	adc	r26, r1
     a56:	62 1f       	adc	r22, r18
     a58:	73 9f       	mul	r23, r19
     a5a:	b0 0d       	add	r27, r0
     a5c:	a1 1d       	adc	r26, r1
     a5e:	62 1f       	adc	r22, r18
     a60:	83 9f       	mul	r24, r19
     a62:	a0 0d       	add	r26, r0
     a64:	61 1d       	adc	r22, r1
     a66:	22 1f       	adc	r18, r18
     a68:	74 9f       	mul	r23, r20
     a6a:	33 27       	eor	r19, r19
     a6c:	a0 0d       	add	r26, r0
     a6e:	61 1d       	adc	r22, r1
     a70:	23 1f       	adc	r18, r19
     a72:	84 9f       	mul	r24, r20
     a74:	60 0d       	add	r22, r0
     a76:	21 1d       	adc	r18, r1
     a78:	82 2f       	mov	r24, r18
     a7a:	76 2f       	mov	r23, r22
     a7c:	6a 2f       	mov	r22, r26
     a7e:	11 24       	eor	r1, r1
     a80:	9f 57       	subi	r25, 0x7F	; 127
     a82:	50 40       	sbci	r21, 0x00	; 0
     a84:	8a f0       	brmi	.+34     	; 0xaa8 <__mulsf3_pse+0x84>
     a86:	e1 f0       	breq	.+56     	; 0xac0 <__mulsf3_pse+0x9c>
     a88:	88 23       	and	r24, r24
     a8a:	4a f0       	brmi	.+18     	; 0xa9e <__mulsf3_pse+0x7a>
     a8c:	ee 0f       	add	r30, r30
     a8e:	ff 1f       	adc	r31, r31
     a90:	bb 1f       	adc	r27, r27
     a92:	66 1f       	adc	r22, r22
     a94:	77 1f       	adc	r23, r23
     a96:	88 1f       	adc	r24, r24
     a98:	91 50       	subi	r25, 0x01	; 1
     a9a:	50 40       	sbci	r21, 0x00	; 0
     a9c:	a9 f7       	brne	.-22     	; 0xa88 <__mulsf3_pse+0x64>
     a9e:	9e 3f       	cpi	r25, 0xFE	; 254
     aa0:	51 05       	cpc	r21, r1
     aa2:	70 f0       	brcs	.+28     	; 0xac0 <__mulsf3_pse+0x9c>
     aa4:	79 c0       	rjmp	.+242    	; 0xb98 <__fp_inf>
     aa6:	5f cf       	rjmp	.-322    	; 0x966 <__fp_szero>
     aa8:	5f 3f       	cpi	r21, 0xFF	; 255
     aaa:	ec f3       	brlt	.-6      	; 0xaa6 <__mulsf3_pse+0x82>
     aac:	98 3e       	cpi	r25, 0xE8	; 232
     aae:	dc f3       	brlt	.-10     	; 0xaa6 <__mulsf3_pse+0x82>
     ab0:	86 95       	lsr	r24
     ab2:	77 95       	ror	r23
     ab4:	67 95       	ror	r22
     ab6:	b7 95       	ror	r27
     ab8:	f7 95       	ror	r31
     aba:	e7 95       	ror	r30
     abc:	9f 5f       	subi	r25, 0xFF	; 255
     abe:	c1 f7       	brne	.-16     	; 0xab0 <__mulsf3_pse+0x8c>
     ac0:	fe 2b       	or	r31, r30
     ac2:	88 0f       	add	r24, r24
     ac4:	91 1d       	adc	r25, r1
     ac6:	96 95       	lsr	r25
     ac8:	87 95       	ror	r24
     aca:	97 f9       	bld	r25, 7
     acc:	08 95       	ret

00000ace <__subsf3>:
     ace:	50 58       	subi	r21, 0x80	; 128

00000ad0 <__addsf3>:
     ad0:	bb 27       	eor	r27, r27
     ad2:	aa 27       	eor	r26, r26
     ad4:	0e d0       	rcall	.+28     	; 0xaf2 <__addsf3x>
     ad6:	aa c0       	rjmp	.+340    	; 0xc2c <__fp_round>
     ad8:	9b d0       	rcall	.+310    	; 0xc10 <__fp_pscA>
     ada:	30 f0       	brcs	.+12     	; 0xae8 <__addsf3+0x18>
     adc:	a0 d0       	rcall	.+320    	; 0xc1e <__fp_pscB>
     ade:	20 f0       	brcs	.+8      	; 0xae8 <__addsf3+0x18>
     ae0:	31 f4       	brne	.+12     	; 0xaee <__addsf3+0x1e>
     ae2:	9f 3f       	cpi	r25, 0xFF	; 255
     ae4:	11 f4       	brne	.+4      	; 0xaea <__addsf3+0x1a>
     ae6:	1e f4       	brtc	.+6      	; 0xaee <__addsf3+0x1e>
     ae8:	6b c0       	rjmp	.+214    	; 0xbc0 <__fp_nan>
     aea:	0e f4       	brtc	.+2      	; 0xaee <__addsf3+0x1e>
     aec:	e0 95       	com	r30
     aee:	e7 fb       	bst	r30, 7
     af0:	53 c0       	rjmp	.+166    	; 0xb98 <__fp_inf>

00000af2 <__addsf3x>:
     af2:	e9 2f       	mov	r30, r25
     af4:	15 df       	rcall	.-470    	; 0x920 <__fp_split3>
     af6:	80 f3       	brcs	.-32     	; 0xad8 <__addsf3+0x8>
     af8:	ba 17       	cp	r27, r26
     afa:	62 07       	cpc	r22, r18
     afc:	73 07       	cpc	r23, r19
     afe:	84 07       	cpc	r24, r20
     b00:	95 07       	cpc	r25, r21
     b02:	18 f0       	brcs	.+6      	; 0xb0a <__addsf3x+0x18>
     b04:	71 f4       	brne	.+28     	; 0xb22 <__addsf3x+0x30>
     b06:	9e f5       	brtc	.+102    	; 0xb6e <__addsf3x+0x7c>
     b08:	2d cf       	rjmp	.-422    	; 0x964 <__fp_zero>
     b0a:	0e f4       	brtc	.+2      	; 0xb0e <__addsf3x+0x1c>
     b0c:	e0 95       	com	r30
     b0e:	0b 2e       	mov	r0, r27
     b10:	ba 2f       	mov	r27, r26
     b12:	a0 2d       	mov	r26, r0
     b14:	0b 01       	movw	r0, r22
     b16:	b9 01       	movw	r22, r18
     b18:	90 01       	movw	r18, r0
     b1a:	0c 01       	movw	r0, r24
     b1c:	ca 01       	movw	r24, r20
     b1e:	a0 01       	movw	r20, r0
     b20:	11 24       	eor	r1, r1
     b22:	ff 27       	eor	r31, r31
     b24:	59 1b       	sub	r21, r25
     b26:	99 f0       	breq	.+38     	; 0xb4e <__addsf3x+0x5c>
     b28:	59 3f       	cpi	r21, 0xF9	; 249
     b2a:	50 f4       	brcc	.+20     	; 0xb40 <__addsf3x+0x4e>
     b2c:	50 3e       	cpi	r21, 0xE0	; 224
     b2e:	68 f1       	brcs	.+90     	; 0xb8a <__addsf3x+0x98>
     b30:	1a 16       	cp	r1, r26
     b32:	f0 40       	sbci	r31, 0x00	; 0
     b34:	a2 2f       	mov	r26, r18
     b36:	23 2f       	mov	r18, r19
     b38:	34 2f       	mov	r19, r20
     b3a:	44 27       	eor	r20, r20
     b3c:	58 5f       	subi	r21, 0xF8	; 248
     b3e:	f3 cf       	rjmp	.-26     	; 0xb26 <__addsf3x+0x34>
     b40:	46 95       	lsr	r20
     b42:	37 95       	ror	r19
     b44:	27 95       	ror	r18
     b46:	a7 95       	ror	r26
     b48:	f0 40       	sbci	r31, 0x00	; 0
     b4a:	53 95       	inc	r21
     b4c:	c9 f7       	brne	.-14     	; 0xb40 <__addsf3x+0x4e>
     b4e:	7e f4       	brtc	.+30     	; 0xb6e <__addsf3x+0x7c>
     b50:	1f 16       	cp	r1, r31
     b52:	ba 0b       	sbc	r27, r26
     b54:	62 0b       	sbc	r22, r18
     b56:	73 0b       	sbc	r23, r19
     b58:	84 0b       	sbc	r24, r20
     b5a:	ba f0       	brmi	.+46     	; 0xb8a <__addsf3x+0x98>
     b5c:	91 50       	subi	r25, 0x01	; 1
     b5e:	a1 f0       	breq	.+40     	; 0xb88 <__addsf3x+0x96>
     b60:	ff 0f       	add	r31, r31
     b62:	bb 1f       	adc	r27, r27
     b64:	66 1f       	adc	r22, r22
     b66:	77 1f       	adc	r23, r23
     b68:	88 1f       	adc	r24, r24
     b6a:	c2 f7       	brpl	.-16     	; 0xb5c <__addsf3x+0x6a>
     b6c:	0e c0       	rjmp	.+28     	; 0xb8a <__addsf3x+0x98>
     b6e:	ba 0f       	add	r27, r26
     b70:	62 1f       	adc	r22, r18
     b72:	73 1f       	adc	r23, r19
     b74:	84 1f       	adc	r24, r20
     b76:	48 f4       	brcc	.+18     	; 0xb8a <__addsf3x+0x98>
     b78:	87 95       	ror	r24
     b7a:	77 95       	ror	r23
     b7c:	67 95       	ror	r22
     b7e:	b7 95       	ror	r27
     b80:	f7 95       	ror	r31
     b82:	9e 3f       	cpi	r25, 0xFE	; 254
     b84:	08 f0       	brcs	.+2      	; 0xb88 <__addsf3x+0x96>
     b86:	b3 cf       	rjmp	.-154    	; 0xaee <__addsf3+0x1e>
     b88:	93 95       	inc	r25
     b8a:	88 0f       	add	r24, r24
     b8c:	08 f0       	brcs	.+2      	; 0xb90 <__addsf3x+0x9e>
     b8e:	99 27       	eor	r25, r25
     b90:	ee 0f       	add	r30, r30
     b92:	97 95       	ror	r25
     b94:	87 95       	ror	r24
     b96:	08 95       	ret

00000b98 <__fp_inf>:
     b98:	97 f9       	bld	r25, 7
     b9a:	9f 67       	ori	r25, 0x7F	; 127
     b9c:	80 e8       	ldi	r24, 0x80	; 128
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	08 95       	ret

00000ba4 <__fp_mpack>:
     ba4:	9f 3f       	cpi	r25, 0xFF	; 255
     ba6:	31 f0       	breq	.+12     	; 0xbb4 <__fp_mpack_finite+0xc>

00000ba8 <__fp_mpack_finite>:
     ba8:	91 50       	subi	r25, 0x01	; 1
     baa:	20 f4       	brcc	.+8      	; 0xbb4 <__fp_mpack_finite+0xc>
     bac:	87 95       	ror	r24
     bae:	77 95       	ror	r23
     bb0:	67 95       	ror	r22
     bb2:	b7 95       	ror	r27
     bb4:	88 0f       	add	r24, r24
     bb6:	91 1d       	adc	r25, r1
     bb8:	96 95       	lsr	r25
     bba:	87 95       	ror	r24
     bbc:	97 f9       	bld	r25, 7
     bbe:	08 95       	ret

00000bc0 <__fp_nan>:
     bc0:	9f ef       	ldi	r25, 0xFF	; 255
     bc2:	80 ec       	ldi	r24, 0xC0	; 192
     bc4:	08 95       	ret

00000bc6 <__fp_powser>:
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	1f 93       	push	r17
     bcc:	0f 93       	push	r16
     bce:	ff 92       	push	r15
     bd0:	ef 92       	push	r14
     bd2:	df 92       	push	r13
     bd4:	7b 01       	movw	r14, r22
     bd6:	8c 01       	movw	r16, r24
     bd8:	68 94       	set
     bda:	05 c0       	rjmp	.+10     	; 0xbe6 <__fp_powser+0x20>
     bdc:	da 2e       	mov	r13, r26
     bde:	ef 01       	movw	r28, r30
     be0:	1f df       	rcall	.-450    	; 0xa20 <__mulsf3x>
     be2:	fe 01       	movw	r30, r28
     be4:	e8 94       	clt
     be6:	a5 91       	lpm	r26, Z+
     be8:	25 91       	lpm	r18, Z+
     bea:	35 91       	lpm	r19, Z+
     bec:	45 91       	lpm	r20, Z+
     bee:	55 91       	lpm	r21, Z+
     bf0:	ae f3       	brts	.-22     	; 0xbdc <__fp_powser+0x16>
     bf2:	ef 01       	movw	r28, r30
     bf4:	7e df       	rcall	.-260    	; 0xaf2 <__addsf3x>
     bf6:	fe 01       	movw	r30, r28
     bf8:	97 01       	movw	r18, r14
     bfa:	a8 01       	movw	r20, r16
     bfc:	da 94       	dec	r13
     bfe:	79 f7       	brne	.-34     	; 0xbde <__fp_powser+0x18>
     c00:	df 90       	pop	r13
     c02:	ef 90       	pop	r14
     c04:	ff 90       	pop	r15
     c06:	0f 91       	pop	r16
     c08:	1f 91       	pop	r17
     c0a:	cf 91       	pop	r28
     c0c:	df 91       	pop	r29
     c0e:	08 95       	ret

00000c10 <__fp_pscA>:
     c10:	00 24       	eor	r0, r0
     c12:	0a 94       	dec	r0
     c14:	16 16       	cp	r1, r22
     c16:	17 06       	cpc	r1, r23
     c18:	18 06       	cpc	r1, r24
     c1a:	09 06       	cpc	r0, r25
     c1c:	08 95       	ret

00000c1e <__fp_pscB>:
     c1e:	00 24       	eor	r0, r0
     c20:	0a 94       	dec	r0
     c22:	12 16       	cp	r1, r18
     c24:	13 06       	cpc	r1, r19
     c26:	14 06       	cpc	r1, r20
     c28:	05 06       	cpc	r0, r21
     c2a:	08 95       	ret

00000c2c <__fp_round>:
     c2c:	09 2e       	mov	r0, r25
     c2e:	03 94       	inc	r0
     c30:	00 0c       	add	r0, r0
     c32:	11 f4       	brne	.+4      	; 0xc38 <__fp_round+0xc>
     c34:	88 23       	and	r24, r24
     c36:	52 f0       	brmi	.+20     	; 0xc4c <__fp_round+0x20>
     c38:	bb 0f       	add	r27, r27
     c3a:	40 f4       	brcc	.+16     	; 0xc4c <__fp_round+0x20>
     c3c:	bf 2b       	or	r27, r31
     c3e:	11 f4       	brne	.+4      	; 0xc44 <__fp_round+0x18>
     c40:	60 ff       	sbrs	r22, 0
     c42:	04 c0       	rjmp	.+8      	; 0xc4c <__fp_round+0x20>
     c44:	6f 5f       	subi	r22, 0xFF	; 255
     c46:	7f 4f       	sbci	r23, 0xFF	; 255
     c48:	8f 4f       	sbci	r24, 0xFF	; 255
     c4a:	9f 4f       	sbci	r25, 0xFF	; 255
     c4c:	08 95       	ret

00000c4e <__divmodhi4>:
     c4e:	97 fb       	bst	r25, 7
     c50:	07 2e       	mov	r0, r23
     c52:	16 f4       	brtc	.+4      	; 0xc58 <__divmodhi4+0xa>
     c54:	00 94       	com	r0
     c56:	06 d0       	rcall	.+12     	; 0xc64 <__divmodhi4_neg1>
     c58:	77 fd       	sbrc	r23, 7
     c5a:	08 d0       	rcall	.+16     	; 0xc6c <__divmodhi4_neg2>
     c5c:	0b d0       	rcall	.+22     	; 0xc74 <__udivmodhi4>
     c5e:	07 fc       	sbrc	r0, 7
     c60:	05 d0       	rcall	.+10     	; 0xc6c <__divmodhi4_neg2>
     c62:	3e f4       	brtc	.+14     	; 0xc72 <__divmodhi4_exit>

00000c64 <__divmodhi4_neg1>:
     c64:	90 95       	com	r25
     c66:	81 95       	neg	r24
     c68:	9f 4f       	sbci	r25, 0xFF	; 255
     c6a:	08 95       	ret

00000c6c <__divmodhi4_neg2>:
     c6c:	70 95       	com	r23
     c6e:	61 95       	neg	r22
     c70:	7f 4f       	sbci	r23, 0xFF	; 255

00000c72 <__divmodhi4_exit>:
     c72:	08 95       	ret

00000c74 <__udivmodhi4>:
     c74:	aa 1b       	sub	r26, r26
     c76:	bb 1b       	sub	r27, r27
     c78:	51 e1       	ldi	r21, 0x11	; 17
     c7a:	07 c0       	rjmp	.+14     	; 0xc8a <__udivmodhi4_ep>

00000c7c <__udivmodhi4_loop>:
     c7c:	aa 1f       	adc	r26, r26
     c7e:	bb 1f       	adc	r27, r27
     c80:	a6 17       	cp	r26, r22
     c82:	b7 07       	cpc	r27, r23
     c84:	10 f0       	brcs	.+4      	; 0xc8a <__udivmodhi4_ep>
     c86:	a6 1b       	sub	r26, r22
     c88:	b7 0b       	sbc	r27, r23

00000c8a <__udivmodhi4_ep>:
     c8a:	88 1f       	adc	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	5a 95       	dec	r21
     c90:	a9 f7       	brne	.-22     	; 0xc7c <__udivmodhi4_loop>
     c92:	80 95       	com	r24
     c94:	90 95       	com	r25
     c96:	bc 01       	movw	r22, r24
     c98:	cd 01       	movw	r24, r26
     c9a:	08 95       	ret

00000c9c <malloc>:
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	82 30       	cpi	r24, 0x02	; 2
     ca6:	91 05       	cpc	r25, r1
     ca8:	10 f4       	brcc	.+4      	; 0xcae <malloc+0x12>
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <__flp>
     cb2:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <__flp+0x1>
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	a0 e0       	ldi	r26, 0x00	; 0
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	30 97       	sbiw	r30, 0x00	; 0
     cc0:	19 f1       	breq	.+70     	; 0xd08 <malloc+0x6c>
     cc2:	40 81       	ld	r20, Z
     cc4:	51 81       	ldd	r21, Z+1	; 0x01
     cc6:	02 81       	ldd	r16, Z+2	; 0x02
     cc8:	13 81       	ldd	r17, Z+3	; 0x03
     cca:	48 17       	cp	r20, r24
     ccc:	59 07       	cpc	r21, r25
     cce:	c8 f0       	brcs	.+50     	; 0xd02 <malloc+0x66>
     cd0:	84 17       	cp	r24, r20
     cd2:	95 07       	cpc	r25, r21
     cd4:	69 f4       	brne	.+26     	; 0xcf0 <malloc+0x54>
     cd6:	10 97       	sbiw	r26, 0x00	; 0
     cd8:	31 f0       	breq	.+12     	; 0xce6 <malloc+0x4a>
     cda:	12 96       	adiw	r26, 0x02	; 2
     cdc:	0c 93       	st	X, r16
     cde:	12 97       	sbiw	r26, 0x02	; 2
     ce0:	13 96       	adiw	r26, 0x03	; 3
     ce2:	1c 93       	st	X, r17
     ce4:	27 c0       	rjmp	.+78     	; 0xd34 <malloc+0x98>
     ce6:	00 93 1f 01 	sts	0x011F, r16	; 0x80011f <__flp>
     cea:	10 93 20 01 	sts	0x0120, r17	; 0x800120 <__flp+0x1>
     cee:	22 c0       	rjmp	.+68     	; 0xd34 <malloc+0x98>
     cf0:	21 15       	cp	r18, r1
     cf2:	31 05       	cpc	r19, r1
     cf4:	19 f0       	breq	.+6      	; 0xcfc <malloc+0x60>
     cf6:	42 17       	cp	r20, r18
     cf8:	53 07       	cpc	r21, r19
     cfa:	18 f4       	brcc	.+6      	; 0xd02 <malloc+0x66>
     cfc:	9a 01       	movw	r18, r20
     cfe:	bd 01       	movw	r22, r26
     d00:	ef 01       	movw	r28, r30
     d02:	df 01       	movw	r26, r30
     d04:	f8 01       	movw	r30, r16
     d06:	db cf       	rjmp	.-74     	; 0xcbe <malloc+0x22>
     d08:	21 15       	cp	r18, r1
     d0a:	31 05       	cpc	r19, r1
     d0c:	f9 f0       	breq	.+62     	; 0xd4c <malloc+0xb0>
     d0e:	28 1b       	sub	r18, r24
     d10:	39 0b       	sbc	r19, r25
     d12:	24 30       	cpi	r18, 0x04	; 4
     d14:	31 05       	cpc	r19, r1
     d16:	80 f4       	brcc	.+32     	; 0xd38 <malloc+0x9c>
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	9b 81       	ldd	r25, Y+3	; 0x03
     d1c:	61 15       	cp	r22, r1
     d1e:	71 05       	cpc	r23, r1
     d20:	21 f0       	breq	.+8      	; 0xd2a <malloc+0x8e>
     d22:	fb 01       	movw	r30, r22
     d24:	93 83       	std	Z+3, r25	; 0x03
     d26:	82 83       	std	Z+2, r24	; 0x02
     d28:	04 c0       	rjmp	.+8      	; 0xd32 <malloc+0x96>
     d2a:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <__flp+0x1>
     d2e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <__flp>
     d32:	fe 01       	movw	r30, r28
     d34:	32 96       	adiw	r30, 0x02	; 2
     d36:	44 c0       	rjmp	.+136    	; 0xdc0 <malloc+0x124>
     d38:	fe 01       	movw	r30, r28
     d3a:	e2 0f       	add	r30, r18
     d3c:	f3 1f       	adc	r31, r19
     d3e:	81 93       	st	Z+, r24
     d40:	91 93       	st	Z+, r25
     d42:	22 50       	subi	r18, 0x02	; 2
     d44:	31 09       	sbc	r19, r1
     d46:	39 83       	std	Y+1, r19	; 0x01
     d48:	28 83       	st	Y, r18
     d4a:	3a c0       	rjmp	.+116    	; 0xdc0 <malloc+0x124>
     d4c:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <__brkval>
     d50:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <__brkval+0x1>
     d54:	23 2b       	or	r18, r19
     d56:	41 f4       	brne	.+16     	; 0xd68 <malloc+0xcc>
     d58:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     d5c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     d60:	30 93 1e 01 	sts	0x011E, r19	; 0x80011e <__brkval+0x1>
     d64:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <__brkval>
     d68:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     d6c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     d70:	21 15       	cp	r18, r1
     d72:	31 05       	cpc	r19, r1
     d74:	41 f4       	brne	.+16     	; 0xd86 <malloc+0xea>
     d76:	2d b7       	in	r18, 0x3d	; 61
     d78:	3e b7       	in	r19, 0x3e	; 62
     d7a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     d7e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     d82:	24 1b       	sub	r18, r20
     d84:	35 0b       	sbc	r19, r21
     d86:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <__brkval>
     d8a:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <__brkval+0x1>
     d8e:	e2 17       	cp	r30, r18
     d90:	f3 07       	cpc	r31, r19
     d92:	a0 f4       	brcc	.+40     	; 0xdbc <malloc+0x120>
     d94:	2e 1b       	sub	r18, r30
     d96:	3f 0b       	sbc	r19, r31
     d98:	28 17       	cp	r18, r24
     d9a:	39 07       	cpc	r19, r25
     d9c:	78 f0       	brcs	.+30     	; 0xdbc <malloc+0x120>
     d9e:	ac 01       	movw	r20, r24
     da0:	4e 5f       	subi	r20, 0xFE	; 254
     da2:	5f 4f       	sbci	r21, 0xFF	; 255
     da4:	24 17       	cp	r18, r20
     da6:	35 07       	cpc	r19, r21
     da8:	48 f0       	brcs	.+18     	; 0xdbc <malloc+0x120>
     daa:	4e 0f       	add	r20, r30
     dac:	5f 1f       	adc	r21, r31
     dae:	50 93 1e 01 	sts	0x011E, r21	; 0x80011e <__brkval+0x1>
     db2:	40 93 1d 01 	sts	0x011D, r20	; 0x80011d <__brkval>
     db6:	81 93       	st	Z+, r24
     db8:	91 93       	st	Z+, r25
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <malloc+0x124>
     dbc:	e0 e0       	ldi	r30, 0x00	; 0
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	cf 01       	movw	r24, r30
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	1f 91       	pop	r17
     dc8:	0f 91       	pop	r16
     dca:	08 95       	ret

00000dcc <free>:
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <free+0xa>
     dd4:	81 c0       	rjmp	.+258    	; 0xed8 <free+0x10c>
     dd6:	fc 01       	movw	r30, r24
     dd8:	32 97       	sbiw	r30, 0x02	; 2
     dda:	13 82       	std	Z+3, r1	; 0x03
     ddc:	12 82       	std	Z+2, r1	; 0x02
     dde:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <__flp>
     de2:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <__flp+0x1>
     de6:	10 97       	sbiw	r26, 0x00	; 0
     de8:	81 f4       	brne	.+32     	; 0xe0a <free+0x3e>
     dea:	20 81       	ld	r18, Z
     dec:	31 81       	ldd	r19, Z+1	; 0x01
     dee:	82 0f       	add	r24, r18
     df0:	93 1f       	adc	r25, r19
     df2:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <__brkval>
     df6:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <__brkval+0x1>
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	51 f5       	brne	.+84     	; 0xe54 <free+0x88>
     e00:	f0 93 1e 01 	sts	0x011E, r31	; 0x80011e <__brkval+0x1>
     e04:	e0 93 1d 01 	sts	0x011D, r30	; 0x80011d <__brkval>
     e08:	67 c0       	rjmp	.+206    	; 0xed8 <free+0x10c>
     e0a:	ed 01       	movw	r28, r26
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	ce 17       	cp	r28, r30
     e12:	df 07       	cpc	r29, r31
     e14:	40 f4       	brcc	.+16     	; 0xe26 <free+0x5a>
     e16:	4a 81       	ldd	r20, Y+2	; 0x02
     e18:	5b 81       	ldd	r21, Y+3	; 0x03
     e1a:	9e 01       	movw	r18, r28
     e1c:	41 15       	cp	r20, r1
     e1e:	51 05       	cpc	r21, r1
     e20:	f1 f0       	breq	.+60     	; 0xe5e <free+0x92>
     e22:	ea 01       	movw	r28, r20
     e24:	f5 cf       	rjmp	.-22     	; 0xe10 <free+0x44>
     e26:	d3 83       	std	Z+3, r29	; 0x03
     e28:	c2 83       	std	Z+2, r28	; 0x02
     e2a:	40 81       	ld	r20, Z
     e2c:	51 81       	ldd	r21, Z+1	; 0x01
     e2e:	84 0f       	add	r24, r20
     e30:	95 1f       	adc	r25, r21
     e32:	c8 17       	cp	r28, r24
     e34:	d9 07       	cpc	r29, r25
     e36:	59 f4       	brne	.+22     	; 0xe4e <free+0x82>
     e38:	88 81       	ld	r24, Y
     e3a:	99 81       	ldd	r25, Y+1	; 0x01
     e3c:	84 0f       	add	r24, r20
     e3e:	95 1f       	adc	r25, r21
     e40:	02 96       	adiw	r24, 0x02	; 2
     e42:	91 83       	std	Z+1, r25	; 0x01
     e44:	80 83       	st	Z, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	9b 81       	ldd	r25, Y+3	; 0x03
     e4a:	93 83       	std	Z+3, r25	; 0x03
     e4c:	82 83       	std	Z+2, r24	; 0x02
     e4e:	21 15       	cp	r18, r1
     e50:	31 05       	cpc	r19, r1
     e52:	29 f4       	brne	.+10     	; 0xe5e <free+0x92>
     e54:	f0 93 20 01 	sts	0x0120, r31	; 0x800120 <__flp+0x1>
     e58:	e0 93 1f 01 	sts	0x011F, r30	; 0x80011f <__flp>
     e5c:	3d c0       	rjmp	.+122    	; 0xed8 <free+0x10c>
     e5e:	e9 01       	movw	r28, r18
     e60:	fb 83       	std	Y+3, r31	; 0x03
     e62:	ea 83       	std	Y+2, r30	; 0x02
     e64:	49 91       	ld	r20, Y+
     e66:	59 91       	ld	r21, Y+
     e68:	c4 0f       	add	r28, r20
     e6a:	d5 1f       	adc	r29, r21
     e6c:	ec 17       	cp	r30, r28
     e6e:	fd 07       	cpc	r31, r29
     e70:	61 f4       	brne	.+24     	; 0xe8a <free+0xbe>
     e72:	80 81       	ld	r24, Z
     e74:	91 81       	ldd	r25, Z+1	; 0x01
     e76:	84 0f       	add	r24, r20
     e78:	95 1f       	adc	r25, r21
     e7a:	02 96       	adiw	r24, 0x02	; 2
     e7c:	e9 01       	movw	r28, r18
     e7e:	99 83       	std	Y+1, r25	; 0x01
     e80:	88 83       	st	Y, r24
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	9b 83       	std	Y+3, r25	; 0x03
     e88:	8a 83       	std	Y+2, r24	; 0x02
     e8a:	e0 e0       	ldi	r30, 0x00	; 0
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	12 96       	adiw	r26, 0x02	; 2
     e90:	8d 91       	ld	r24, X+
     e92:	9c 91       	ld	r25, X
     e94:	13 97       	sbiw	r26, 0x03	; 3
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	19 f0       	breq	.+6      	; 0xea0 <free+0xd4>
     e9a:	fd 01       	movw	r30, r26
     e9c:	dc 01       	movw	r26, r24
     e9e:	f7 cf       	rjmp	.-18     	; 0xe8e <free+0xc2>
     ea0:	8d 91       	ld	r24, X+
     ea2:	9c 91       	ld	r25, X
     ea4:	11 97       	sbiw	r26, 0x01	; 1
     ea6:	9d 01       	movw	r18, r26
     ea8:	2e 5f       	subi	r18, 0xFE	; 254
     eaa:	3f 4f       	sbci	r19, 0xFF	; 255
     eac:	82 0f       	add	r24, r18
     eae:	93 1f       	adc	r25, r19
     eb0:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <__brkval>
     eb4:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <__brkval+0x1>
     eb8:	28 17       	cp	r18, r24
     eba:	39 07       	cpc	r19, r25
     ebc:	69 f4       	brne	.+26     	; 0xed8 <free+0x10c>
     ebe:	30 97       	sbiw	r30, 0x00	; 0
     ec0:	29 f4       	brne	.+10     	; 0xecc <free+0x100>
     ec2:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__flp+0x1>
     ec6:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <__flp>
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <free+0x104>
     ecc:	13 82       	std	Z+3, r1	; 0x03
     ece:	12 82       	std	Z+2, r1	; 0x02
     ed0:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <__brkval+0x1>
     ed4:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <__brkval>
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret

00000ede <do_rand>:
     ede:	8f 92       	push	r8
     ee0:	9f 92       	push	r9
     ee2:	af 92       	push	r10
     ee4:	bf 92       	push	r11
     ee6:	cf 92       	push	r12
     ee8:	df 92       	push	r13
     eea:	ef 92       	push	r14
     eec:	ff 92       	push	r15
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	ec 01       	movw	r28, r24
     ef4:	68 81       	ld	r22, Y
     ef6:	79 81       	ldd	r23, Y+1	; 0x01
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	9b 81       	ldd	r25, Y+3	; 0x03
     efc:	61 15       	cp	r22, r1
     efe:	71 05       	cpc	r23, r1
     f00:	81 05       	cpc	r24, r1
     f02:	91 05       	cpc	r25, r1
     f04:	21 f4       	brne	.+8      	; 0xf0e <do_rand+0x30>
     f06:	64 e2       	ldi	r22, 0x24	; 36
     f08:	79 ed       	ldi	r23, 0xD9	; 217
     f0a:	8b e5       	ldi	r24, 0x5B	; 91
     f0c:	97 e0       	ldi	r25, 0x07	; 7
     f0e:	2d e1       	ldi	r18, 0x1D	; 29
     f10:	33 ef       	ldi	r19, 0xF3	; 243
     f12:	41 e0       	ldi	r20, 0x01	; 1
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	41 d0       	rcall	.+130    	; 0xf9a <__divmodsi4>
     f18:	49 01       	movw	r8, r18
     f1a:	5a 01       	movw	r10, r20
     f1c:	9b 01       	movw	r18, r22
     f1e:	ac 01       	movw	r20, r24
     f20:	a7 ea       	ldi	r26, 0xA7	; 167
     f22:	b1 e4       	ldi	r27, 0x41	; 65
     f24:	56 d0       	rcall	.+172    	; 0xfd2 <__muluhisi3>
     f26:	6b 01       	movw	r12, r22
     f28:	7c 01       	movw	r14, r24
     f2a:	ac ee       	ldi	r26, 0xEC	; 236
     f2c:	b4 ef       	ldi	r27, 0xF4	; 244
     f2e:	a5 01       	movw	r20, r10
     f30:	94 01       	movw	r18, r8
     f32:	5b d0       	rcall	.+182    	; 0xfea <__mulohisi3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	8c 0d       	add	r24, r12
     f3a:	9d 1d       	adc	r25, r13
     f3c:	ae 1d       	adc	r26, r14
     f3e:	bf 1d       	adc	r27, r15
     f40:	b7 ff       	sbrs	r27, 7
     f42:	03 c0       	rjmp	.+6      	; 0xf4a <do_rand+0x6c>
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	a1 09       	sbc	r26, r1
     f48:	b0 48       	sbci	r27, 0x80	; 128
     f4a:	88 83       	st	Y, r24
     f4c:	99 83       	std	Y+1, r25	; 0x01
     f4e:	aa 83       	std	Y+2, r26	; 0x02
     f50:	bb 83       	std	Y+3, r27	; 0x03
     f52:	9f 77       	andi	r25, 0x7F	; 127
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	ff 90       	pop	r15
     f5a:	ef 90       	pop	r14
     f5c:	df 90       	pop	r13
     f5e:	cf 90       	pop	r12
     f60:	bf 90       	pop	r11
     f62:	af 90       	pop	r10
     f64:	9f 90       	pop	r9
     f66:	8f 90       	pop	r8
     f68:	08 95       	ret

00000f6a <rand_r>:
     f6a:	b9 cf       	rjmp	.-142    	; 0xede <do_rand>

00000f6c <rand>:
     f6c:	86 e0       	ldi	r24, 0x06	; 6
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	b6 cf       	rjmp	.-148    	; 0xede <do_rand>

00000f72 <srand>:
     f72:	a0 e0       	ldi	r26, 0x00	; 0
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
     f7a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
     f7e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
     f82:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
     f86:	08 95       	ret

00000f88 <memcpy>:
     f88:	fb 01       	movw	r30, r22
     f8a:	dc 01       	movw	r26, r24
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <memcpy+0xa>
     f8e:	01 90       	ld	r0, Z+
     f90:	0d 92       	st	X+, r0
     f92:	41 50       	subi	r20, 0x01	; 1
     f94:	50 40       	sbci	r21, 0x00	; 0
     f96:	d8 f7       	brcc	.-10     	; 0xf8e <memcpy+0x6>
     f98:	08 95       	ret

00000f9a <__divmodsi4>:
     f9a:	05 2e       	mov	r0, r21
     f9c:	97 fb       	bst	r25, 7
     f9e:	16 f4       	brtc	.+4      	; 0xfa4 <__divmodsi4+0xa>
     fa0:	00 94       	com	r0
     fa2:	0f d0       	rcall	.+30     	; 0xfc2 <__negsi2>
     fa4:	57 fd       	sbrc	r21, 7
     fa6:	05 d0       	rcall	.+10     	; 0xfb2 <__divmodsi4_neg2>
     fa8:	24 d0       	rcall	.+72     	; 0xff2 <__udivmodsi4>
     faa:	07 fc       	sbrc	r0, 7
     fac:	02 d0       	rcall	.+4      	; 0xfb2 <__divmodsi4_neg2>
     fae:	46 f4       	brtc	.+16     	; 0xfc0 <__divmodsi4_exit>
     fb0:	08 c0       	rjmp	.+16     	; 0xfc2 <__negsi2>

00000fb2 <__divmodsi4_neg2>:
     fb2:	50 95       	com	r21
     fb4:	40 95       	com	r20
     fb6:	30 95       	com	r19
     fb8:	21 95       	neg	r18
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	4f 4f       	sbci	r20, 0xFF	; 255
     fbe:	5f 4f       	sbci	r21, 0xFF	; 255

00000fc0 <__divmodsi4_exit>:
     fc0:	08 95       	ret

00000fc2 <__negsi2>:
     fc2:	90 95       	com	r25
     fc4:	80 95       	com	r24
     fc6:	70 95       	com	r23
     fc8:	61 95       	neg	r22
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	8f 4f       	sbci	r24, 0xFF	; 255
     fce:	9f 4f       	sbci	r25, 0xFF	; 255
     fd0:	08 95       	ret

00000fd2 <__muluhisi3>:
     fd2:	31 d0       	rcall	.+98     	; 0x1036 <__umulhisi3>
     fd4:	a5 9f       	mul	r26, r21
     fd6:	90 0d       	add	r25, r0
     fd8:	b4 9f       	mul	r27, r20
     fda:	90 0d       	add	r25, r0
     fdc:	a4 9f       	mul	r26, r20
     fde:	80 0d       	add	r24, r0
     fe0:	91 1d       	adc	r25, r1
     fe2:	11 24       	eor	r1, r1
     fe4:	08 95       	ret

00000fe6 <__mulshisi3>:
     fe6:	b7 ff       	sbrs	r27, 7
     fe8:	f4 cf       	rjmp	.-24     	; 0xfd2 <__muluhisi3>

00000fea <__mulohisi3>:
     fea:	f3 df       	rcall	.-26     	; 0xfd2 <__muluhisi3>
     fec:	82 1b       	sub	r24, r18
     fee:	93 0b       	sbc	r25, r19
     ff0:	08 95       	ret

00000ff2 <__udivmodsi4>:
     ff2:	a1 e2       	ldi	r26, 0x21	; 33
     ff4:	1a 2e       	mov	r1, r26
     ff6:	aa 1b       	sub	r26, r26
     ff8:	bb 1b       	sub	r27, r27
     ffa:	fd 01       	movw	r30, r26
     ffc:	0d c0       	rjmp	.+26     	; 0x1018 <__udivmodsi4_ep>

00000ffe <__udivmodsi4_loop>:
     ffe:	aa 1f       	adc	r26, r26
    1000:	bb 1f       	adc	r27, r27
    1002:	ee 1f       	adc	r30, r30
    1004:	ff 1f       	adc	r31, r31
    1006:	a2 17       	cp	r26, r18
    1008:	b3 07       	cpc	r27, r19
    100a:	e4 07       	cpc	r30, r20
    100c:	f5 07       	cpc	r31, r21
    100e:	20 f0       	brcs	.+8      	; 0x1018 <__udivmodsi4_ep>
    1010:	a2 1b       	sub	r26, r18
    1012:	b3 0b       	sbc	r27, r19
    1014:	e4 0b       	sbc	r30, r20
    1016:	f5 0b       	sbc	r31, r21

00001018 <__udivmodsi4_ep>:
    1018:	66 1f       	adc	r22, r22
    101a:	77 1f       	adc	r23, r23
    101c:	88 1f       	adc	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	1a 94       	dec	r1
    1022:	69 f7       	brne	.-38     	; 0xffe <__udivmodsi4_loop>
    1024:	60 95       	com	r22
    1026:	70 95       	com	r23
    1028:	80 95       	com	r24
    102a:	90 95       	com	r25
    102c:	9b 01       	movw	r18, r22
    102e:	ac 01       	movw	r20, r24
    1030:	bd 01       	movw	r22, r26
    1032:	cf 01       	movw	r24, r30
    1034:	08 95       	ret

00001036 <__umulhisi3>:
    1036:	a2 9f       	mul	r26, r18
    1038:	b0 01       	movw	r22, r0
    103a:	b3 9f       	mul	r27, r19
    103c:	c0 01       	movw	r24, r0
    103e:	a3 9f       	mul	r26, r19
    1040:	70 0d       	add	r23, r0
    1042:	81 1d       	adc	r24, r1
    1044:	11 24       	eor	r1, r1
    1046:	91 1d       	adc	r25, r1
    1048:	b2 9f       	mul	r27, r18
    104a:	70 0d       	add	r23, r0
    104c:	81 1d       	adc	r24, r1
    104e:	11 24       	eor	r1, r1
    1050:	91 1d       	adc	r25, r1
    1052:	08 95       	ret

00001054 <_exit>:
    1054:	f8 94       	cli

00001056 <__stop_program>:
    1056:	ff cf       	rjmp	.-2      	; 0x1056 <__stop_program>
