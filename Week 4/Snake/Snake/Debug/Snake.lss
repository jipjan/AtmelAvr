
Snake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  0000026a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e5e  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f0  00000000  00000000  00001202  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005cd  00000000  00000000  00001bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000021c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ec  00000000  00000000  00002324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023c  00000000  00000000  00002810  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002a4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a8 30       	cpi	r26, 0x08	; 8
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	82 d0       	rcall	.+260    	; 0x1ae <main>
  aa:	a3 c0       	rjmp	.+326    	; 0x1f2 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <displaySetPixel>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
  ae:	e6 2f       	mov	r30, r22
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	e0 50       	subi	r30, 0x00	; 0
  b4:	ff 4f       	sbci	r31, 0xFF	; 255
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <displaySetPixel+0x12>
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	8a 95       	dec	r24
  c2:	e2 f7       	brpl	.-8      	; 0xbc <displaySetPixel+0xe>
  c4:	80 81       	ld	r24, Z
  c6:	28 2b       	or	r18, r24
  c8:	20 83       	st	Z, r18
  ca:	08 95       	ret

000000cc <displayClrPixel>:
  cc:	e6 2f       	mov	r30, r22
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	e0 50       	subi	r30, 0x00	; 0
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	10 82       	st	Z, r1
  d6:	08 95       	ret

000000d8 <displayClr>:
  d8:	e0 e0       	ldi	r30, 0x00	; 0
  da:	f1 e0       	ldi	r31, 0x01	; 1
  dc:	87 e0       	ldi	r24, 0x07	; 7
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	11 92       	st	Z+, r1
  e2:	e8 17       	cp	r30, r24
  e4:	f9 07       	cpc	r31, r25
  e6:	e1 f7       	brne	.-8      	; 0xe0 <displayClr+0x8>
  e8:	08 95       	ret

000000ea <twi_init>:
  ea:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  ee:	80 e2       	ldi	r24, 0x20	; 32
  f0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  f4:	08 95       	ret

000000f6 <twi_start>:
  f6:	84 ea       	ldi	r24, 0xA4	; 164
  f8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  fc:	e4 e7       	ldi	r30, 0x74	; 116
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	88 23       	and	r24, r24
 104:	ec f7       	brge	.-6      	; 0x100 <twi_start+0xa>
 106:	08 95       	ret

00000108 <twi_tx>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
 108:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 10c:	84 e8       	ldi	r24, 0x84	; 132
 10e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 112:	e4 e7       	ldi	r30, 0x74	; 116
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	88 23       	and	r24, r24
 11a:	ec f7       	brge	.-6      	; 0x116 <twi_tx+0xe>
}
 11c:	08 95       	ret

0000011e <displayInitHT16K33>:
inputs:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	08 2f       	mov	r16, r24
	// System setup page 30 ht16k33 datasheet
	twi_start();
 128:	e6 df       	rcall	.-52     	; 0xf6 <twi_start>
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
 12a:	80 2f       	mov	r24, r16
 12c:	ed df       	rcall	.-38     	; 0x108 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 12e:	81 e2       	ldi	r24, 0x21	; 33
 130:	eb df       	rcall	.-42     	; 0x108 <twi_tx>
 132:	c4 e7       	ldi	r28, 0x74	; 116
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 134:	d0 e0       	ldi	r29, 0x00	; 0
 136:	14 e9       	ldi	r17, 0x94	; 148
 138:	18 83       	st	Y, r17
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();
		
	// ROW/INT set. Page 31 ht16k33 datasheet
	twi_start();
 13a:	dd df       	rcall	.-70     	; 0xf6 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 13c:	80 2f       	mov	r24, r16
 13e:	e4 df       	rcall	.-56     	; 0x108 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output (default)
 140:	80 ea       	ldi	r24, 0xA0	; 160
 142:	e2 df       	rcall	.-60     	; 0x108 <twi_tx>
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 144:	18 83       	st	Y, r17
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output (default)
	twi_stop();

	// Dimming set
	twi_start();
 146:	d7 df       	rcall	.-82     	; 0xf6 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 148:	80 2f       	mov	r24, r16
 14a:	de df       	rcall	.-68     	; 0x108 <twi_tx>
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
 14c:	81 ee       	ldi	r24, 0xE1	; 225
 14e:	dc df       	rcall	.-72     	; 0x108 <twi_tx>
 150:	18 83       	st	Y, r17
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 152:	d1 df       	rcall	.-94     	; 0xf6 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
	twi_stop();

	// Display set
	twi_start();
 154:	80 2f       	mov	r24, r16
 156:	d8 df       	rcall	.-80     	; 0x108 <twi_tx>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 158:	81 e8       	ldi	r24, 0x81	; 129
 15a:	d6 df       	rcall	.-84     	; 0x108 <twi_tx>
 15c:	18 83       	st	Y, r17
	twi_tx(0x81);			// Display ON, Blinking OFF
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 164:	0f 91       	pop	r16
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
	*/
}
 166:	08 95       	ret

00000168 <displayInit>:
 168:	c0 df       	rcall	.-128    	; 0xea <twi_init>
 16a:	88 ee       	ldi	r24, 0xE8	; 232
 16c:	d8 cf       	rjmp	.-80     	; 0x11e <displayInitHT16K33>
 16e:	08 95       	ret

00000170 <display>:
inputs:
outputs:
notes:		Let op de 'vreemde' shift, foutje in printplaat?
Version:	DMK, Initial code
*******************************************************************/
{
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
	// Second display
	twi_start();
 178:	be df       	rcall	.-132    	; 0xf6 <twi_start>
	twi_tx(D0_I2C_ADDR);
 17a:	88 ee       	ldi	r24, 0xE8	; 232
 17c:	c5 df       	rcall	.-118    	; 0x108 <twi_tx>
	twi_tx(0x00);
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	c3 df       	rcall	.-122    	; 0x108 <twi_tx>
 182:	c8 e0       	ldi	r28, 0x08	; 8
 184:	d1 e0       	ldi	r29, 0x01	; 1
 186:	00 e0       	ldi	r16, 0x00	; 0
 188:	11 e0       	ldi	r17, 0x01	; 1
 18a:	8a 91       	ld	r24, -Y
	for( uint8_t idx = 0; idx < 8; idx++ ) {
		uint8_t a = buf[7 + 0 * 8 - idx];
 18c:	80 fb       	bst	r24, 0
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
 18e:	87 95       	ror	r24
 190:	87 f9       	bld	r24, 7
 192:	ba df       	rcall	.-140    	; 0x108 <twi_tx>
		twi_tx( 0x00);
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	b8 df       	rcall	.-144    	; 0x108 <twi_tx>
 198:	c0 17       	cp	r28, r16
{
	// Second display
	twi_start();
	twi_tx(D0_I2C_ADDR);
	twi_tx(0x00);
	for( uint8_t idx = 0; idx < 8; idx++ ) {
 19a:	d1 07       	cpc	r29, r17
 19c:	b1 f7       	brne	.-20     	; 0x18a <display+0x1a>
 19e:	84 e9       	ldi	r24, 0x94	; 148
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 1a0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1a4:	df 91       	pop	r29
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
}
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	08 95       	ret

000001ae <main>:
#include <avr/pgmspace.h>
#include "display.h"

int main( void )
{
	displayInit();	
 1ae:	dc df       	rcall	.-72     	; 0x168 <displayInit>
	displayClr();
 1b0:	93 df       	rcall	.-218    	; 0xd8 <displayClr>
	display();
 1b2:	de df       	rcall	.-68     	; 0x170 <display>
	displaySetPixel(5, 3);
 1b4:	63 e0       	ldi	r22, 0x03	; 3
 1b6:	85 e0       	ldi	r24, 0x05	; 5
 1b8:	7a df       	rcall	.-268    	; 0xae <displaySetPixel>
	display();
 1ba:	da df       	rcall	.-76     	; 0x170 <display>
 1bc:	84 ef       	ldi	r24, 0xF4	; 244
	wait(500);
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	07 d0       	rcall	.+14     	; 0x1d0 <wait>
	displayClrPixel(5,3);
 1c2:	63 e0       	ldi	r22, 0x03	; 3
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	82 df       	rcall	.-252    	; 0xcc <displayClrPixel>
 1c8:	d3 df       	rcall	.-90     	; 0x170 <display>
	display();
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
		wait(500);
	}
	*/

	return 1;
 1ce:	08 95       	ret

000001d0 <wait>:
 */ 
#include "toolbox.h"

void wait( int ms )
{
	for (int i=0; i<ms; i++)
 1d0:	18 16       	cp	r1, r24
 1d2:	19 06       	cpc	r1, r25
 1d4:	6c f4       	brge	.+26     	; 0x1f0 <wait+0x20>
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	ef ec       	ldi	r30, 0xCF	; 207
 1dc:	f7 e0       	ldi	r31, 0x07	; 7
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <wait+0xe>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <wait+0x14>
 1e4:	00 00       	nop
 1e6:	2f 5f       	subi	r18, 0xFF	; 255
 1e8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ea:	82 17       	cp	r24, r18
 1ec:	93 07       	cpc	r25, r19
 1ee:	a9 f7       	brne	.-22     	; 0x1da <wait+0xa>
 1f0:	08 95       	ret

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
