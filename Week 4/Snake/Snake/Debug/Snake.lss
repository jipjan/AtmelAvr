
Snake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000102c  000010c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000102c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080010c  0080010c  000010cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001930  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d5e  00000000  00000000  00002bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d4a  00000000  00000000  0000395a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000380  00000000  00000000  000046a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b5  00000000  00000000  00004a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000760  00000000  00000000  000050d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00005839  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	8d c0       	rjmp	.+282    	; 0x120 <__bad_interrupt>
       6:	00 00       	nop
       8:	8b c0       	rjmp	.+278    	; 0x120 <__bad_interrupt>
       a:	00 00       	nop
       c:	89 c0       	rjmp	.+274    	; 0x120 <__bad_interrupt>
       e:	00 00       	nop
      10:	87 c0       	rjmp	.+270    	; 0x120 <__bad_interrupt>
      12:	00 00       	nop
      14:	85 c0       	rjmp	.+266    	; 0x120 <__bad_interrupt>
      16:	00 00       	nop
      18:	83 c0       	rjmp	.+262    	; 0x120 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	81 c0       	rjmp	.+258    	; 0x120 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7f c0       	rjmp	.+254    	; 0x120 <__bad_interrupt>
      22:	00 00       	nop
      24:	7d c0       	rjmp	.+250    	; 0x120 <__bad_interrupt>
      26:	00 00       	nop
      28:	7b c0       	rjmp	.+246    	; 0x120 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	79 c0       	rjmp	.+242    	; 0x120 <__bad_interrupt>
      2e:	00 00       	nop
      30:	77 c0       	rjmp	.+238    	; 0x120 <__bad_interrupt>
      32:	00 00       	nop
      34:	75 c0       	rjmp	.+234    	; 0x120 <__bad_interrupt>
      36:	00 00       	nop
      38:	73 c0       	rjmp	.+230    	; 0x120 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	71 c0       	rjmp	.+226    	; 0x120 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6f c0       	rjmp	.+222    	; 0x120 <__bad_interrupt>
      42:	00 00       	nop
      44:	6d c0       	rjmp	.+218    	; 0x120 <__bad_interrupt>
      46:	00 00       	nop
      48:	6b c0       	rjmp	.+214    	; 0x120 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	69 c0       	rjmp	.+210    	; 0x120 <__bad_interrupt>
      4e:	00 00       	nop
      50:	67 c0       	rjmp	.+206    	; 0x120 <__bad_interrupt>
      52:	00 00       	nop
      54:	65 c0       	rjmp	.+202    	; 0x120 <__bad_interrupt>
      56:	00 00       	nop
      58:	63 c0       	rjmp	.+198    	; 0x120 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	61 c0       	rjmp	.+194    	; 0x120 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5f c0       	rjmp	.+190    	; 0x120 <__bad_interrupt>
      62:	00 00       	nop
      64:	5d c0       	rjmp	.+186    	; 0x120 <__bad_interrupt>
      66:	00 00       	nop
      68:	5b c0       	rjmp	.+182    	; 0x120 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	59 c0       	rjmp	.+178    	; 0x120 <__bad_interrupt>
      6e:	00 00       	nop
      70:	57 c0       	rjmp	.+174    	; 0x120 <__bad_interrupt>
      72:	00 00       	nop
      74:	55 c0       	rjmp	.+170    	; 0x120 <__bad_interrupt>
      76:	00 00       	nop
      78:	53 c0       	rjmp	.+166    	; 0x120 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	51 c0       	rjmp	.+162    	; 0x120 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4f c0       	rjmp	.+158    	; 0x120 <__bad_interrupt>
      82:	00 00       	nop
      84:	4d c0       	rjmp	.+154    	; 0x120 <__bad_interrupt>
      86:	00 00       	nop
      88:	4b c0       	rjmp	.+150    	; 0x120 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 00       	.word	0x0008	; ????
      8e:	00 00       	nop
      90:	be 92       	st	-X, r11
      92:	24 49       	sbci	r18, 0x94	; 148
      94:	12 3e       	cpi	r17, 0xE2	; 226
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
      9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
      9e:	4c 3e       	cpi	r20, 0xEC	; 236
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	be ab       	std	Y+54, r27	; 0x36
      a6:	aa aa       	std	Y+50, r10	; 0x32
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	00 08       	sbc	r0, r0
      ba:	41 78       	andi	r20, 0x81	; 129
      bc:	d3 bb       	out	0x13, r29	; 19
      be:	43 87       	std	Z+11, r20	; 0x0b
      c0:	d1 13       	cpse	r29, r17
      c2:	3d 19       	sub	r19, r13
      c4:	0e 3c       	cpi	r16, 0xCE	; 206
      c6:	c3 bd       	out	0x23, r28	; 35
      c8:	42 82       	std	Z+2, r4	; 0x02
      ca:	ad 2b       	or	r26, r29
      cc:	3e 68       	ori	r19, 0x8E	; 142
      ce:	ec 82       	std	Y+4, r14	; 0x04
      d0:	76 be       	out	0x36, r7	; 54
      d2:	d9 8f       	std	Y+25, r29	; 0x19
      d4:	e1 a9       	ldd	r30, Z+49	; 0x31
      d6:	3e 4c       	sbci	r19, 0xCE	; 206
      d8:	80 ef       	ldi	r24, 0xF0	; 240
      da:	ff be       	out	0x3f, r15	; 63
      dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <__floatsisf+0x62>
      de:	ff 7f       	andi	r31, 0xFF	; 255
      e0:	3f 00       	.word	0x003f	; ????
      e2:	00 00       	nop
	...

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d0 e1       	ldi	r29, 0x10	; 16
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	11 e0       	ldi	r17, 0x01	; 1
      f4:	a0 e0       	ldi	r26, 0x00	; 0
      f6:	b1 e0       	ldi	r27, 0x01	; 1
      f8:	ec e2       	ldi	r30, 0x2C	; 44
      fa:	f0 e1       	ldi	r31, 0x10	; 16
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0b bf       	out	0x3b, r16	; 59
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x14>
     102:	07 90       	elpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	ac 30       	cpi	r26, 0x0C	; 12
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0x10>

0000010c <__do_clear_bss>:
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	ac e0       	ldi	r26, 0x0C	; 12
     110:	b1 e0       	ldi	r27, 0x01	; 1
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	a4 32       	cpi	r26, 0x24	; 36
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	7a d2       	rcall	.+1268   	; 0x612 <main>
     11e:	84 c7       	rjmp	.+3848   	; 0x1028 <_exit>

00000120 <__bad_interrupt>:
     120:	6f cf       	rjmp	.-290    	; 0x0 <__vectors>

00000122 <time>:
     122:	fc 01       	movw	r30, r24
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	f8 94       	cli
     128:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <__system_time>
     12c:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <__system_time+0x1>
     130:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__system_time+0x2>
     134:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__system_time+0x3>
     138:	0f be       	out	0x3f, r0	; 63
     13a:	30 97       	sbiw	r30, 0x00	; 0
     13c:	21 f0       	breq	.+8      	; 0x146 <time+0x24>
     13e:	60 83       	st	Z, r22
     140:	71 83       	std	Z+1, r23	; 0x01
     142:	82 83       	std	Z+2, r24	; 0x02
     144:	93 83       	std	Z+3, r25	; 0x03
     146:	08 95       	ret

00000148 <displaySetPixel>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
     148:	e6 2f       	mov	r30, r22
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	e4 5f       	subi	r30, 0xF4	; 244
     14e:	fe 4f       	sbci	r31, 0xFE	; 254
     150:	21 e0       	ldi	r18, 0x01	; 1
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	02 c0       	rjmp	.+4      	; 0x15a <displaySetPixel+0x12>
     156:	22 0f       	add	r18, r18
     158:	33 1f       	adc	r19, r19
     15a:	8a 95       	dec	r24
     15c:	e2 f7       	brpl	.-8      	; 0x156 <displaySetPixel+0xe>
     15e:	80 81       	ld	r24, Z
     160:	28 2b       	or	r18, r24
     162:	20 83       	st	Z, r18
     164:	08 95       	ret

00000166 <displayClr>:
     166:	ec e0       	ldi	r30, 0x0C	; 12
     168:	f1 e0       	ldi	r31, 0x01	; 1
     16a:	84 e1       	ldi	r24, 0x14	; 20
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	11 92       	st	Z+, r1
     170:	e8 17       	cp	r30, r24
     172:	f9 07       	cpc	r31, r25
     174:	e1 f7       	brne	.-8      	; 0x16e <displayClr+0x8>
     176:	08 95       	ret

00000178 <twi_init>:
     178:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     17c:	80 e2       	ldi	r24, 0x20	; 32
     17e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     182:	08 95       	ret

00000184 <twi_start>:
     184:	84 ea       	ldi	r24, 0xA4	; 164
     186:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     18a:	e4 e7       	ldi	r30, 0x74	; 116
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	88 23       	and	r24, r24
     192:	ec f7       	brge	.-6      	; 0x18e <twi_start+0xa>
     194:	08 95       	ret

00000196 <twi_tx>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
     196:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
     19a:	84 e8       	ldi	r24, 0x84	; 132
     19c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
     1a0:	e4 e7       	ldi	r30, 0x74	; 116
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	88 23       	and	r24, r24
     1a8:	ec f7       	brge	.-6      	; 0x1a4 <twi_tx+0xe>
}
     1aa:	08 95       	ret

000001ac <displayInitHT16K33>:
inputs:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	08 2f       	mov	r16, r24
	// System setup page 30 ht16k33 datasheet
	twi_start();
     1b6:	e6 df       	rcall	.-52     	; 0x184 <twi_start>
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
     1b8:	80 2f       	mov	r24, r16
     1ba:	ed df       	rcall	.-38     	; 0x196 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
     1bc:	81 e2       	ldi	r24, 0x21	; 33
     1be:	eb df       	rcall	.-42     	; 0x196 <twi_tx>
     1c0:	c4 e7       	ldi	r28, 0x74	; 116
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
     1c2:	d0 e0       	ldi	r29, 0x00	; 0
     1c4:	14 e9       	ldi	r17, 0x94	; 148
     1c6:	18 83       	st	Y, r17
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();
		
	// ROW/INT set. Page 31 ht16k33 datasheet
	twi_start();
     1c8:	dd df       	rcall	.-70     	; 0x184 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
     1ca:	80 2f       	mov	r24, r16
     1cc:	e4 df       	rcall	.-56     	; 0x196 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output (default)
     1ce:	80 ea       	ldi	r24, 0xA0	; 160
     1d0:	e2 df       	rcall	.-60     	; 0x196 <twi_tx>
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
     1d2:	18 83       	st	Y, r17
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output (default)
	twi_stop();

	// Dimming set
	twi_start();
     1d4:	d7 df       	rcall	.-82     	; 0x184 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
     1d6:	80 2f       	mov	r24, r16
     1d8:	de df       	rcall	.-68     	; 0x196 <twi_tx>
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
     1da:	81 ee       	ldi	r24, 0xE1	; 225
     1dc:	dc df       	rcall	.-72     	; 0x196 <twi_tx>
     1de:	18 83       	st	Y, r17
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
     1e0:	d1 df       	rcall	.-94     	; 0x184 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
	twi_stop();

	// Display set
	twi_start();
     1e2:	80 2f       	mov	r24, r16
     1e4:	d8 df       	rcall	.-80     	; 0x196 <twi_tx>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
     1e6:	81 e8       	ldi	r24, 0x81	; 129
     1e8:	d6 df       	rcall	.-84     	; 0x196 <twi_tx>
     1ea:	18 83       	st	Y, r17
	twi_tx(0x81);			// Display ON, Blinking OFF
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	1f 91       	pop	r17
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
     1f2:	0f 91       	pop	r16
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
	*/
}
     1f4:	08 95       	ret

000001f6 <displayInit>:
     1f6:	c0 df       	rcall	.-128    	; 0x178 <twi_init>
     1f8:	88 ee       	ldi	r24, 0xE8	; 232
     1fa:	d8 cf       	rjmp	.-80     	; 0x1ac <displayInitHT16K33>
     1fc:	08 95       	ret

000001fe <display>:
inputs:
outputs:
notes:		Let op de 'vreemde' shift, foutje in printplaat?
Version:	DMK, Initial code
*******************************************************************/
{
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
	// Second display
	twi_start();
     206:	be df       	rcall	.-132    	; 0x184 <twi_start>
	twi_tx(D0_I2C_ADDR);
     208:	88 ee       	ldi	r24, 0xE8	; 232
     20a:	c5 df       	rcall	.-118    	; 0x196 <twi_tx>
	twi_tx(0x00);
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	c3 df       	rcall	.-122    	; 0x196 <twi_tx>
     210:	c4 e1       	ldi	r28, 0x14	; 20
     212:	d1 e0       	ldi	r29, 0x01	; 1
     214:	0c e0       	ldi	r16, 0x0C	; 12
     216:	11 e0       	ldi	r17, 0x01	; 1
     218:	8a 91       	ld	r24, -Y
	for( uint8_t idx = 0; idx < 8; idx++ ) {
		uint8_t a = buf[7 + 0 * 8 - idx];
     21a:	80 fb       	bst	r24, 0
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
     21c:	87 95       	ror	r24
     21e:	87 f9       	bld	r24, 7
     220:	ba df       	rcall	.-140    	; 0x196 <twi_tx>
		twi_tx( 0x00);
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	b8 df       	rcall	.-144    	; 0x196 <twi_tx>
     226:	c0 17       	cp	r28, r16
{
	// Second display
	twi_start();
	twi_tx(D0_I2C_ADDR);
	twi_tx(0x00);
	for( uint8_t idx = 0; idx < 8; idx++ ) {
     228:	d1 07       	cpc	r29, r17
     22a:	b1 f7       	brne	.-20     	; 0x218 <display+0x1a>
     22c:	84 e9       	ldi	r24, 0x94	; 148
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
     22e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     232:	df 91       	pop	r29
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
}
     234:	cf 91       	pop	r28
     236:	1f 91       	pop	r17
     238:	0f 91       	pop	r16
     23a:	08 95       	ret

0000023c <gl_change_direction>:

location* foodLoc;

void gl_change_direction(uint8_t dir)
{
	if (dir == LEFT && direction == RIGHT)	return;
     23c:	84 30       	cpi	r24, 0x04	; 4
     23e:	29 f4       	brne	.+10     	; 0x24a <gl_change_direction+0xe>
     240:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <direction>
     244:	92 30       	cpi	r25, 0x02	; 2
     246:	a9 f4       	brne	.+42     	; 0x272 <gl_change_direction+0x36>
     248:	08 95       	ret
	if (dir == RIGHT && direction == LEFT)	return;
     24a:	82 30       	cpi	r24, 0x02	; 2
     24c:	29 f4       	brne	.+10     	; 0x258 <gl_change_direction+0x1c>
     24e:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <direction>
     252:	94 30       	cpi	r25, 0x04	; 4
     254:	71 f4       	brne	.+28     	; 0x272 <gl_change_direction+0x36>
     256:	08 95       	ret
	if (dir == UP && direction == DOWN)		return;
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	29 f4       	brne	.+10     	; 0x266 <gl_change_direction+0x2a>
     25c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <direction>
     260:	93 30       	cpi	r25, 0x03	; 3
     262:	39 f4       	brne	.+14     	; 0x272 <gl_change_direction+0x36>
     264:	08 95       	ret
	if (dir == DOWN && direction == UP)		return;
     266:	83 30       	cpi	r24, 0x03	; 3
     268:	21 f4       	brne	.+8      	; 0x272 <gl_change_direction+0x36>
     26a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <direction>
     26e:	91 30       	cpi	r25, 0x01	; 1
     270:	11 f0       	breq	.+4      	; 0x276 <gl_change_direction+0x3a>
	direction = dir;
     272:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <direction>
     276:	08 95       	ret

00000278 <gl_compare_locations>:
			return 1;
	return 0;
}

int gl_compare_locations(location* first, location* second)
{
     278:	fc 01       	movw	r30, r24
	return (first->x == second->x && first->y == second->y);
     27a:	90 81       	ld	r25, Z
     27c:	db 01       	movw	r26, r22
     27e:	8c 91       	ld	r24, X
     280:	98 13       	cpse	r25, r24
     282:	09 c0       	rjmp	.+18     	; 0x296 <gl_compare_locations+0x1e>
     284:	21 e0       	ldi	r18, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	31 81       	ldd	r19, Z+1	; 0x01
     28a:	11 96       	adiw	r26, 0x01	; 1
     28c:	8c 91       	ld	r24, X
     28e:	38 13       	cpse	r19, r24
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	82 2f       	mov	r24, r18
     294:	08 95       	ret
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
}
     29a:	08 95       	ret

0000029c <gl_check_collision>:
	gl_make_food();
	gl_loc_to_display();
}

int gl_check_collision(location* locations, location* other)
{
     29c:	ef 92       	push	r14
     29e:	ff 92       	push	r15
     2a0:	0f 93       	push	r16
     2a2:	1f 93       	push	r17
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
	for (uint8_t i = 0; i < snake_length; i++)
     2a8:	00 91 19 01 	lds	r16, 0x0119	; 0x800119 <snake_length>
     2ac:	00 23       	and	r16, r16
     2ae:	71 f0       	breq	.+28     	; 0x2cc <gl_check_collision+0x30>
     2b0:	7b 01       	movw	r14, r22
     2b2:	c8 2f       	mov	r28, r24
     2b4:	d9 2f       	mov	r29, r25
     2b6:	10 e0       	ldi	r17, 0x00	; 0
		if (gl_compare_locations(&locations[i], other))
     2b8:	b7 01       	movw	r22, r14
     2ba:	ce 01       	movw	r24, r28
     2bc:	dd df       	rcall	.-70     	; 0x278 <gl_compare_locations>
     2be:	00 97       	sbiw	r24, 0x00	; 0
     2c0:	41 f4       	brne	.+16     	; 0x2d2 <gl_check_collision+0x36>
	gl_loc_to_display();
}

int gl_check_collision(location* locations, location* other)
{
	for (uint8_t i = 0; i < snake_length; i++)
     2c2:	1f 5f       	subi	r17, 0xFF	; 255
     2c4:	22 96       	adiw	r28, 0x02	; 2
     2c6:	10 13       	cpse	r17, r16
     2c8:	f7 cf       	rjmp	.-18     	; 0x2b8 <gl_check_collision+0x1c>
     2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <gl_check_collision+0x3a>
		if (gl_compare_locations(&locations[i], other))
			return 1;
	return 0;
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <gl_check_collision+0x3a>

int gl_check_collision(location* locations, location* other)
{
	for (uint8_t i = 0; i < snake_length; i++)
		if (gl_compare_locations(&locations[i], other))
			return 1;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	90 e0       	ldi	r25, 0x00	; 0
	return 0;
}
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	1f 91       	pop	r17
     2dc:	0f 91       	pop	r16
     2de:	ff 90       	pop	r15
     2e0:	ef 90       	pop	r14
     2e2:	08 95       	ret

000002e4 <gl_make_food>:
{
	return (first->x == second->x && first->y == second->y);
}

void gl_make_food()
{
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
	foodLoc->x = rand() % DOTMATRIX_SIZE;
     2e8:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <foodLoc>
     2ec:	d0 91 1b 01 	lds	r29, 0x011B	; 0x80011b <foodLoc+0x1>
     2f0:	27 d6       	rcall	.+3150   	; 0xf40 <rand>
     2f2:	87 70       	andi	r24, 0x07	; 7
     2f4:	90 78       	andi	r25, 0x80	; 128
     2f6:	99 23       	and	r25, r25
     2f8:	24 f4       	brge	.+8      	; 0x302 <gl_make_food+0x1e>
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	88 6f       	ori	r24, 0xF8	; 248
     2fe:	9f 6f       	ori	r25, 0xFF	; 255
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	88 83       	st	Y, r24
	foodLoc->y = rand() % DOTMATRIX_SIZE;
     304:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <foodLoc>
     308:	d0 91 1b 01 	lds	r29, 0x011B	; 0x80011b <foodLoc+0x1>
     30c:	19 d6       	rcall	.+3122   	; 0xf40 <rand>
     30e:	87 70       	andi	r24, 0x07	; 7
     310:	90 78       	andi	r25, 0x80	; 128
     312:	99 23       	and	r25, r25
     314:	24 f4       	brge	.+8      	; 0x31e <gl_make_food+0x3a>
     316:	01 97       	sbiw	r24, 0x01	; 1
     318:	88 6f       	ori	r24, 0xF8	; 248
     31a:	9f 6f       	ori	r25, 0xFF	; 255
     31c:	01 96       	adiw	r24, 0x01	; 1
     31e:	89 83       	std	Y+1, r24	; 0x01
	if (gl_check_collision(temp, foodLoc))
     320:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <foodLoc>
     324:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <foodLoc+0x1>
     328:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <temp>
     32c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <temp+0x1>
     330:	b5 df       	rcall	.-150    	; 0x29c <gl_check_collision>
     332:	89 2b       	or	r24, r25
		gl_make_food();
     334:	09 f0       	breq	.+2      	; 0x338 <gl_make_food+0x54>
     336:	d6 df       	rcall	.-84     	; 0x2e4 <gl_make_food>
}
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <gl_loc_to_display>:
	
	// display
	gl_loc_to_display();
}

void gl_loc_to_display() {
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
	emptyDisplay();
     342:	d8 d1       	rcall	.+944    	; 0x6f4 <emptyDisplay>
	writeLedDisplay(snake_length - 2);
     344:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <snake_length>
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	02 97       	sbiw	r24, 0x02	; 2
	
	
	displayClr();
     34c:	dd d1       	rcall	.+954    	; 0x708 <writeLedDisplay>
     34e:	0b df       	rcall	.-490    	; 0x166 <displayClr>
	for (int i = 0; i < snake_length; i++)
     350:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <snake_length>
     354:	88 23       	and	r24, r24
     356:	a9 f0       	breq	.+42     	; 0x382 <gl_loc_to_display+0x44>
     358:	c0 e0       	ldi	r28, 0x00	; 0
     35a:	d0 e0       	ldi	r29, 0x00	; 0
		displaySetPixel(current[i].x, current[i].y);
     35c:	ce 01       	movw	r24, r28
     35e:	88 0f       	add	r24, r24
     360:	99 1f       	adc	r25, r25
     362:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <current>
     366:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <current+0x1>
     36a:	e8 0f       	add	r30, r24
     36c:	f9 1f       	adc	r31, r25
     36e:	61 81       	ldd	r22, Z+1	; 0x01
     370:	80 81       	ld	r24, Z
     372:	ea de       	rcall	.-556    	; 0x148 <displaySetPixel>
	emptyDisplay();
	writeLedDisplay(snake_length - 2);
	
	
	displayClr();
	for (int i = 0; i < snake_length; i++)
     374:	21 96       	adiw	r28, 0x01	; 1
     376:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <snake_length>
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	c8 17       	cp	r28, r24
     37e:	d9 07       	cpc	r29, r25
     380:	6c f3       	brlt	.-38     	; 0x35c <gl_loc_to_display+0x1e>
		displaySetPixel(current[i].x, current[i].y);
	displaySetPixel(foodLoc->x, foodLoc->y);
     382:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <foodLoc>
     386:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <foodLoc+0x1>
     38a:	61 81       	ldd	r22, Z+1	; 0x01
     38c:	80 81       	ld	r24, Z
	display();
     38e:	dc de       	rcall	.-584    	; 0x148 <displaySetPixel>
     390:	36 df       	rcall	.-404    	; 0x1fe <display>
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <gl_restart>:
	if (dir == DOWN && direction == UP)		return;
	direction = dir;
}

void gl_restart()
{
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
	spi_masterInit();
     3a0:	57 d1       	rcall	.+686    	; 0x650 <spi_masterInit>
	displayDriverInit();
     3a2:	78 d1       	rcall	.+752    	; 0x694 <displayDriverInit>
     3a4:	80 e0       	ldi	r24, 0x00	; 0
	srand(time(NULL));
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	bc de       	rcall	.-648    	; 0x122 <time>
     3aa:	cb 01       	movw	r24, r22
     3ac:	cc d5       	rcall	.+2968   	; 0xf46 <srand>
     3ae:	82 e0       	ldi	r24, 0x02	; 2
	snake_length = 2;
     3b0:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <snake_length>
     3b4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <temp>
	
	free(temp);
     3b8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <temp+0x1>
     3bc:	f1 d4       	rcall	.+2530   	; 0xda0 <free>
     3be:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <current>
	free(current);
     3c2:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <current+0x1>
     3c6:	ec d4       	rcall	.+2520   	; 0xda0 <free>
     3c8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <foodLoc>
	free(foodLoc);
     3cc:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <foodLoc+0x1>
     3d0:	e7 d4       	rcall	.+2510   	; 0xda0 <free>
     3d2:	00 91 0a 01 	lds	r16, 0x010A	; 0x80010a <loc_size>
	
	foodLoc = malloc(loc_size);
     3d6:	10 91 0b 01 	lds	r17, 0x010B	; 0x80010b <loc_size+0x1>
     3da:	c8 01       	movw	r24, r16
     3dc:	49 d4       	rcall	.+2194   	; 0xc70 <malloc>
     3de:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <foodLoc+0x1>
     3e2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <foodLoc>
     3e6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <snake_length>
	temp = malloc(loc_size * snake_length);
     3ea:	80 9f       	mul	r24, r16
     3ec:	e0 01       	movw	r28, r0
     3ee:	81 9f       	mul	r24, r17
     3f0:	d0 0d       	add	r29, r0
     3f2:	11 24       	eor	r1, r1
     3f4:	ce 01       	movw	r24, r28
     3f6:	3c d4       	rcall	.+2168   	; 0xc70 <malloc>
     3f8:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <temp+0x1>
     3fc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <temp>
     400:	ce 01       	movw	r24, r28
	current = malloc(loc_size * snake_length);
     402:	36 d4       	rcall	.+2156   	; 0xc70 <malloc>
     404:	fc 01       	movw	r30, r24
     406:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <current+0x1>
     40a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <current>
     40e:	83 e0       	ldi	r24, 0x03	; 3
	
	current[0].x = 3;
     410:	80 83       	st	Z, r24
	current[0].y = 4;
     412:	94 e0       	ldi	r25, 0x04	; 4
     414:	91 83       	std	Z+1, r25	; 0x01
	current[1].x = 3;
     416:	82 83       	std	Z+2, r24	; 0x02
	current[1].y = 5;
     418:	95 e0       	ldi	r25, 0x05	; 5
     41a:	93 83       	std	Z+3, r25	; 0x03
	
	direction = DOWN;
     41c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <direction>
	
	gl_make_food();
     420:	61 df       	rcall	.-318    	; 0x2e4 <gl_make_food>
     422:	8d df       	rcall	.-230    	; 0x33e <gl_loc_to_display>
	gl_loc_to_display();
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
}
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	08 95       	ret

0000042e <gl_gamestep>:
     42e:	cf 92       	push	r12
     430:	df 92       	push	r13
	if (gl_check_collision(temp, foodLoc))
		gl_make_food();
}

void gl_gamestep()
{
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	00 d0       	rcall	.+0      	; 0x440 <gl_gamestep+0x12>
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
	// Determine next location of head
	location nextLoc = current[0];
     444:	00 91 17 01 	lds	r16, 0x0117	; 0x800117 <current>
     448:	10 91 18 01 	lds	r17, 0x0118	; 0x800118 <current+0x1>
     44c:	f8 01       	movw	r30, r16
     44e:	80 81       	ld	r24, Z
     450:	91 81       	ldd	r25, Z+1	; 0x01
     452:	9a 83       	std	Y+2, r25	; 0x02
     454:	89 83       	std	Y+1, r24	; 0x01
	switch (direction) {
     456:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <direction>
     45a:	82 30       	cpi	r24, 0x02	; 2
     45c:	81 f1       	breq	.+96     	; 0x4be <gl_gamestep+0x90>
     45e:	18 f4       	brcc	.+6      	; 0x466 <gl_gamestep+0x38>
     460:	81 30       	cpi	r24, 0x01	; 1
     462:	31 f0       	breq	.+12     	; 0x470 <gl_gamestep+0x42>
     464:	38 c0       	rjmp	.+112    	; 0x4d6 <gl_gamestep+0xa8>
     466:	83 30       	cpi	r24, 0x03	; 3
     468:	81 f0       	breq	.+32     	; 0x48a <gl_gamestep+0x5c>
     46a:	84 30       	cpi	r24, 0x04	; 4
     46c:	d9 f0       	breq	.+54     	; 0x4a4 <gl_gamestep+0x76>
     46e:	33 c0       	rjmp	.+102    	; 0x4d6 <gl_gamestep+0xa8>
		case UP:
		nextLoc.y = (nextLoc.y + DOTMATRIX_SIZE + 1) % DOTMATRIX_SIZE;
     470:	8a 81       	ldd	r24, Y+2	; 0x02
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	09 96       	adiw	r24, 0x09	; 9
     476:	87 70       	andi	r24, 0x07	; 7
     478:	90 78       	andi	r25, 0x80	; 128
     47a:	99 23       	and	r25, r25
     47c:	24 f4       	brge	.+8      	; 0x486 <gl_gamestep+0x58>
     47e:	01 97       	sbiw	r24, 0x01	; 1
     480:	88 6f       	ori	r24, 0xF8	; 248
     482:	9f 6f       	ori	r25, 0xFF	; 255
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	8a 83       	std	Y+2, r24	; 0x02
		break;
     488:	26 c0       	rjmp	.+76     	; 0x4d6 <gl_gamestep+0xa8>
		case DOWN:
		nextLoc.y = (nextLoc.y + DOTMATRIX_SIZE - 1) % DOTMATRIX_SIZE;
     48a:	8a 81       	ldd	r24, Y+2	; 0x02
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	07 96       	adiw	r24, 0x07	; 7
     490:	87 70       	andi	r24, 0x07	; 7
     492:	90 78       	andi	r25, 0x80	; 128
     494:	99 23       	and	r25, r25
     496:	24 f4       	brge	.+8      	; 0x4a0 <gl_gamestep+0x72>
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	88 6f       	ori	r24, 0xF8	; 248
     49c:	9f 6f       	ori	r25, 0xFF	; 255
     49e:	01 96       	adiw	r24, 0x01	; 1
     4a0:	8a 83       	std	Y+2, r24	; 0x02
		break;
     4a2:	19 c0       	rjmp	.+50     	; 0x4d6 <gl_gamestep+0xa8>
		case LEFT:
		nextLoc.x = (nextLoc.x + DOTMATRIX_SIZE - 1) % DOTMATRIX_SIZE;
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	07 96       	adiw	r24, 0x07	; 7
     4aa:	87 70       	andi	r24, 0x07	; 7
     4ac:	90 78       	andi	r25, 0x80	; 128
     4ae:	99 23       	and	r25, r25
     4b0:	24 f4       	brge	.+8      	; 0x4ba <gl_gamestep+0x8c>
     4b2:	01 97       	sbiw	r24, 0x01	; 1
     4b4:	88 6f       	ori	r24, 0xF8	; 248
     4b6:	9f 6f       	ori	r25, 0xFF	; 255
     4b8:	01 96       	adiw	r24, 0x01	; 1
     4ba:	89 83       	std	Y+1, r24	; 0x01
		break;
     4bc:	0c c0       	rjmp	.+24     	; 0x4d6 <gl_gamestep+0xa8>
		case RIGHT:
		nextLoc.x = (nextLoc.x + DOTMATRIX_SIZE + 1) % DOTMATRIX_SIZE;
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	09 96       	adiw	r24, 0x09	; 9
     4c4:	87 70       	andi	r24, 0x07	; 7
     4c6:	90 78       	andi	r25, 0x80	; 128
     4c8:	99 23       	and	r25, r25
     4ca:	24 f4       	brge	.+8      	; 0x4d4 <gl_gamestep+0xa6>
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	88 6f       	ori	r24, 0xF8	; 248
     4d0:	9f 6f       	ori	r25, 0xFF	; 255
     4d2:	01 96       	adiw	r24, 0x01	; 1
     4d4:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	
	// Check collision
	if (gl_check_collision(current, &nextLoc) && !gl_compare_locations(&nextLoc, &current[snake_length - 1]))
     4d6:	be 01       	movw	r22, r28
     4d8:	6f 5f       	subi	r22, 0xFF	; 255
     4da:	7f 4f       	sbci	r23, 0xFF	; 255
     4dc:	c8 01       	movw	r24, r16
     4de:	de de       	rcall	.-580    	; 0x29c <gl_check_collision>
     4e0:	89 2b       	or	r24, r25
     4e2:	99 f0       	breq	.+38     	; 0x50a <gl_gamestep+0xdc>
     4e4:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <snake_length>
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	61 50       	subi	r22, 0x01	; 1
     4ec:	70 48       	sbci	r23, 0x80	; 128
     4ee:	66 0f       	add	r22, r22
     4f0:	77 1f       	adc	r23, r23
     4f2:	60 0f       	add	r22, r16
     4f4:	71 1f       	adc	r23, r17
     4f6:	ce 01       	movw	r24, r28
     4f8:	01 96       	adiw	r24, 0x01	; 1
     4fa:	be de       	rcall	.-644    	; 0x278 <gl_compare_locations>
     4fc:	89 2b       	or	r24, r25
     4fe:	29 f4       	brne	.+10     	; 0x50a <gl_gamestep+0xdc>
	{
		wait(2000);
     500:	80 ed       	ldi	r24, 0xD0	; 208
     502:	97 e0       	ldi	r25, 0x07	; 7
		gl_restart();
     504:	78 d1       	rcall	.+752    	; 0x7f6 <wait>
     506:	48 df       	rcall	.-368    	; 0x398 <gl_restart>
     508:	79 c0       	rjmp	.+242    	; 0x5fc <gl_gamestep+0x1ce>
		return;
	}
	
	// Check food
	if (gl_compare_locations(&nextLoc, foodLoc)) {
     50a:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <foodLoc>
     50e:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <foodLoc+0x1>
     512:	ce 01       	movw	r24, r28
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	b0 de       	rcall	.-672    	; 0x278 <gl_compare_locations>
     518:	89 2b       	or	r24, r25
     51a:	09 f4       	brne	.+2      	; 0x51e <gl_gamestep+0xf0>
     51c:	42 c0       	rjmp	.+132    	; 0x5a2 <gl_gamestep+0x174>
		snake_length++;
     51e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <snake_length>
     522:	8f 5f       	subi	r24, 0xFF	; 255
     524:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <snake_length>
		free(temp);
     528:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <temp>
     52c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <temp+0x1>
     530:	37 d4       	rcall	.+2158   	; 0xda0 <free>
		temp = malloc(snake_length * loc_size);
     532:	c0 90 0a 01 	lds	r12, 0x010A	; 0x80010a <loc_size>
     536:	d0 90 0b 01 	lds	r13, 0x010B	; 0x80010b <loc_size+0x1>
     53a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <snake_length>
     53e:	8c 9d       	mul	r24, r12
     540:	80 01       	movw	r16, r0
     542:	8d 9d       	mul	r24, r13
     544:	10 0d       	add	r17, r0
     546:	11 24       	eor	r1, r1
     548:	c8 01       	movw	r24, r16
     54a:	92 d3       	rcall	.+1828   	; 0xc70 <malloc>
     54c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <temp+0x1>
     550:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <temp>
		memcpy(temp + 1, current, snake_length * loc_size - loc_size);
     554:	e0 90 17 01 	lds	r14, 0x0117	; 0x800117 <current>
     558:	f0 90 18 01 	lds	r15, 0x0118	; 0x800118 <current+0x1>
     55c:	a8 01       	movw	r20, r16
     55e:	4c 19       	sub	r20, r12
     560:	5d 09       	sbc	r21, r13
     562:	b7 01       	movw	r22, r14
     564:	02 96       	adiw	r24, 0x02	; 2
		free(current);
     566:	fa d4       	rcall	.+2548   	; 0xf5c <memcpy>
     568:	c7 01       	movw	r24, r14
     56a:	1a d4       	rcall	.+2100   	; 0xda0 <free>
		current = malloc(snake_length * loc_size);
     56c:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <snake_length>
     570:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <loc_size>
     574:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <loc_size+0x1>
     578:	ac 01       	movw	r20, r24
     57a:	24 9f       	mul	r18, r20
     57c:	c0 01       	movw	r24, r0
     57e:	25 9f       	mul	r18, r21
     580:	90 0d       	add	r25, r0
     582:	11 24       	eor	r1, r1
     584:	75 d3       	rcall	.+1770   	; 0xc70 <malloc>
     586:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <current+0x1>
     58a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <current>
		temp[0] = nextLoc;
     58e:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <temp>
     592:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <temp+0x1>
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	9a 81       	ldd	r25, Y+2	; 0x02
     59a:	91 83       	std	Z+1, r25	; 0x01
		gl_make_food();
     59c:	80 83       	st	Z, r24
     59e:	a2 de       	rcall	.-700    	; 0x2e4 <gl_make_food>
     5a0:	1c c0       	rjmp	.+56     	; 0x5da <gl_gamestep+0x1ac>
	} else {
		memcpy(temp + 1, current, snake_length * loc_size - loc_size);
     5a2:	e0 90 14 01 	lds	r14, 0x0114	; 0x800114 <temp>
     5a6:	f0 90 15 01 	lds	r15, 0x0115	; 0x800115 <temp+0x1>
     5aa:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <snake_length>
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	01 97       	sbiw	r24, 0x01	; 1
     5b2:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <loc_size>
     5b6:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <loc_size+0x1>
     5ba:	82 9f       	mul	r24, r18
     5bc:	a0 01       	movw	r20, r0
     5be:	83 9f       	mul	r24, r19
     5c0:	50 0d       	add	r21, r0
     5c2:	92 9f       	mul	r25, r18
     5c4:	50 0d       	add	r21, r0
     5c6:	11 24       	eor	r1, r1
     5c8:	b8 01       	movw	r22, r16
     5ca:	c7 01       	movw	r24, r14
     5cc:	02 96       	adiw	r24, 0x02	; 2
     5ce:	c6 d4       	rcall	.+2444   	; 0xf5c <memcpy>
		temp[0] = nextLoc;
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	9a 81       	ldd	r25, Y+2	; 0x02
     5d4:	f7 01       	movw	r30, r14
     5d6:	91 83       	std	Z+1, r25	; 0x01
     5d8:	80 83       	st	Z, r24
	}
	location* switcharoo = current;
     5da:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <current>
     5de:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <current+0x1>
	current = temp;
     5e2:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <temp>
     5e6:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <temp+0x1>
     5ea:	30 93 18 01 	sts	0x0118, r19	; 0x800118 <current+0x1>
     5ee:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <current>
	temp = switcharoo;
     5f2:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <temp+0x1>
     5f6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <temp>
	
	// display
	gl_loc_to_display();
     5fa:	a1 de       	rcall	.-702    	; 0x33e <gl_loc_to_display>
}
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	ff 90       	pop	r15
     60a:	ef 90       	pop	r14
     60c:	df 90       	pop	r13
     60e:	cf 90       	pop	r12
     610:	08 95       	ret

00000612 <main>:
}
*/

int main( void )
{
	displayInit();	
     612:	f1 dd       	rcall	.-1054   	; 0x1f6 <displayInit>
	displayClr();
     614:	a8 dd       	rcall	.-1200   	; 0x166 <displayClr>
	display();
     616:	f3 dd       	rcall	.-1050   	; 0x1fe <display>
     618:	bf de       	rcall	.-642    	; 0x398 <gl_restart>
	EIMSK = 0b1111;			// Enable INT1 & INT2
		
	sei();
	*/
	
	gl_restart();
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	87 bb       	out	0x17, r24	; 23
	
	DDRB = 0xFF;
     61e:	8a bb       	out	0x1a, r24	; 26
	DDRA = 0xFF;	
     620:	84 ef       	ldi	r24, 0xF4	; 244
	
	while(1) {
		wait(500);
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	e8 d0       	rcall	.+464    	; 0x7f6 <wait>
     626:	cd 9b       	sbis	0x19, 5	; 25
		if (PINA & BIT(5))
     628:	03 c0       	rjmp	.+6      	; 0x630 <main+0x1e>
     62a:	82 e0       	ldi	r24, 0x02	; 2
			gl_change_direction(RIGHT);
     62c:	07 de       	rcall	.-1010   	; 0x23c <gl_change_direction>
     62e:	0e c0       	rjmp	.+28     	; 0x64c <main+0x3a>
     630:	ce 9b       	sbis	0x19, 6	; 25
		else if (PINA & BIT(6))
     632:	03 c0       	rjmp	.+6      	; 0x63a <main+0x28>
     634:	83 e0       	ldi	r24, 0x03	; 3
			gl_change_direction(DOWN);
     636:	02 de       	rcall	.-1020   	; 0x23c <gl_change_direction>
     638:	09 c0       	rjmp	.+18     	; 0x64c <main+0x3a>
     63a:	cf 9b       	sbis	0x19, 7	; 25
		else if (PINA & BIT(7))
     63c:	03 c0       	rjmp	.+6      	; 0x644 <main+0x32>
			gl_change_direction(LEFT);
     63e:	84 e0       	ldi	r24, 0x04	; 4
     640:	fd dd       	rcall	.-1030   	; 0x23c <gl_change_direction>
     642:	04 c0       	rjmp	.+8      	; 0x64c <main+0x3a>
		else if (PINB & BIT(6))
     644:	b6 9b       	sbis	0x16, 6	; 22
     646:	02 c0       	rjmp	.+4      	; 0x64c <main+0x3a>
			gl_change_direction(UP);
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	f8 dd       	rcall	.-1040   	; 0x23c <gl_change_direction>
     64c:	f0 de       	rcall	.-544    	; 0x42e <gl_gamestep>
		
		gl_gamestep();
     64e:	e8 cf       	rjmp	.-48     	; 0x620 <main+0xe>

00000650 <spi_masterInit>:
     650:	8f ef       	ldi	r24, 0xFF	; 255
	}
     652:	87 bb       	out	0x17, r24	; 23
void displayOff()
{
	spi_slaveSelect(0); // Select display chip
	spi_write(0x0C); // Register 0B: Shutdown register
	spi_write(0x00); // -> 1 = Normal operation
	spi_slaveDeSelect(0); // Deselect display chip
     654:	bb 98       	cbi	0x17, 3	; 23
     656:	c0 9a       	sbi	0x18, 0	; 24
     658:	82 e5       	ldi	r24, 0x52	; 82
     65a:	8d b9       	out	0x0d, r24	; 13
     65c:	08 95       	ret

0000065e <spi_write>:
     65e:	8f b9       	out	0x0f, r24	; 15
     660:	77 9b       	sbis	0x0e, 7	; 14
     662:	fe cf       	rjmp	.-4      	; 0x660 <spi_write+0x2>
     664:	08 95       	ret

00000666 <spi_slaveSelect>:
     666:	98 b3       	in	r25, 0x18	; 24
     668:	21 e0       	ldi	r18, 0x01	; 1
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	02 c0       	rjmp	.+4      	; 0x672 <spi_slaveSelect+0xc>
     66e:	22 0f       	add	r18, r18
     670:	33 1f       	adc	r19, r19
     672:	8a 95       	dec	r24
     674:	e2 f7       	brpl	.-8      	; 0x66e <spi_slaveSelect+0x8>
     676:	20 95       	com	r18
     678:	29 23       	and	r18, r25
     67a:	28 bb       	out	0x18, r18	; 24
     67c:	08 95       	ret

0000067e <spi_slaveDeSelect>:
     67e:	98 b3       	in	r25, 0x18	; 24
     680:	21 e0       	ldi	r18, 0x01	; 1
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	02 c0       	rjmp	.+4      	; 0x68a <spi_slaveDeSelect+0xc>
     686:	22 0f       	add	r18, r18
     688:	33 1f       	adc	r19, r19
     68a:	8a 95       	dec	r24
     68c:	e2 f7       	brpl	.-8      	; 0x686 <spi_slaveDeSelect+0x8>
     68e:	29 2b       	or	r18, r25
     690:	28 bb       	out	0x18, r18	; 24
     692:	08 95       	ret

00000694 <displayDriverInit>:
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	e7 df       	rcall	.-50     	; 0x666 <spi_slaveSelect>
     698:	89 e0       	ldi	r24, 0x09	; 9
     69a:	e1 df       	rcall	.-62     	; 0x65e <spi_write>
     69c:	8f e0       	ldi	r24, 0x0F	; 15
     69e:	df df       	rcall	.-66     	; 0x65e <spi_write>
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	ed df       	rcall	.-38     	; 0x67e <spi_slaveDeSelect>
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	df df       	rcall	.-66     	; 0x666 <spi_slaveSelect>
     6a8:	8a e0       	ldi	r24, 0x0A	; 10
     6aa:	d9 df       	rcall	.-78     	; 0x65e <spi_write>
     6ac:	84 e0       	ldi	r24, 0x04	; 4
     6ae:	d7 df       	rcall	.-82     	; 0x65e <spi_write>
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	e5 df       	rcall	.-54     	; 0x67e <spi_slaveDeSelect>
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	d7 df       	rcall	.-82     	; 0x666 <spi_slaveSelect>
     6b8:	8b e0       	ldi	r24, 0x0B	; 11
     6ba:	d1 df       	rcall	.-94     	; 0x65e <spi_write>
     6bc:	83 e0       	ldi	r24, 0x03	; 3
     6be:	cf df       	rcall	.-98     	; 0x65e <spi_write>
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	dd df       	rcall	.-70     	; 0x67e <spi_slaveDeSelect>
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	cf df       	rcall	.-98     	; 0x666 <spi_slaveSelect>
     6c8:	8c e0       	ldi	r24, 0x0C	; 12
     6ca:	c9 df       	rcall	.-110    	; 0x65e <spi_write>
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	c7 df       	rcall	.-114    	; 0x65e <spi_write>
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	d5 cf       	rjmp	.-86     	; 0x67e <spi_slaveDeSelect>
     6d4:	08 95       	ret

000006d6 <spi_writeWord>:
}

void spi_writeWord(unsigned char address, unsigned char data)
{
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	d8 2f       	mov	r29, r24
     6dc:	c6 2f       	mov	r28, r22
	spi_slaveSelect(0);
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	c2 df       	rcall	.-124    	; 0x666 <spi_slaveSelect>
	spi_write(address);
     6e2:	8d 2f       	mov	r24, r29
     6e4:	bc df       	rcall	.-136    	; 0x65e <spi_write>
	spi_write(data);
     6e6:	8c 2f       	mov	r24, r28
     6e8:	ba df       	rcall	.-140    	; 0x65e <spi_write>
	spi_slaveDeSelect(0);
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	c8 df       	rcall	.-112    	; 0x67e <spi_slaveDeSelect>
     6ee:	df 91       	pop	r29
}
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <emptyDisplay>:
     6f4:	cf 93       	push	r28

void emptyDisplay()
{
     6f6:	c1 e0       	ldi	r28, 0x01	; 1
	for (int i = 1; i <=4; i++)
	spi_writeWord(i, 0xF);
     6f8:	6f e0       	ldi	r22, 0x0F	; 15
     6fa:	8c 2f       	mov	r24, r28
     6fc:	ec df       	rcall	.-40     	; 0x6d6 <spi_writeWord>
     6fe:	cf 5f       	subi	r28, 0xFF	; 255
	spi_slaveDeSelect(0);
}

void emptyDisplay()
{
	for (int i = 1; i <=4; i++)
     700:	c5 30       	cpi	r28, 0x05	; 5
     702:	d1 f7       	brne	.-12     	; 0x6f8 <emptyDisplay+0x4>
	spi_writeWord(i, 0xF);
}
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <writeLedDisplay>:

void writeLedDisplay(int value)
{
     708:	af 92       	push	r10
     70a:	bf 92       	push	r11
     70c:	cf 92       	push	r12
     70e:	df 92       	push	r13
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	89 31       	cpi	r24, 0x19	; 25
     71e:	2c ef       	ldi	r18, 0xFC	; 252
     720:	92 07       	cpc	r25, r18
     722:	14 f4       	brge	.+4      	; 0x728 <writeLedDisplay+0x20>
     724:	89 e1       	ldi	r24, 0x19	; 25
     726:	9c ef       	ldi	r25, 0xFC	; 252
     728:	ec 01       	movw	r28, r24
     72a:	c0 31       	cpi	r28, 0x10	; 16
     72c:	87 e2       	ldi	r24, 0x27	; 39
     72e:	d8 07       	cpc	r29, r24
     730:	14 f0       	brlt	.+4      	; 0x736 <writeLedDisplay+0x2e>
     732:	cf e0       	ldi	r28, 0x0F	; 15
     734:	d7 e2       	ldi	r29, 0x27	; 39
	if (value > 9999)
	value = 9999;
	else if (value < -999)
	value = -999;
	
	if (value >= 0)
     736:	dd 23       	and	r29, r29
     738:	3c f1       	brlt	.+78     	; 0x788 <writeLedDisplay+0x80>
	{
		int length = (int) log10(value) + 1;
     73a:	be 01       	movw	r22, r28
     73c:	0d 2e       	mov	r0, r29
     73e:	00 0c       	add	r0, r0
     740:	88 0b       	sbc	r24, r24
     742:	99 0b       	sbc	r25, r25
     744:	9c d0       	rcall	.+312    	; 0x87e <__floatsisf>
     746:	ff d0       	rcall	.+510    	; 0x946 <log10>
     748:	67 d0       	rcall	.+206    	; 0x818 <__fixsfsi>
     74a:	6b 01       	movw	r12, r22
     74c:	2f ef       	ldi	r18, 0xFF	; 255
     74e:	c2 1a       	sub	r12, r18
     750:	d2 0a       	sbc	r13, r18
		for (int i = 1; i <= length; i++)
     752:	1c 14       	cp	r1, r12
     754:	1d 04       	cpc	r1, r13
     756:	0c f0       	brlt	.+2      	; 0x75a <writeLedDisplay+0x52>
     758:	43 c0       	rjmp	.+134    	; 0x7e0 <writeLedDisplay+0xd8>
     75a:	01 e0       	ldi	r16, 0x01	; 1
     75c:	10 e0       	ldi	r17, 0x00	; 0
		{
			spi_writeWord(i, value % 10);
     75e:	0f 2e       	mov	r0, r31
     760:	fa e0       	ldi	r31, 0x0A	; 10
     762:	af 2e       	mov	r10, r31
     764:	b1 2c       	mov	r11, r1
     766:	f0 2d       	mov	r31, r0
     768:	ce 01       	movw	r24, r28
     76a:	b5 01       	movw	r22, r10
     76c:	5a d2       	rcall	.+1204   	; 0xc22 <__divmodhi4>
     76e:	e6 2e       	mov	r14, r22
     770:	f7 2e       	mov	r15, r23
     772:	68 2f       	mov	r22, r24
     774:	80 2f       	mov	r24, r16
     776:	af df       	rcall	.-162    	; 0x6d6 <spi_writeWord>
			value /= 10;
     778:	ce 2d       	mov	r28, r14
     77a:	df 2d       	mov	r29, r15
	value = -999;
	
	if (value >= 0)
	{
		int length = (int) log10(value) + 1;
		for (int i = 1; i <= length; i++)
     77c:	0f 5f       	subi	r16, 0xFF	; 255
     77e:	1f 4f       	sbci	r17, 0xFF	; 255
     780:	c0 16       	cp	r12, r16
     782:	d1 06       	cpc	r13, r17
     784:	8c f7       	brge	.-30     	; 0x768 <writeLedDisplay+0x60>
     786:	2c c0       	rjmp	.+88     	; 0x7e0 <writeLedDisplay+0xd8>
			value /= 10;
		}
	}
	else
	{
		value = -value;
     788:	d1 95       	neg	r29
     78a:	c1 95       	neg	r28
     78c:	d1 09       	sbc	r29, r1
		int length = (int) log10(value) + 1;
     78e:	be 01       	movw	r22, r28
     790:	0d 2e       	mov	r0, r29
     792:	00 0c       	add	r0, r0
     794:	88 0b       	sbc	r24, r24
     796:	99 0b       	sbc	r25, r25
     798:	72 d0       	rcall	.+228    	; 0x87e <__floatsisf>
     79a:	d5 d0       	rcall	.+426    	; 0x946 <log10>
     79c:	3d d0       	rcall	.+122    	; 0x818 <__fixsfsi>
     79e:	6b 01       	movw	r12, r22
     7a0:	2f ef       	ldi	r18, 0xFF	; 255
     7a2:	c2 1a       	sub	r12, r18
		spi_writeWord(length + 1, 10);
     7a4:	d2 0a       	sbc	r13, r18
     7a6:	6a e0       	ldi	r22, 0x0A	; 10
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	8c 0d       	add	r24, r12
     7ac:	94 df       	rcall	.-216    	; 0x6d6 <spi_writeWord>
		for (int i = 1; i <= length; i++)
     7ae:	1c 14       	cp	r1, r12
     7b0:	1d 04       	cpc	r1, r13
     7b2:	b4 f4       	brge	.+44     	; 0x7e0 <writeLedDisplay+0xd8>
     7b4:	01 e0       	ldi	r16, 0x01	; 1
		{
			spi_writeWord(i, value % 10);
     7b6:	10 e0       	ldi	r17, 0x00	; 0
     7b8:	0f 2e       	mov	r0, r31
     7ba:	fa e0       	ldi	r31, 0x0A	; 10
     7bc:	af 2e       	mov	r10, r31
     7be:	b1 2c       	mov	r11, r1
     7c0:	f0 2d       	mov	r31, r0
     7c2:	ce 01       	movw	r24, r28
     7c4:	b5 01       	movw	r22, r10
     7c6:	2d d2       	rcall	.+1114   	; 0xc22 <__divmodhi4>
     7c8:	e6 2e       	mov	r14, r22
     7ca:	f7 2e       	mov	r15, r23
     7cc:	68 2f       	mov	r22, r24
     7ce:	80 2f       	mov	r24, r16
     7d0:	82 df       	rcall	.-252    	; 0x6d6 <spi_writeWord>
			value /= 10;
     7d2:	ce 2d       	mov	r28, r14
     7d4:	df 2d       	mov	r29, r15
	else
	{
		value = -value;
		int length = (int) log10(value) + 1;
		spi_writeWord(length + 1, 10);
		for (int i = 1; i <= length; i++)
     7d6:	0f 5f       	subi	r16, 0xFF	; 255
     7d8:	1f 4f       	sbci	r17, 0xFF	; 255
     7da:	c0 16       	cp	r12, r16
     7dc:	d1 06       	cpc	r13, r17
     7de:	8c f7       	brge	.-30     	; 0x7c2 <writeLedDisplay+0xba>
			spi_writeWord(i, value % 10);
			value /= 10;
		}
	}
	
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	ff 90       	pop	r15
     7ea:	ef 90       	pop	r14
     7ec:	df 90       	pop	r13
     7ee:	cf 90       	pop	r12
     7f0:	bf 90       	pop	r11
     7f2:	af 90       	pop	r10
     7f4:	08 95       	ret

000007f6 <wait>:
 */ 
#include "toolbox.h"

void wait( int ms )
{
	for (int i=0; i<ms; i++)
     7f6:	18 16       	cp	r1, r24
     7f8:	19 06       	cpc	r1, r25
     7fa:	6c f4       	brge	.+26     	; 0x816 <wait+0x20>
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     800:	ef ec       	ldi	r30, 0xCF	; 207
     802:	f7 e0       	ldi	r31, 0x07	; 7
     804:	31 97       	sbiw	r30, 0x01	; 1
     806:	f1 f7       	brne	.-4      	; 0x804 <wait+0xe>
     808:	00 c0       	rjmp	.+0      	; 0x80a <wait+0x14>
     80a:	00 00       	nop
     80c:	2f 5f       	subi	r18, 0xFF	; 255
     80e:	3f 4f       	sbci	r19, 0xFF	; 255
     810:	82 17       	cp	r24, r18
     812:	93 07       	cpc	r25, r19
     814:	a9 f7       	brne	.-22     	; 0x800 <wait+0xa>
     816:	08 95       	ret

00000818 <__fixsfsi>:
     818:	04 d0       	rcall	.+8      	; 0x822 <__fixunssfsi>
     81a:	68 94       	set
     81c:	b1 11       	cpse	r27, r1
     81e:	8d c0       	rjmp	.+282    	; 0x93a <__fp_szero>
     820:	08 95       	ret

00000822 <__fixunssfsi>:
     822:	70 d0       	rcall	.+224    	; 0x904 <__fp_splitA>
     824:	88 f0       	brcs	.+34     	; 0x848 <__fixunssfsi+0x26>
     826:	9f 57       	subi	r25, 0x7F	; 127
     828:	90 f0       	brcs	.+36     	; 0x84e <__fixunssfsi+0x2c>
     82a:	b9 2f       	mov	r27, r25
     82c:	99 27       	eor	r25, r25
     82e:	b7 51       	subi	r27, 0x17	; 23
     830:	a0 f0       	brcs	.+40     	; 0x85a <__fixunssfsi+0x38>
     832:	d1 f0       	breq	.+52     	; 0x868 <__fixunssfsi+0x46>
     834:	66 0f       	add	r22, r22
     836:	77 1f       	adc	r23, r23
     838:	88 1f       	adc	r24, r24
     83a:	99 1f       	adc	r25, r25
     83c:	1a f0       	brmi	.+6      	; 0x844 <__fixunssfsi+0x22>
     83e:	ba 95       	dec	r27
     840:	c9 f7       	brne	.-14     	; 0x834 <__fixunssfsi+0x12>
     842:	12 c0       	rjmp	.+36     	; 0x868 <__fixunssfsi+0x46>
     844:	b1 30       	cpi	r27, 0x01	; 1
     846:	81 f0       	breq	.+32     	; 0x868 <__fixunssfsi+0x46>
     848:	77 d0       	rcall	.+238    	; 0x938 <__fp_zero>
     84a:	b1 e0       	ldi	r27, 0x01	; 1
     84c:	08 95       	ret
     84e:	74 c0       	rjmp	.+232    	; 0x938 <__fp_zero>
     850:	67 2f       	mov	r22, r23
     852:	78 2f       	mov	r23, r24
     854:	88 27       	eor	r24, r24
     856:	b8 5f       	subi	r27, 0xF8	; 248
     858:	39 f0       	breq	.+14     	; 0x868 <__fixunssfsi+0x46>
     85a:	b9 3f       	cpi	r27, 0xF9	; 249
     85c:	cc f3       	brlt	.-14     	; 0x850 <__fixunssfsi+0x2e>
     85e:	86 95       	lsr	r24
     860:	77 95       	ror	r23
     862:	67 95       	ror	r22
     864:	b3 95       	inc	r27
     866:	d9 f7       	brne	.-10     	; 0x85e <__fixunssfsi+0x3c>
     868:	3e f4       	brtc	.+14     	; 0x878 <__fixunssfsi+0x56>
     86a:	90 95       	com	r25
     86c:	80 95       	com	r24
     86e:	70 95       	com	r23
     870:	61 95       	neg	r22
     872:	7f 4f       	sbci	r23, 0xFF	; 255
     874:	8f 4f       	sbci	r24, 0xFF	; 255
     876:	9f 4f       	sbci	r25, 0xFF	; 255
     878:	08 95       	ret

0000087a <__floatunsisf>:
     87a:	e8 94       	clt
     87c:	09 c0       	rjmp	.+18     	; 0x890 <__floatsisf+0x12>

0000087e <__floatsisf>:
     87e:	97 fb       	bst	r25, 7
     880:	3e f4       	brtc	.+14     	; 0x890 <__floatsisf+0x12>
     882:	90 95       	com	r25
     884:	80 95       	com	r24
     886:	70 95       	com	r23
     888:	61 95       	neg	r22
     88a:	7f 4f       	sbci	r23, 0xFF	; 255
     88c:	8f 4f       	sbci	r24, 0xFF	; 255
     88e:	9f 4f       	sbci	r25, 0xFF	; 255
     890:	99 23       	and	r25, r25
     892:	a9 f0       	breq	.+42     	; 0x8be <__floatsisf+0x40>
     894:	f9 2f       	mov	r31, r25
     896:	96 e9       	ldi	r25, 0x96	; 150
     898:	bb 27       	eor	r27, r27
     89a:	93 95       	inc	r25
     89c:	f6 95       	lsr	r31
     89e:	87 95       	ror	r24
     8a0:	77 95       	ror	r23
     8a2:	67 95       	ror	r22
     8a4:	b7 95       	ror	r27
     8a6:	f1 11       	cpse	r31, r1
     8a8:	f8 cf       	rjmp	.-16     	; 0x89a <__floatsisf+0x1c>
     8aa:	fa f4       	brpl	.+62     	; 0x8ea <__floatsisf+0x6c>
     8ac:	bb 0f       	add	r27, r27
     8ae:	11 f4       	brne	.+4      	; 0x8b4 <__floatsisf+0x36>
     8b0:	60 ff       	sbrs	r22, 0
     8b2:	1b c0       	rjmp	.+54     	; 0x8ea <__floatsisf+0x6c>
     8b4:	6f 5f       	subi	r22, 0xFF	; 255
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	8f 4f       	sbci	r24, 0xFF	; 255
     8ba:	9f 4f       	sbci	r25, 0xFF	; 255
     8bc:	16 c0       	rjmp	.+44     	; 0x8ea <__floatsisf+0x6c>
     8be:	88 23       	and	r24, r24
     8c0:	11 f0       	breq	.+4      	; 0x8c6 <__floatsisf+0x48>
     8c2:	96 e9       	ldi	r25, 0x96	; 150
     8c4:	11 c0       	rjmp	.+34     	; 0x8e8 <__floatsisf+0x6a>
     8c6:	77 23       	and	r23, r23
     8c8:	21 f0       	breq	.+8      	; 0x8d2 <__floatsisf+0x54>
     8ca:	9e e8       	ldi	r25, 0x8E	; 142
     8cc:	87 2f       	mov	r24, r23
     8ce:	76 2f       	mov	r23, r22
     8d0:	05 c0       	rjmp	.+10     	; 0x8dc <__floatsisf+0x5e>
     8d2:	66 23       	and	r22, r22
     8d4:	71 f0       	breq	.+28     	; 0x8f2 <__floatsisf+0x74>
     8d6:	96 e8       	ldi	r25, 0x86	; 134
     8d8:	86 2f       	mov	r24, r22
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	2a f0       	brmi	.+10     	; 0x8ea <__floatsisf+0x6c>
     8e0:	9a 95       	dec	r25
     8e2:	66 0f       	add	r22, r22
     8e4:	77 1f       	adc	r23, r23
     8e6:	88 1f       	adc	r24, r24
     8e8:	da f7       	brpl	.-10     	; 0x8e0 <__floatsisf+0x62>
     8ea:	88 0f       	add	r24, r24
     8ec:	96 95       	lsr	r25
     8ee:	87 95       	ror	r24
     8f0:	97 f9       	bld	r25, 7
     8f2:	08 95       	ret

000008f4 <__fp_split3>:
     8f4:	57 fd       	sbrc	r21, 7
     8f6:	90 58       	subi	r25, 0x80	; 128
     8f8:	44 0f       	add	r20, r20
     8fa:	55 1f       	adc	r21, r21
     8fc:	59 f0       	breq	.+22     	; 0x914 <__fp_splitA+0x10>
     8fe:	5f 3f       	cpi	r21, 0xFF	; 255
     900:	71 f0       	breq	.+28     	; 0x91e <__fp_splitA+0x1a>
     902:	47 95       	ror	r20

00000904 <__fp_splitA>:
     904:	88 0f       	add	r24, r24
     906:	97 fb       	bst	r25, 7
     908:	99 1f       	adc	r25, r25
     90a:	61 f0       	breq	.+24     	; 0x924 <__fp_splitA+0x20>
     90c:	9f 3f       	cpi	r25, 0xFF	; 255
     90e:	79 f0       	breq	.+30     	; 0x92e <__fp_splitA+0x2a>
     910:	87 95       	ror	r24
     912:	08 95       	ret
     914:	12 16       	cp	r1, r18
     916:	13 06       	cpc	r1, r19
     918:	14 06       	cpc	r1, r20
     91a:	55 1f       	adc	r21, r21
     91c:	f2 cf       	rjmp	.-28     	; 0x902 <__fp_split3+0xe>
     91e:	46 95       	lsr	r20
     920:	f1 df       	rcall	.-30     	; 0x904 <__fp_splitA>
     922:	08 c0       	rjmp	.+16     	; 0x934 <__fp_splitA+0x30>
     924:	16 16       	cp	r1, r22
     926:	17 06       	cpc	r1, r23
     928:	18 06       	cpc	r1, r24
     92a:	99 1f       	adc	r25, r25
     92c:	f1 cf       	rjmp	.-30     	; 0x910 <__fp_splitA+0xc>
     92e:	86 95       	lsr	r24
     930:	71 05       	cpc	r23, r1
     932:	61 05       	cpc	r22, r1
     934:	08 94       	sec
     936:	08 95       	ret

00000938 <__fp_zero>:
     938:	e8 94       	clt

0000093a <__fp_szero>:
     93a:	bb 27       	eor	r27, r27
     93c:	66 27       	eor	r22, r22
     93e:	77 27       	eor	r23, r23
     940:	cb 01       	movw	r24, r22
     942:	97 f9       	bld	r25, 7
     944:	08 95       	ret

00000946 <log10>:
     946:	0a d0       	rcall	.+20     	; 0x95c <log>
     948:	29 ed       	ldi	r18, 0xD9	; 217
     94a:	3b e5       	ldi	r19, 0x5B	; 91
     94c:	4e ed       	ldi	r20, 0xDE	; 222
     94e:	5e e3       	ldi	r21, 0x3E	; 62
     950:	45 c0       	rjmp	.+138    	; 0x9dc <__mulsf3>
     952:	0e f0       	brts	.+2      	; 0x956 <log10+0x10>
     954:	11 c1       	rjmp	.+546    	; 0xb78 <__fp_mpack>
     956:	1e c1       	rjmp	.+572    	; 0xb94 <__fp_nan>
     958:	68 94       	set
     95a:	08 c1       	rjmp	.+528    	; 0xb6c <__fp_inf>

0000095c <log>:
     95c:	d3 df       	rcall	.-90     	; 0x904 <__fp_splitA>
     95e:	c8 f3       	brcs	.-14     	; 0x952 <log10+0xc>
     960:	99 23       	and	r25, r25
     962:	d1 f3       	breq	.-12     	; 0x958 <log10+0x12>
     964:	c6 f3       	brts	.-16     	; 0x956 <log10+0x10>
     966:	df 93       	push	r29
     968:	cf 93       	push	r28
     96a:	1f 93       	push	r17
     96c:	0f 93       	push	r16
     96e:	ff 92       	push	r15
     970:	c9 2f       	mov	r28, r25
     972:	dd 27       	eor	r29, r29
     974:	88 23       	and	r24, r24
     976:	2a f0       	brmi	.+10     	; 0x982 <log+0x26>
     978:	21 97       	sbiw	r28, 0x01	; 1
     97a:	66 0f       	add	r22, r22
     97c:	77 1f       	adc	r23, r23
     97e:	88 1f       	adc	r24, r24
     980:	da f7       	brpl	.-10     	; 0x978 <log+0x1c>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	40 e8       	ldi	r20, 0x80	; 128
     988:	5f eb       	ldi	r21, 0xBF	; 191
     98a:	9f e3       	ldi	r25, 0x3F	; 63
     98c:	88 39       	cpi	r24, 0x98	; 152
     98e:	20 f0       	brcs	.+8      	; 0x998 <log+0x3c>
     990:	80 3e       	cpi	r24, 0xE0	; 224
     992:	30 f0       	brcs	.+12     	; 0x9a0 <log+0x44>
     994:	21 96       	adiw	r28, 0x01	; 1
     996:	8f 77       	andi	r24, 0x7F	; 127
     998:	85 d0       	rcall	.+266    	; 0xaa4 <__addsf3>
     99a:	ec e8       	ldi	r30, 0x8C	; 140
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	03 c0       	rjmp	.+6      	; 0x9a6 <log+0x4a>
     9a0:	81 d0       	rcall	.+258    	; 0xaa4 <__addsf3>
     9a2:	e9 eb       	ldi	r30, 0xB9	; 185
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	f9 d0       	rcall	.+498    	; 0xb9a <__fp_powser>
     9a8:	8b 01       	movw	r16, r22
     9aa:	be 01       	movw	r22, r28
     9ac:	ec 01       	movw	r28, r24
     9ae:	fb 2e       	mov	r15, r27
     9b0:	6f 57       	subi	r22, 0x7F	; 127
     9b2:	71 09       	sbc	r23, r1
     9b4:	75 95       	asr	r23
     9b6:	77 1f       	adc	r23, r23
     9b8:	88 0b       	sbc	r24, r24
     9ba:	99 0b       	sbc	r25, r25
     9bc:	60 df       	rcall	.-320    	; 0x87e <__floatsisf>
     9be:	28 e1       	ldi	r18, 0x18	; 24
     9c0:	32 e7       	ldi	r19, 0x72	; 114
     9c2:	41 e3       	ldi	r20, 0x31	; 49
     9c4:	5f e3       	ldi	r21, 0x3F	; 63
     9c6:	16 d0       	rcall	.+44     	; 0x9f4 <__mulsf3x>
     9c8:	af 2d       	mov	r26, r15
     9ca:	98 01       	movw	r18, r16
     9cc:	ae 01       	movw	r20, r28
     9ce:	ff 90       	pop	r15
     9d0:	0f 91       	pop	r16
     9d2:	1f 91       	pop	r17
     9d4:	cf 91       	pop	r28
     9d6:	df 91       	pop	r29
     9d8:	76 d0       	rcall	.+236    	; 0xac6 <__addsf3x>
     9da:	12 c1       	rjmp	.+548    	; 0xc00 <__fp_round>

000009dc <__mulsf3>:
     9dc:	0b d0       	rcall	.+22     	; 0x9f4 <__mulsf3x>
     9de:	10 c1       	rjmp	.+544    	; 0xc00 <__fp_round>
     9e0:	01 d1       	rcall	.+514    	; 0xbe4 <__fp_pscA>
     9e2:	28 f0       	brcs	.+10     	; 0x9ee <__mulsf3+0x12>
     9e4:	06 d1       	rcall	.+524    	; 0xbf2 <__fp_pscB>
     9e6:	18 f0       	brcs	.+6      	; 0x9ee <__mulsf3+0x12>
     9e8:	95 23       	and	r25, r21
     9ea:	09 f0       	breq	.+2      	; 0x9ee <__mulsf3+0x12>
     9ec:	bf c0       	rjmp	.+382    	; 0xb6c <__fp_inf>
     9ee:	d2 c0       	rjmp	.+420    	; 0xb94 <__fp_nan>
     9f0:	11 24       	eor	r1, r1
     9f2:	a3 cf       	rjmp	.-186    	; 0x93a <__fp_szero>

000009f4 <__mulsf3x>:
     9f4:	7f df       	rcall	.-258    	; 0x8f4 <__fp_split3>
     9f6:	a0 f3       	brcs	.-24     	; 0x9e0 <__mulsf3+0x4>

000009f8 <__mulsf3_pse>:
     9f8:	95 9f       	mul	r25, r21
     9fa:	d1 f3       	breq	.-12     	; 0x9f0 <__mulsf3+0x14>
     9fc:	95 0f       	add	r25, r21
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	55 1f       	adc	r21, r21
     a02:	62 9f       	mul	r22, r18
     a04:	f0 01       	movw	r30, r0
     a06:	72 9f       	mul	r23, r18
     a08:	bb 27       	eor	r27, r27
     a0a:	f0 0d       	add	r31, r0
     a0c:	b1 1d       	adc	r27, r1
     a0e:	63 9f       	mul	r22, r19
     a10:	aa 27       	eor	r26, r26
     a12:	f0 0d       	add	r31, r0
     a14:	b1 1d       	adc	r27, r1
     a16:	aa 1f       	adc	r26, r26
     a18:	64 9f       	mul	r22, r20
     a1a:	66 27       	eor	r22, r22
     a1c:	b0 0d       	add	r27, r0
     a1e:	a1 1d       	adc	r26, r1
     a20:	66 1f       	adc	r22, r22
     a22:	82 9f       	mul	r24, r18
     a24:	22 27       	eor	r18, r18
     a26:	b0 0d       	add	r27, r0
     a28:	a1 1d       	adc	r26, r1
     a2a:	62 1f       	adc	r22, r18
     a2c:	73 9f       	mul	r23, r19
     a2e:	b0 0d       	add	r27, r0
     a30:	a1 1d       	adc	r26, r1
     a32:	62 1f       	adc	r22, r18
     a34:	83 9f       	mul	r24, r19
     a36:	a0 0d       	add	r26, r0
     a38:	61 1d       	adc	r22, r1
     a3a:	22 1f       	adc	r18, r18
     a3c:	74 9f       	mul	r23, r20
     a3e:	33 27       	eor	r19, r19
     a40:	a0 0d       	add	r26, r0
     a42:	61 1d       	adc	r22, r1
     a44:	23 1f       	adc	r18, r19
     a46:	84 9f       	mul	r24, r20
     a48:	60 0d       	add	r22, r0
     a4a:	21 1d       	adc	r18, r1
     a4c:	82 2f       	mov	r24, r18
     a4e:	76 2f       	mov	r23, r22
     a50:	6a 2f       	mov	r22, r26
     a52:	11 24       	eor	r1, r1
     a54:	9f 57       	subi	r25, 0x7F	; 127
     a56:	50 40       	sbci	r21, 0x00	; 0
     a58:	8a f0       	brmi	.+34     	; 0xa7c <__mulsf3_pse+0x84>
     a5a:	e1 f0       	breq	.+56     	; 0xa94 <__mulsf3_pse+0x9c>
     a5c:	88 23       	and	r24, r24
     a5e:	4a f0       	brmi	.+18     	; 0xa72 <__mulsf3_pse+0x7a>
     a60:	ee 0f       	add	r30, r30
     a62:	ff 1f       	adc	r31, r31
     a64:	bb 1f       	adc	r27, r27
     a66:	66 1f       	adc	r22, r22
     a68:	77 1f       	adc	r23, r23
     a6a:	88 1f       	adc	r24, r24
     a6c:	91 50       	subi	r25, 0x01	; 1
     a6e:	50 40       	sbci	r21, 0x00	; 0
     a70:	a9 f7       	brne	.-22     	; 0xa5c <__mulsf3_pse+0x64>
     a72:	9e 3f       	cpi	r25, 0xFE	; 254
     a74:	51 05       	cpc	r21, r1
     a76:	70 f0       	brcs	.+28     	; 0xa94 <__mulsf3_pse+0x9c>
     a78:	79 c0       	rjmp	.+242    	; 0xb6c <__fp_inf>
     a7a:	5f cf       	rjmp	.-322    	; 0x93a <__fp_szero>
     a7c:	5f 3f       	cpi	r21, 0xFF	; 255
     a7e:	ec f3       	brlt	.-6      	; 0xa7a <__mulsf3_pse+0x82>
     a80:	98 3e       	cpi	r25, 0xE8	; 232
     a82:	dc f3       	brlt	.-10     	; 0xa7a <__mulsf3_pse+0x82>
     a84:	86 95       	lsr	r24
     a86:	77 95       	ror	r23
     a88:	67 95       	ror	r22
     a8a:	b7 95       	ror	r27
     a8c:	f7 95       	ror	r31
     a8e:	e7 95       	ror	r30
     a90:	9f 5f       	subi	r25, 0xFF	; 255
     a92:	c1 f7       	brne	.-16     	; 0xa84 <__mulsf3_pse+0x8c>
     a94:	fe 2b       	or	r31, r30
     a96:	88 0f       	add	r24, r24
     a98:	91 1d       	adc	r25, r1
     a9a:	96 95       	lsr	r25
     a9c:	87 95       	ror	r24
     a9e:	97 f9       	bld	r25, 7
     aa0:	08 95       	ret

00000aa2 <__subsf3>:
     aa2:	50 58       	subi	r21, 0x80	; 128

00000aa4 <__addsf3>:
     aa4:	bb 27       	eor	r27, r27
     aa6:	aa 27       	eor	r26, r26
     aa8:	0e d0       	rcall	.+28     	; 0xac6 <__addsf3x>
     aaa:	aa c0       	rjmp	.+340    	; 0xc00 <__fp_round>
     aac:	9b d0       	rcall	.+310    	; 0xbe4 <__fp_pscA>
     aae:	30 f0       	brcs	.+12     	; 0xabc <__addsf3+0x18>
     ab0:	a0 d0       	rcall	.+320    	; 0xbf2 <__fp_pscB>
     ab2:	20 f0       	brcs	.+8      	; 0xabc <__addsf3+0x18>
     ab4:	31 f4       	brne	.+12     	; 0xac2 <__addsf3+0x1e>
     ab6:	9f 3f       	cpi	r25, 0xFF	; 255
     ab8:	11 f4       	brne	.+4      	; 0xabe <__addsf3+0x1a>
     aba:	1e f4       	brtc	.+6      	; 0xac2 <__addsf3+0x1e>
     abc:	6b c0       	rjmp	.+214    	; 0xb94 <__fp_nan>
     abe:	0e f4       	brtc	.+2      	; 0xac2 <__addsf3+0x1e>
     ac0:	e0 95       	com	r30
     ac2:	e7 fb       	bst	r30, 7
     ac4:	53 c0       	rjmp	.+166    	; 0xb6c <__fp_inf>

00000ac6 <__addsf3x>:
     ac6:	e9 2f       	mov	r30, r25
     ac8:	15 df       	rcall	.-470    	; 0x8f4 <__fp_split3>
     aca:	80 f3       	brcs	.-32     	; 0xaac <__addsf3+0x8>
     acc:	ba 17       	cp	r27, r26
     ace:	62 07       	cpc	r22, r18
     ad0:	73 07       	cpc	r23, r19
     ad2:	84 07       	cpc	r24, r20
     ad4:	95 07       	cpc	r25, r21
     ad6:	18 f0       	brcs	.+6      	; 0xade <__addsf3x+0x18>
     ad8:	71 f4       	brne	.+28     	; 0xaf6 <__addsf3x+0x30>
     ada:	9e f5       	brtc	.+102    	; 0xb42 <__addsf3x+0x7c>
     adc:	2d cf       	rjmp	.-422    	; 0x938 <__fp_zero>
     ade:	0e f4       	brtc	.+2      	; 0xae2 <__addsf3x+0x1c>
     ae0:	e0 95       	com	r30
     ae2:	0b 2e       	mov	r0, r27
     ae4:	ba 2f       	mov	r27, r26
     ae6:	a0 2d       	mov	r26, r0
     ae8:	0b 01       	movw	r0, r22
     aea:	b9 01       	movw	r22, r18
     aec:	90 01       	movw	r18, r0
     aee:	0c 01       	movw	r0, r24
     af0:	ca 01       	movw	r24, r20
     af2:	a0 01       	movw	r20, r0
     af4:	11 24       	eor	r1, r1
     af6:	ff 27       	eor	r31, r31
     af8:	59 1b       	sub	r21, r25
     afa:	99 f0       	breq	.+38     	; 0xb22 <__addsf3x+0x5c>
     afc:	59 3f       	cpi	r21, 0xF9	; 249
     afe:	50 f4       	brcc	.+20     	; 0xb14 <__addsf3x+0x4e>
     b00:	50 3e       	cpi	r21, 0xE0	; 224
     b02:	68 f1       	brcs	.+90     	; 0xb5e <__addsf3x+0x98>
     b04:	1a 16       	cp	r1, r26
     b06:	f0 40       	sbci	r31, 0x00	; 0
     b08:	a2 2f       	mov	r26, r18
     b0a:	23 2f       	mov	r18, r19
     b0c:	34 2f       	mov	r19, r20
     b0e:	44 27       	eor	r20, r20
     b10:	58 5f       	subi	r21, 0xF8	; 248
     b12:	f3 cf       	rjmp	.-26     	; 0xafa <__addsf3x+0x34>
     b14:	46 95       	lsr	r20
     b16:	37 95       	ror	r19
     b18:	27 95       	ror	r18
     b1a:	a7 95       	ror	r26
     b1c:	f0 40       	sbci	r31, 0x00	; 0
     b1e:	53 95       	inc	r21
     b20:	c9 f7       	brne	.-14     	; 0xb14 <__addsf3x+0x4e>
     b22:	7e f4       	brtc	.+30     	; 0xb42 <__addsf3x+0x7c>
     b24:	1f 16       	cp	r1, r31
     b26:	ba 0b       	sbc	r27, r26
     b28:	62 0b       	sbc	r22, r18
     b2a:	73 0b       	sbc	r23, r19
     b2c:	84 0b       	sbc	r24, r20
     b2e:	ba f0       	brmi	.+46     	; 0xb5e <__addsf3x+0x98>
     b30:	91 50       	subi	r25, 0x01	; 1
     b32:	a1 f0       	breq	.+40     	; 0xb5c <__addsf3x+0x96>
     b34:	ff 0f       	add	r31, r31
     b36:	bb 1f       	adc	r27, r27
     b38:	66 1f       	adc	r22, r22
     b3a:	77 1f       	adc	r23, r23
     b3c:	88 1f       	adc	r24, r24
     b3e:	c2 f7       	brpl	.-16     	; 0xb30 <__addsf3x+0x6a>
     b40:	0e c0       	rjmp	.+28     	; 0xb5e <__addsf3x+0x98>
     b42:	ba 0f       	add	r27, r26
     b44:	62 1f       	adc	r22, r18
     b46:	73 1f       	adc	r23, r19
     b48:	84 1f       	adc	r24, r20
     b4a:	48 f4       	brcc	.+18     	; 0xb5e <__addsf3x+0x98>
     b4c:	87 95       	ror	r24
     b4e:	77 95       	ror	r23
     b50:	67 95       	ror	r22
     b52:	b7 95       	ror	r27
     b54:	f7 95       	ror	r31
     b56:	9e 3f       	cpi	r25, 0xFE	; 254
     b58:	08 f0       	brcs	.+2      	; 0xb5c <__addsf3x+0x96>
     b5a:	b3 cf       	rjmp	.-154    	; 0xac2 <__addsf3+0x1e>
     b5c:	93 95       	inc	r25
     b5e:	88 0f       	add	r24, r24
     b60:	08 f0       	brcs	.+2      	; 0xb64 <__addsf3x+0x9e>
     b62:	99 27       	eor	r25, r25
     b64:	ee 0f       	add	r30, r30
     b66:	97 95       	ror	r25
     b68:	87 95       	ror	r24
     b6a:	08 95       	ret

00000b6c <__fp_inf>:
     b6c:	97 f9       	bld	r25, 7
     b6e:	9f 67       	ori	r25, 0x7F	; 127
     b70:	80 e8       	ldi	r24, 0x80	; 128
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	08 95       	ret

00000b78 <__fp_mpack>:
     b78:	9f 3f       	cpi	r25, 0xFF	; 255
     b7a:	31 f0       	breq	.+12     	; 0xb88 <__fp_mpack_finite+0xc>

00000b7c <__fp_mpack_finite>:
     b7c:	91 50       	subi	r25, 0x01	; 1
     b7e:	20 f4       	brcc	.+8      	; 0xb88 <__fp_mpack_finite+0xc>
     b80:	87 95       	ror	r24
     b82:	77 95       	ror	r23
     b84:	67 95       	ror	r22
     b86:	b7 95       	ror	r27
     b88:	88 0f       	add	r24, r24
     b8a:	91 1d       	adc	r25, r1
     b8c:	96 95       	lsr	r25
     b8e:	87 95       	ror	r24
     b90:	97 f9       	bld	r25, 7
     b92:	08 95       	ret

00000b94 <__fp_nan>:
     b94:	9f ef       	ldi	r25, 0xFF	; 255
     b96:	80 ec       	ldi	r24, 0xC0	; 192
     b98:	08 95       	ret

00000b9a <__fp_powser>:
     b9a:	df 93       	push	r29
     b9c:	cf 93       	push	r28
     b9e:	1f 93       	push	r17
     ba0:	0f 93       	push	r16
     ba2:	ff 92       	push	r15
     ba4:	ef 92       	push	r14
     ba6:	df 92       	push	r13
     ba8:	7b 01       	movw	r14, r22
     baa:	8c 01       	movw	r16, r24
     bac:	68 94       	set
     bae:	05 c0       	rjmp	.+10     	; 0xbba <__fp_powser+0x20>
     bb0:	da 2e       	mov	r13, r26
     bb2:	ef 01       	movw	r28, r30
     bb4:	1f df       	rcall	.-450    	; 0x9f4 <__mulsf3x>
     bb6:	fe 01       	movw	r30, r28
     bb8:	e8 94       	clt
     bba:	a5 91       	lpm	r26, Z+
     bbc:	25 91       	lpm	r18, Z+
     bbe:	35 91       	lpm	r19, Z+
     bc0:	45 91       	lpm	r20, Z+
     bc2:	55 91       	lpm	r21, Z+
     bc4:	ae f3       	brts	.-22     	; 0xbb0 <__fp_powser+0x16>
     bc6:	ef 01       	movw	r28, r30
     bc8:	7e df       	rcall	.-260    	; 0xac6 <__addsf3x>
     bca:	fe 01       	movw	r30, r28
     bcc:	97 01       	movw	r18, r14
     bce:	a8 01       	movw	r20, r16
     bd0:	da 94       	dec	r13
     bd2:	79 f7       	brne	.-34     	; 0xbb2 <__fp_powser+0x18>
     bd4:	df 90       	pop	r13
     bd6:	ef 90       	pop	r14
     bd8:	ff 90       	pop	r15
     bda:	0f 91       	pop	r16
     bdc:	1f 91       	pop	r17
     bde:	cf 91       	pop	r28
     be0:	df 91       	pop	r29
     be2:	08 95       	ret

00000be4 <__fp_pscA>:
     be4:	00 24       	eor	r0, r0
     be6:	0a 94       	dec	r0
     be8:	16 16       	cp	r1, r22
     bea:	17 06       	cpc	r1, r23
     bec:	18 06       	cpc	r1, r24
     bee:	09 06       	cpc	r0, r25
     bf0:	08 95       	ret

00000bf2 <__fp_pscB>:
     bf2:	00 24       	eor	r0, r0
     bf4:	0a 94       	dec	r0
     bf6:	12 16       	cp	r1, r18
     bf8:	13 06       	cpc	r1, r19
     bfa:	14 06       	cpc	r1, r20
     bfc:	05 06       	cpc	r0, r21
     bfe:	08 95       	ret

00000c00 <__fp_round>:
     c00:	09 2e       	mov	r0, r25
     c02:	03 94       	inc	r0
     c04:	00 0c       	add	r0, r0
     c06:	11 f4       	brne	.+4      	; 0xc0c <__fp_round+0xc>
     c08:	88 23       	and	r24, r24
     c0a:	52 f0       	brmi	.+20     	; 0xc20 <__fp_round+0x20>
     c0c:	bb 0f       	add	r27, r27
     c0e:	40 f4       	brcc	.+16     	; 0xc20 <__fp_round+0x20>
     c10:	bf 2b       	or	r27, r31
     c12:	11 f4       	brne	.+4      	; 0xc18 <__fp_round+0x18>
     c14:	60 ff       	sbrs	r22, 0
     c16:	04 c0       	rjmp	.+8      	; 0xc20 <__fp_round+0x20>
     c18:	6f 5f       	subi	r22, 0xFF	; 255
     c1a:	7f 4f       	sbci	r23, 0xFF	; 255
     c1c:	8f 4f       	sbci	r24, 0xFF	; 255
     c1e:	9f 4f       	sbci	r25, 0xFF	; 255
     c20:	08 95       	ret

00000c22 <__divmodhi4>:
     c22:	97 fb       	bst	r25, 7
     c24:	07 2e       	mov	r0, r23
     c26:	16 f4       	brtc	.+4      	; 0xc2c <__divmodhi4+0xa>
     c28:	00 94       	com	r0
     c2a:	06 d0       	rcall	.+12     	; 0xc38 <__divmodhi4_neg1>
     c2c:	77 fd       	sbrc	r23, 7
     c2e:	08 d0       	rcall	.+16     	; 0xc40 <__divmodhi4_neg2>
     c30:	0b d0       	rcall	.+22     	; 0xc48 <__udivmodhi4>
     c32:	07 fc       	sbrc	r0, 7
     c34:	05 d0       	rcall	.+10     	; 0xc40 <__divmodhi4_neg2>
     c36:	3e f4       	brtc	.+14     	; 0xc46 <__divmodhi4_exit>

00000c38 <__divmodhi4_neg1>:
     c38:	90 95       	com	r25
     c3a:	81 95       	neg	r24
     c3c:	9f 4f       	sbci	r25, 0xFF	; 255
     c3e:	08 95       	ret

00000c40 <__divmodhi4_neg2>:
     c40:	70 95       	com	r23
     c42:	61 95       	neg	r22
     c44:	7f 4f       	sbci	r23, 0xFF	; 255

00000c46 <__divmodhi4_exit>:
     c46:	08 95       	ret

00000c48 <__udivmodhi4>:
     c48:	aa 1b       	sub	r26, r26
     c4a:	bb 1b       	sub	r27, r27
     c4c:	51 e1       	ldi	r21, 0x11	; 17
     c4e:	07 c0       	rjmp	.+14     	; 0xc5e <__udivmodhi4_ep>

00000c50 <__udivmodhi4_loop>:
     c50:	aa 1f       	adc	r26, r26
     c52:	bb 1f       	adc	r27, r27
     c54:	a6 17       	cp	r26, r22
     c56:	b7 07       	cpc	r27, r23
     c58:	10 f0       	brcs	.+4      	; 0xc5e <__udivmodhi4_ep>
     c5a:	a6 1b       	sub	r26, r22
     c5c:	b7 0b       	sbc	r27, r23

00000c5e <__udivmodhi4_ep>:
     c5e:	88 1f       	adc	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	5a 95       	dec	r21
     c64:	a9 f7       	brne	.-22     	; 0xc50 <__udivmodhi4_loop>
     c66:	80 95       	com	r24
     c68:	90 95       	com	r25
     c6a:	bc 01       	movw	r22, r24
     c6c:	cd 01       	movw	r24, r26
     c6e:	08 95       	ret

00000c70 <malloc>:
     c70:	0f 93       	push	r16
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	82 30       	cpi	r24, 0x02	; 2
     c7a:	91 05       	cpc	r25, r1
     c7c:	10 f4       	brcc	.+4      	; 0xc82 <malloc+0x12>
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <__flp>
     c86:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <__flp+0x1>
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	30 97       	sbiw	r30, 0x00	; 0
     c94:	19 f1       	breq	.+70     	; 0xcdc <malloc+0x6c>
     c96:	40 81       	ld	r20, Z
     c98:	51 81       	ldd	r21, Z+1	; 0x01
     c9a:	02 81       	ldd	r16, Z+2	; 0x02
     c9c:	13 81       	ldd	r17, Z+3	; 0x03
     c9e:	48 17       	cp	r20, r24
     ca0:	59 07       	cpc	r21, r25
     ca2:	c8 f0       	brcs	.+50     	; 0xcd6 <malloc+0x66>
     ca4:	84 17       	cp	r24, r20
     ca6:	95 07       	cpc	r25, r21
     ca8:	69 f4       	brne	.+26     	; 0xcc4 <malloc+0x54>
     caa:	10 97       	sbiw	r26, 0x00	; 0
     cac:	31 f0       	breq	.+12     	; 0xcba <malloc+0x4a>
     cae:	12 96       	adiw	r26, 0x02	; 2
     cb0:	0c 93       	st	X, r16
     cb2:	12 97       	sbiw	r26, 0x02	; 2
     cb4:	13 96       	adiw	r26, 0x03	; 3
     cb6:	1c 93       	st	X, r17
     cb8:	27 c0       	rjmp	.+78     	; 0xd08 <malloc+0x98>
     cba:	00 93 1e 01 	sts	0x011E, r16	; 0x80011e <__flp>
     cbe:	10 93 1f 01 	sts	0x011F, r17	; 0x80011f <__flp+0x1>
     cc2:	22 c0       	rjmp	.+68     	; 0xd08 <malloc+0x98>
     cc4:	21 15       	cp	r18, r1
     cc6:	31 05       	cpc	r19, r1
     cc8:	19 f0       	breq	.+6      	; 0xcd0 <malloc+0x60>
     cca:	42 17       	cp	r20, r18
     ccc:	53 07       	cpc	r21, r19
     cce:	18 f4       	brcc	.+6      	; 0xcd6 <malloc+0x66>
     cd0:	9a 01       	movw	r18, r20
     cd2:	bd 01       	movw	r22, r26
     cd4:	ef 01       	movw	r28, r30
     cd6:	df 01       	movw	r26, r30
     cd8:	f8 01       	movw	r30, r16
     cda:	db cf       	rjmp	.-74     	; 0xc92 <malloc+0x22>
     cdc:	21 15       	cp	r18, r1
     cde:	31 05       	cpc	r19, r1
     ce0:	f9 f0       	breq	.+62     	; 0xd20 <malloc+0xb0>
     ce2:	28 1b       	sub	r18, r24
     ce4:	39 0b       	sbc	r19, r25
     ce6:	24 30       	cpi	r18, 0x04	; 4
     ce8:	31 05       	cpc	r19, r1
     cea:	80 f4       	brcc	.+32     	; 0xd0c <malloc+0x9c>
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	9b 81       	ldd	r25, Y+3	; 0x03
     cf0:	61 15       	cp	r22, r1
     cf2:	71 05       	cpc	r23, r1
     cf4:	21 f0       	breq	.+8      	; 0xcfe <malloc+0x8e>
     cf6:	fb 01       	movw	r30, r22
     cf8:	93 83       	std	Z+3, r25	; 0x03
     cfa:	82 83       	std	Z+2, r24	; 0x02
     cfc:	04 c0       	rjmp	.+8      	; 0xd06 <malloc+0x96>
     cfe:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__flp+0x1>
     d02:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__flp>
     d06:	fe 01       	movw	r30, r28
     d08:	32 96       	adiw	r30, 0x02	; 2
     d0a:	44 c0       	rjmp	.+136    	; 0xd94 <malloc+0x124>
     d0c:	fe 01       	movw	r30, r28
     d0e:	e2 0f       	add	r30, r18
     d10:	f3 1f       	adc	r31, r19
     d12:	81 93       	st	Z+, r24
     d14:	91 93       	st	Z+, r25
     d16:	22 50       	subi	r18, 0x02	; 2
     d18:	31 09       	sbc	r19, r1
     d1a:	39 83       	std	Y+1, r19	; 0x01
     d1c:	28 83       	st	Y, r18
     d1e:	3a c0       	rjmp	.+116    	; 0xd94 <malloc+0x124>
     d20:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__brkval>
     d24:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__brkval+0x1>
     d28:	23 2b       	or	r18, r19
     d2a:	41 f4       	brne	.+16     	; 0xd3c <malloc+0xcc>
     d2c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     d30:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     d34:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <__brkval+0x1>
     d38:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <__brkval>
     d3c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     d40:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     d44:	21 15       	cp	r18, r1
     d46:	31 05       	cpc	r19, r1
     d48:	41 f4       	brne	.+16     	; 0xd5a <malloc+0xea>
     d4a:	2d b7       	in	r18, 0x3d	; 61
     d4c:	3e b7       	in	r19, 0x3e	; 62
     d4e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     d52:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     d56:	24 1b       	sub	r18, r20
     d58:	35 0b       	sbc	r19, r21
     d5a:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <__brkval>
     d5e:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <__brkval+0x1>
     d62:	e2 17       	cp	r30, r18
     d64:	f3 07       	cpc	r31, r19
     d66:	a0 f4       	brcc	.+40     	; 0xd90 <malloc+0x120>
     d68:	2e 1b       	sub	r18, r30
     d6a:	3f 0b       	sbc	r19, r31
     d6c:	28 17       	cp	r18, r24
     d6e:	39 07       	cpc	r19, r25
     d70:	78 f0       	brcs	.+30     	; 0xd90 <malloc+0x120>
     d72:	ac 01       	movw	r20, r24
     d74:	4e 5f       	subi	r20, 0xFE	; 254
     d76:	5f 4f       	sbci	r21, 0xFF	; 255
     d78:	24 17       	cp	r18, r20
     d7a:	35 07       	cpc	r19, r21
     d7c:	48 f0       	brcs	.+18     	; 0xd90 <malloc+0x120>
     d7e:	4e 0f       	add	r20, r30
     d80:	5f 1f       	adc	r21, r31
     d82:	50 93 1d 01 	sts	0x011D, r21	; 0x80011d <__brkval+0x1>
     d86:	40 93 1c 01 	sts	0x011C, r20	; 0x80011c <__brkval>
     d8a:	81 93       	st	Z+, r24
     d8c:	91 93       	st	Z+, r25
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <malloc+0x124>
     d90:	e0 e0       	ldi	r30, 0x00	; 0
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	cf 01       	movw	r24, r30
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	08 95       	ret

00000da0 <free>:
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	00 97       	sbiw	r24, 0x00	; 0
     da6:	09 f4       	brne	.+2      	; 0xdaa <free+0xa>
     da8:	81 c0       	rjmp	.+258    	; 0xeac <free+0x10c>
     daa:	fc 01       	movw	r30, r24
     dac:	32 97       	sbiw	r30, 0x02	; 2
     dae:	13 82       	std	Z+3, r1	; 0x03
     db0:	12 82       	std	Z+2, r1	; 0x02
     db2:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <__flp>
     db6:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <__flp+0x1>
     dba:	10 97       	sbiw	r26, 0x00	; 0
     dbc:	81 f4       	brne	.+32     	; 0xdde <free+0x3e>
     dbe:	20 81       	ld	r18, Z
     dc0:	31 81       	ldd	r19, Z+1	; 0x01
     dc2:	82 0f       	add	r24, r18
     dc4:	93 1f       	adc	r25, r19
     dc6:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__brkval>
     dca:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__brkval+0x1>
     dce:	28 17       	cp	r18, r24
     dd0:	39 07       	cpc	r19, r25
     dd2:	51 f5       	brne	.+84     	; 0xe28 <free+0x88>
     dd4:	f0 93 1d 01 	sts	0x011D, r31	; 0x80011d <__brkval+0x1>
     dd8:	e0 93 1c 01 	sts	0x011C, r30	; 0x80011c <__brkval>
     ddc:	67 c0       	rjmp	.+206    	; 0xeac <free+0x10c>
     dde:	ed 01       	movw	r28, r26
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	ce 17       	cp	r28, r30
     de6:	df 07       	cpc	r29, r31
     de8:	40 f4       	brcc	.+16     	; 0xdfa <free+0x5a>
     dea:	4a 81       	ldd	r20, Y+2	; 0x02
     dec:	5b 81       	ldd	r21, Y+3	; 0x03
     dee:	9e 01       	movw	r18, r28
     df0:	41 15       	cp	r20, r1
     df2:	51 05       	cpc	r21, r1
     df4:	f1 f0       	breq	.+60     	; 0xe32 <free+0x92>
     df6:	ea 01       	movw	r28, r20
     df8:	f5 cf       	rjmp	.-22     	; 0xde4 <free+0x44>
     dfa:	d3 83       	std	Z+3, r29	; 0x03
     dfc:	c2 83       	std	Z+2, r28	; 0x02
     dfe:	40 81       	ld	r20, Z
     e00:	51 81       	ldd	r21, Z+1	; 0x01
     e02:	84 0f       	add	r24, r20
     e04:	95 1f       	adc	r25, r21
     e06:	c8 17       	cp	r28, r24
     e08:	d9 07       	cpc	r29, r25
     e0a:	59 f4       	brne	.+22     	; 0xe22 <free+0x82>
     e0c:	88 81       	ld	r24, Y
     e0e:	99 81       	ldd	r25, Y+1	; 0x01
     e10:	84 0f       	add	r24, r20
     e12:	95 1f       	adc	r25, r21
     e14:	02 96       	adiw	r24, 0x02	; 2
     e16:	91 83       	std	Z+1, r25	; 0x01
     e18:	80 83       	st	Z, r24
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	9b 81       	ldd	r25, Y+3	; 0x03
     e1e:	93 83       	std	Z+3, r25	; 0x03
     e20:	82 83       	std	Z+2, r24	; 0x02
     e22:	21 15       	cp	r18, r1
     e24:	31 05       	cpc	r19, r1
     e26:	29 f4       	brne	.+10     	; 0xe32 <free+0x92>
     e28:	f0 93 1f 01 	sts	0x011F, r31	; 0x80011f <__flp+0x1>
     e2c:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <__flp>
     e30:	3d c0       	rjmp	.+122    	; 0xeac <free+0x10c>
     e32:	e9 01       	movw	r28, r18
     e34:	fb 83       	std	Y+3, r31	; 0x03
     e36:	ea 83       	std	Y+2, r30	; 0x02
     e38:	49 91       	ld	r20, Y+
     e3a:	59 91       	ld	r21, Y+
     e3c:	c4 0f       	add	r28, r20
     e3e:	d5 1f       	adc	r29, r21
     e40:	ec 17       	cp	r30, r28
     e42:	fd 07       	cpc	r31, r29
     e44:	61 f4       	brne	.+24     	; 0xe5e <free+0xbe>
     e46:	80 81       	ld	r24, Z
     e48:	91 81       	ldd	r25, Z+1	; 0x01
     e4a:	84 0f       	add	r24, r20
     e4c:	95 1f       	adc	r25, r21
     e4e:	02 96       	adiw	r24, 0x02	; 2
     e50:	e9 01       	movw	r28, r18
     e52:	99 83       	std	Y+1, r25	; 0x01
     e54:	88 83       	st	Y, r24
     e56:	82 81       	ldd	r24, Z+2	; 0x02
     e58:	93 81       	ldd	r25, Z+3	; 0x03
     e5a:	9b 83       	std	Y+3, r25	; 0x03
     e5c:	8a 83       	std	Y+2, r24	; 0x02
     e5e:	e0 e0       	ldi	r30, 0x00	; 0
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	12 96       	adiw	r26, 0x02	; 2
     e64:	8d 91       	ld	r24, X+
     e66:	9c 91       	ld	r25, X
     e68:	13 97       	sbiw	r26, 0x03	; 3
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	19 f0       	breq	.+6      	; 0xe74 <free+0xd4>
     e6e:	fd 01       	movw	r30, r26
     e70:	dc 01       	movw	r26, r24
     e72:	f7 cf       	rjmp	.-18     	; 0xe62 <free+0xc2>
     e74:	8d 91       	ld	r24, X+
     e76:	9c 91       	ld	r25, X
     e78:	11 97       	sbiw	r26, 0x01	; 1
     e7a:	9d 01       	movw	r18, r26
     e7c:	2e 5f       	subi	r18, 0xFE	; 254
     e7e:	3f 4f       	sbci	r19, 0xFF	; 255
     e80:	82 0f       	add	r24, r18
     e82:	93 1f       	adc	r25, r19
     e84:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__brkval>
     e88:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__brkval+0x1>
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	69 f4       	brne	.+26     	; 0xeac <free+0x10c>
     e92:	30 97       	sbiw	r30, 0x00	; 0
     e94:	29 f4       	brne	.+10     	; 0xea0 <free+0x100>
     e96:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <__flp+0x1>
     e9a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__flp>
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <free+0x104>
     ea0:	13 82       	std	Z+3, r1	; 0x03
     ea2:	12 82       	std	Z+2, r1	; 0x02
     ea4:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <__brkval+0x1>
     ea8:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <__brkval>
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	08 95       	ret

00000eb2 <do_rand>:
     eb2:	8f 92       	push	r8
     eb4:	9f 92       	push	r9
     eb6:	af 92       	push	r10
     eb8:	bf 92       	push	r11
     eba:	cf 92       	push	r12
     ebc:	df 92       	push	r13
     ebe:	ef 92       	push	r14
     ec0:	ff 92       	push	r15
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	ec 01       	movw	r28, r24
     ec8:	68 81       	ld	r22, Y
     eca:	79 81       	ldd	r23, Y+1	; 0x01
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	9b 81       	ldd	r25, Y+3	; 0x03
     ed0:	61 15       	cp	r22, r1
     ed2:	71 05       	cpc	r23, r1
     ed4:	81 05       	cpc	r24, r1
     ed6:	91 05       	cpc	r25, r1
     ed8:	21 f4       	brne	.+8      	; 0xee2 <do_rand+0x30>
     eda:	64 e2       	ldi	r22, 0x24	; 36
     edc:	79 ed       	ldi	r23, 0xD9	; 217
     ede:	8b e5       	ldi	r24, 0x5B	; 91
     ee0:	97 e0       	ldi	r25, 0x07	; 7
     ee2:	2d e1       	ldi	r18, 0x1D	; 29
     ee4:	33 ef       	ldi	r19, 0xF3	; 243
     ee6:	41 e0       	ldi	r20, 0x01	; 1
     ee8:	50 e0       	ldi	r21, 0x00	; 0
     eea:	41 d0       	rcall	.+130    	; 0xf6e <__divmodsi4>
     eec:	49 01       	movw	r8, r18
     eee:	5a 01       	movw	r10, r20
     ef0:	9b 01       	movw	r18, r22
     ef2:	ac 01       	movw	r20, r24
     ef4:	a7 ea       	ldi	r26, 0xA7	; 167
     ef6:	b1 e4       	ldi	r27, 0x41	; 65
     ef8:	56 d0       	rcall	.+172    	; 0xfa6 <__muluhisi3>
     efa:	6b 01       	movw	r12, r22
     efc:	7c 01       	movw	r14, r24
     efe:	ac ee       	ldi	r26, 0xEC	; 236
     f00:	b4 ef       	ldi	r27, 0xF4	; 244
     f02:	a5 01       	movw	r20, r10
     f04:	94 01       	movw	r18, r8
     f06:	5b d0       	rcall	.+182    	; 0xfbe <__mulohisi3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	8c 0d       	add	r24, r12
     f0e:	9d 1d       	adc	r25, r13
     f10:	ae 1d       	adc	r26, r14
     f12:	bf 1d       	adc	r27, r15
     f14:	b7 ff       	sbrs	r27, 7
     f16:	03 c0       	rjmp	.+6      	; 0xf1e <do_rand+0x6c>
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	a1 09       	sbc	r26, r1
     f1c:	b0 48       	sbci	r27, 0x80	; 128
     f1e:	88 83       	st	Y, r24
     f20:	99 83       	std	Y+1, r25	; 0x01
     f22:	aa 83       	std	Y+2, r26	; 0x02
     f24:	bb 83       	std	Y+3, r27	; 0x03
     f26:	9f 77       	andi	r25, 0x7F	; 127
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	df 90       	pop	r13
     f32:	cf 90       	pop	r12
     f34:	bf 90       	pop	r11
     f36:	af 90       	pop	r10
     f38:	9f 90       	pop	r9
     f3a:	8f 90       	pop	r8
     f3c:	08 95       	ret

00000f3e <rand_r>:
     f3e:	b9 cf       	rjmp	.-142    	; 0xeb2 <do_rand>

00000f40 <rand>:
     f40:	86 e0       	ldi	r24, 0x06	; 6
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	b6 cf       	rjmp	.-148    	; 0xeb2 <do_rand>

00000f46 <srand>:
     f46:	a0 e0       	ldi	r26, 0x00	; 0
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
     f4e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
     f52:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
     f56:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
     f5a:	08 95       	ret

00000f5c <memcpy>:
     f5c:	fb 01       	movw	r30, r22
     f5e:	dc 01       	movw	r26, r24
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <memcpy+0xa>
     f62:	01 90       	ld	r0, Z+
     f64:	0d 92       	st	X+, r0
     f66:	41 50       	subi	r20, 0x01	; 1
     f68:	50 40       	sbci	r21, 0x00	; 0
     f6a:	d8 f7       	brcc	.-10     	; 0xf62 <memcpy+0x6>
     f6c:	08 95       	ret

00000f6e <__divmodsi4>:
     f6e:	05 2e       	mov	r0, r21
     f70:	97 fb       	bst	r25, 7
     f72:	16 f4       	brtc	.+4      	; 0xf78 <__divmodsi4+0xa>
     f74:	00 94       	com	r0
     f76:	0f d0       	rcall	.+30     	; 0xf96 <__negsi2>
     f78:	57 fd       	sbrc	r21, 7
     f7a:	05 d0       	rcall	.+10     	; 0xf86 <__divmodsi4_neg2>
     f7c:	24 d0       	rcall	.+72     	; 0xfc6 <__udivmodsi4>
     f7e:	07 fc       	sbrc	r0, 7
     f80:	02 d0       	rcall	.+4      	; 0xf86 <__divmodsi4_neg2>
     f82:	46 f4       	brtc	.+16     	; 0xf94 <__divmodsi4_exit>
     f84:	08 c0       	rjmp	.+16     	; 0xf96 <__negsi2>

00000f86 <__divmodsi4_neg2>:
     f86:	50 95       	com	r21
     f88:	40 95       	com	r20
     f8a:	30 95       	com	r19
     f8c:	21 95       	neg	r18
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
     f90:	4f 4f       	sbci	r20, 0xFF	; 255
     f92:	5f 4f       	sbci	r21, 0xFF	; 255

00000f94 <__divmodsi4_exit>:
     f94:	08 95       	ret

00000f96 <__negsi2>:
     f96:	90 95       	com	r25
     f98:	80 95       	com	r24
     f9a:	70 95       	com	r23
     f9c:	61 95       	neg	r22
     f9e:	7f 4f       	sbci	r23, 0xFF	; 255
     fa0:	8f 4f       	sbci	r24, 0xFF	; 255
     fa2:	9f 4f       	sbci	r25, 0xFF	; 255
     fa4:	08 95       	ret

00000fa6 <__muluhisi3>:
     fa6:	31 d0       	rcall	.+98     	; 0x100a <__umulhisi3>
     fa8:	a5 9f       	mul	r26, r21
     faa:	90 0d       	add	r25, r0
     fac:	b4 9f       	mul	r27, r20
     fae:	90 0d       	add	r25, r0
     fb0:	a4 9f       	mul	r26, r20
     fb2:	80 0d       	add	r24, r0
     fb4:	91 1d       	adc	r25, r1
     fb6:	11 24       	eor	r1, r1
     fb8:	08 95       	ret

00000fba <__mulshisi3>:
     fba:	b7 ff       	sbrs	r27, 7
     fbc:	f4 cf       	rjmp	.-24     	; 0xfa6 <__muluhisi3>

00000fbe <__mulohisi3>:
     fbe:	f3 df       	rcall	.-26     	; 0xfa6 <__muluhisi3>
     fc0:	82 1b       	sub	r24, r18
     fc2:	93 0b       	sbc	r25, r19
     fc4:	08 95       	ret

00000fc6 <__udivmodsi4>:
     fc6:	a1 e2       	ldi	r26, 0x21	; 33
     fc8:	1a 2e       	mov	r1, r26
     fca:	aa 1b       	sub	r26, r26
     fcc:	bb 1b       	sub	r27, r27
     fce:	fd 01       	movw	r30, r26
     fd0:	0d c0       	rjmp	.+26     	; 0xfec <__udivmodsi4_ep>

00000fd2 <__udivmodsi4_loop>:
     fd2:	aa 1f       	adc	r26, r26
     fd4:	bb 1f       	adc	r27, r27
     fd6:	ee 1f       	adc	r30, r30
     fd8:	ff 1f       	adc	r31, r31
     fda:	a2 17       	cp	r26, r18
     fdc:	b3 07       	cpc	r27, r19
     fde:	e4 07       	cpc	r30, r20
     fe0:	f5 07       	cpc	r31, r21
     fe2:	20 f0       	brcs	.+8      	; 0xfec <__udivmodsi4_ep>
     fe4:	a2 1b       	sub	r26, r18
     fe6:	b3 0b       	sbc	r27, r19
     fe8:	e4 0b       	sbc	r30, r20
     fea:	f5 0b       	sbc	r31, r21

00000fec <__udivmodsi4_ep>:
     fec:	66 1f       	adc	r22, r22
     fee:	77 1f       	adc	r23, r23
     ff0:	88 1f       	adc	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	1a 94       	dec	r1
     ff6:	69 f7       	brne	.-38     	; 0xfd2 <__udivmodsi4_loop>
     ff8:	60 95       	com	r22
     ffa:	70 95       	com	r23
     ffc:	80 95       	com	r24
     ffe:	90 95       	com	r25
    1000:	9b 01       	movw	r18, r22
    1002:	ac 01       	movw	r20, r24
    1004:	bd 01       	movw	r22, r26
    1006:	cf 01       	movw	r24, r30
    1008:	08 95       	ret

0000100a <__umulhisi3>:
    100a:	a2 9f       	mul	r26, r18
    100c:	b0 01       	movw	r22, r0
    100e:	b3 9f       	mul	r27, r19
    1010:	c0 01       	movw	r24, r0
    1012:	a3 9f       	mul	r26, r19
    1014:	70 0d       	add	r23, r0
    1016:	81 1d       	adc	r24, r1
    1018:	11 24       	eor	r1, r1
    101a:	91 1d       	adc	r25, r1
    101c:	b2 9f       	mul	r27, r18
    101e:	70 0d       	add	r23, r0
    1020:	81 1d       	adc	r24, r1
    1022:	11 24       	eor	r1, r1
    1024:	91 1d       	adc	r25, r1
    1026:	08 95       	ret

00001028 <_exit>:
    1028:	f8 94       	cli

0000102a <__stop_program>:
    102a:	ff cf       	rjmp	.-2      	; 0x102a <__stop_program>
