
Snake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000252  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ecd  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e4  00000000  00000000  00001259  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ed  00000000  00000000  00001c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  0000222c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ec  00000000  00000000  00002390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cd  00000000  00000000  0000287c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002b49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a8 30       	cpi	r26, 0x08	; 8
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	7d d0       	rcall	.+250    	; 0x1a4 <main>
  aa:	97 c0       	rjmp	.+302    	; 0x1da <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <displayChar>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
  ae:	08 95       	ret

000000b0 <twi_init>:
  b0:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  b4:	80 e2       	ldi	r24, 0x20	; 32
  b6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  ba:	08 95       	ret

000000bc <twi_start>:
  bc:	84 ea       	ldi	r24, 0xA4	; 164
  be:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  c2:	e4 e7       	ldi	r30, 0x74	; 116
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 23       	and	r24, r24
  ca:	ec f7       	brge	.-6      	; 0xc6 <twi_start+0xa>
  cc:	08 95       	ret

000000ce <twi_tx>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
  ce:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
  d2:	84 e8       	ldi	r24, 0x84	; 132
  d4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
  d8:	e4 e7       	ldi	r30, 0x74	; 116
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	88 23       	and	r24, r24
  e0:	ec f7       	brge	.-6      	; 0xdc <twi_tx+0xe>
}
  e2:	08 95       	ret

000000e4 <displayInitHT16K33>:
inputs:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	c8 2f       	mov	r28, r24
	// System setup page 30 ht16k33 datasheet
	twi_start();
  ee:	e6 df       	rcall	.-52     	; 0xbc <twi_start>
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
  f0:	8c 2f       	mov	r24, r28
  f2:	ed df       	rcall	.-38     	; 0xce <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
  f4:	81 e2       	ldi	r24, 0x21	; 33
  f6:	eb df       	rcall	.-42     	; 0xce <twi_tx>
  f8:	04 e7       	ldi	r16, 0x74	; 116
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	d4 e9       	ldi	r29, 0x94	; 148
  fe:	f8 01       	movw	r30, r16
 100:	d0 83       	st	Z, r29
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();
		
	// ROW/INT set. Page 31 ht16k33 datasheet
	twi_start();
 102:	dc df       	rcall	.-72     	; 0xbc <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 104:	8c 2f       	mov	r24, r28
 106:	e3 df       	rcall	.-58     	; 0xce <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output (default)
 108:	80 ea       	ldi	r24, 0xA0	; 160
 10a:	e1 df       	rcall	.-62     	; 0xce <twi_tx>
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 10c:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output (default)
	twi_stop();

	// Dimming set
	twi_start();
 10e:	d0 83       	st	Z, r29
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 110:	d5 df       	rcall	.-86     	; 0xbc <twi_start>
 112:	8c 2f       	mov	r24, r28
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
 114:	dc df       	rcall	.-72     	; 0xce <twi_tx>
 116:	81 ee       	ldi	r24, 0xE1	; 225
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 118:	da df       	rcall	.-76     	; 0xce <twi_tx>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
	twi_stop();

	// Display set
	twi_start();
 11a:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 11c:	d0 83       	st	Z, r29
 11e:	ce df       	rcall	.-100    	; 0xbc <twi_start>
	twi_tx(0x81);			// Display ON, Blinking OFF
 120:	8c 2f       	mov	r24, r28
 122:	d5 df       	rcall	.-86     	; 0xce <twi_tx>
 124:	81 e8       	ldi	r24, 0x81	; 129
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 126:	d3 df       	rcall	.-90     	; 0xce <twi_tx>
 128:	f8 01       	movw	r30, r16
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0x81);			// Display ON, Blinking OFF
	twi_stop();
	
	// Beeld een patroon af op display (test)
	twi_start();
 12a:	d0 83       	st	Z, r29
	twi_tx(i2c_address);
 12c:	c7 df       	rcall	.-114    	; 0xbc <twi_start>
 12e:	8c 2f       	mov	r24, r28
	twi_tx(0x00);
 130:	ce df       	rcall	.-100    	; 0xce <twi_tx>
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	cc df       	rcall	.-104    	; 0xce <twi_tx>
 136:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t a = 0x55;
 138:	c5 e5       	ldi	r28, 0x55	; 85
	for( uint8_t idx = 0; idx < 8; idx++ ) {
		a ^= 0xFF;
 13a:	c0 95       	com	r28
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
 13c:	8c 2f       	mov	r24, r28
 13e:	80 fb       	bst	r24, 0
 140:	87 95       	ror	r24
 142:	87 f9       	bld	r24, 7
 144:	c4 df       	rcall	.-120    	; 0xce <twi_tx>
 146:	80 e0       	ldi	r24, 0x00	; 0
		twi_tx( 0x00);
 148:	c2 df       	rcall	.-124    	; 0xce <twi_tx>
 14a:	d1 50       	subi	r29, 0x01	; 1
 14c:	b1 f7       	brne	.-20     	; 0x13a <displayInitHT16K33+0x56>
 14e:	84 e9       	ldi	r24, 0x94	; 148
	// Beeld een patroon af op display (test)
	twi_start();
	twi_tx(i2c_address);
	twi_tx(0x00);
	uint8_t a = 0x55;
	for( uint8_t idx = 0; idx < 8; idx++ ) {
 150:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
}
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	08 95       	ret

0000015e <displayInit>:
 15e:	a8 df       	rcall	.-176    	; 0xb0 <twi_init>
 160:	88 ee       	ldi	r24, 0xE8	; 232
notes:			Init display
Version :    	DMK, Initial code
*******************************************************************/
{
	twi_init();							// Enable TWI interface
	displayInitHT16K33(D0_I2C_ADDR);	// Iit display
 162:	c0 cf       	rjmp	.-128    	; 0xe4 <displayInitHT16K33>
 164:	08 95       	ret

00000166 <display>:
inputs:
outputs:
notes:		Let op de 'vreemde' shift, foutje in printplaat?
Version:	DMK, Initial code
*******************************************************************/
{
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
	// Second display
	twi_start();
 16e:	a6 df       	rcall	.-180    	; 0xbc <twi_start>
	twi_tx(D0_I2C_ADDR);
 170:	88 ee       	ldi	r24, 0xE8	; 232
 172:	ad df       	rcall	.-166    	; 0xce <twi_tx>
	twi_tx(0x00);
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	ab df       	rcall	.-170    	; 0xce <twi_tx>
 178:	c8 e0       	ldi	r28, 0x08	; 8
 17a:	d1 e0       	ldi	r29, 0x01	; 1
 17c:	00 e0       	ldi	r16, 0x00	; 0
 17e:	11 e0       	ldi	r17, 0x01	; 1
 180:	8a 91       	ld	r24, -Y
	for( uint8_t idx = 0; idx < 8; idx++ ) {
		uint8_t a = buf[7 + 0 * 8 - idx];
 182:	80 fb       	bst	r24, 0
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
 184:	87 95       	ror	r24
 186:	87 f9       	bld	r24, 7
 188:	a2 df       	rcall	.-188    	; 0xce <twi_tx>
		twi_tx( 0x00);
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	a0 df       	rcall	.-192    	; 0xce <twi_tx>
 18e:	c0 17       	cp	r28, r16
{
	// Second display
	twi_start();
	twi_tx(D0_I2C_ADDR);
	twi_tx(0x00);
	for( uint8_t idx = 0; idx < 8; idx++ ) {
 190:	d1 07       	cpc	r29, r17
 192:	b1 f7       	brne	.-20     	; 0x180 <display+0x1a>
 194:	84 e9       	ldi	r24, 0x94	; 148
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 196:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 19a:	df 91       	pop	r29
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
}
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	08 95       	ret

000001a4 <main>:
outputs:	
notes:			Looping forever, trashing the HT16K33
Version :    	DMK, Initial code
*******************************************************************/
{
	displayInit();
 1a4:	dc df       	rcall	.-72     	; 0x15e <displayInit>
	wait(500);
 1a6:	84 ef       	ldi	r24, 0xF4	; 244
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	06 d0       	rcall	.+12     	; 0x1b8 <wait>

	displayChar('1', 0, 0);
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	81 e3       	ldi	r24, 0x31	; 49
	display();
 1b2:	7d df       	rcall	.-262    	; 0xae <displayChar>
 1b4:	d8 df       	rcall	.-80     	; 0x166 <display>
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <main+0x12>

000001b8 <wait>:
 */ 
#include "toolbox.h"

void wait( int ms )
{
	for (int i=0; i<ms; i++)
 1b8:	18 16       	cp	r1, r24
 1ba:	19 06       	cpc	r1, r25
 1bc:	6c f4       	brge	.+26     	; 0x1d8 <wait+0x20>
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	ef ec       	ldi	r30, 0xCF	; 207
 1c4:	f7 e0       	ldi	r31, 0x07	; 7
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <wait+0xe>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <wait+0x14>
 1cc:	00 00       	nop
 1ce:	2f 5f       	subi	r18, 0xFF	; 255
 1d0:	3f 4f       	sbci	r19, 0xFF	; 255
 1d2:	82 17       	cp	r24, r18
 1d4:	93 07       	cpc	r25, r19
 1d6:	a9 f7       	brne	.-22     	; 0x1c2 <wait+0xa>
 1d8:	08 95       	ret

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
