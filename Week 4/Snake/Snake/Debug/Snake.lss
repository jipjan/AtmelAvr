
Snake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e5e  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f0  00000000  00000000  0000121a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000597  00000000  00000000  00001c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000021a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f6  00000000  00000000  00002308  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023c  00000000  00000000  000027fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002a3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a8 30       	cpi	r26, 0x08	; 8
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	e0 e1       	ldi	r30, 0x10	; 16
  b0:	f2 e0       	ldi	r31, 0x02	; 2
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a0 30       	cpi	r26, 0x00	; 0
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>
  c2:	82 d0       	rcall	.+260    	; 0x1c8 <main>
  c4:	a3 c0       	rjmp	.+326    	; 0x20c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <displaySetPixel>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
  c8:	e6 2f       	mov	r30, r22
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	e0 50       	subi	r30, 0x00	; 0
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <displaySetPixel+0x12>
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	8a 95       	dec	r24
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <displaySetPixel+0xe>
  de:	80 81       	ld	r24, Z
  e0:	28 2b       	or	r18, r24
  e2:	20 83       	st	Z, r18
  e4:	08 95       	ret

000000e6 <displayClrPixel>:
  e6:	e6 2f       	mov	r30, r22
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	e0 50       	subi	r30, 0x00	; 0
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	10 82       	st	Z, r1
  f0:	08 95       	ret

000000f2 <displayClr>:
  f2:	e0 e0       	ldi	r30, 0x00	; 0
  f4:	f1 e0       	ldi	r31, 0x01	; 1
  f6:	87 e0       	ldi	r24, 0x07	; 7
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	11 92       	st	Z+, r1
  fc:	e8 17       	cp	r30, r24
  fe:	f9 07       	cpc	r31, r25
 100:	e1 f7       	brne	.-8      	; 0xfa <displayClr+0x8>
 102:	08 95       	ret

00000104 <twi_init>:
 104:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 108:	80 e2       	ldi	r24, 0x20	; 32
 10a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 10e:	08 95       	ret

00000110 <twi_start>:
 110:	84 ea       	ldi	r24, 0xA4	; 164
 112:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 116:	e4 e7       	ldi	r30, 0x74	; 116
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	88 23       	and	r24, r24
 11e:	ec f7       	brge	.-6      	; 0x11a <twi_start+0xa>
 120:	08 95       	ret

00000122 <twi_tx>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
 122:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 126:	84 e8       	ldi	r24, 0x84	; 132
 128:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 12c:	e4 e7       	ldi	r30, 0x74	; 116
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	88 23       	and	r24, r24
 134:	ec f7       	brge	.-6      	; 0x130 <twi_tx+0xe>
}
 136:	08 95       	ret

00000138 <displayInitHT16K33>:
inputs:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	08 2f       	mov	r16, r24
	// System setup page 30 ht16k33 datasheet
	twi_start();
 142:	e6 df       	rcall	.-52     	; 0x110 <twi_start>
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
 144:	80 2f       	mov	r24, r16
 146:	ed df       	rcall	.-38     	; 0x122 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 148:	81 e2       	ldi	r24, 0x21	; 33
 14a:	eb df       	rcall	.-42     	; 0x122 <twi_tx>
 14c:	c4 e7       	ldi	r28, 0x74	; 116
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 14e:	d0 e0       	ldi	r29, 0x00	; 0
 150:	14 e9       	ldi	r17, 0x94	; 148
 152:	18 83       	st	Y, r17
	twi_tx(i2c_address);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();
		
	// ROW/INT set. Page 31 ht16k33 datasheet
	twi_start();
 154:	dd df       	rcall	.-70     	; 0x110 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 156:	80 2f       	mov	r24, r16
 158:	e4 df       	rcall	.-56     	; 0x122 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output (default)
 15a:	80 ea       	ldi	r24, 0xA0	; 160
 15c:	e2 df       	rcall	.-60     	; 0x122 <twi_tx>
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 15e:	18 83       	st	Y, r17
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output (default)
	twi_stop();

	// Dimming set
	twi_start();
 160:	d7 df       	rcall	.-82     	; 0x110 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 162:	80 2f       	mov	r24, r16
 164:	de df       	rcall	.-68     	; 0x122 <twi_tx>
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
 166:	81 ee       	ldi	r24, 0xE1	; 225
 168:	dc df       	rcall	.-72     	; 0x122 <twi_tx>
 16a:	18 83       	st	Y, r17
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 16c:	d1 df       	rcall	.-94     	; 0x110 <twi_start>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
	twi_tx(0xE1);	// Display Dimming 2/16 duty cycle
	twi_stop();

	// Display set
	twi_start();
 16e:	80 2f       	mov	r24, r16
 170:	d8 df       	rcall	.-80     	; 0x122 <twi_tx>
	twi_tx(i2c_address);	// Display I2C address + R/W bit
 172:	81 e8       	ldi	r24, 0x81	; 129
 174:	d6 df       	rcall	.-84     	; 0x122 <twi_tx>
 176:	18 83       	st	Y, r17
	twi_tx(0x81);			// Display ON, Blinking OFF
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 17e:	0f 91       	pop	r16
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
	*/
}
 180:	08 95       	ret

00000182 <displayInit>:
 182:	c0 df       	rcall	.-128    	; 0x104 <twi_init>
 184:	88 ee       	ldi	r24, 0xE8	; 232
 186:	d8 cf       	rjmp	.-80     	; 0x138 <displayInitHT16K33>
 188:	08 95       	ret

0000018a <display>:
inputs:
outputs:
notes:		Let op de 'vreemde' shift, foutje in printplaat?
Version:	DMK, Initial code
*******************************************************************/
{
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
	// Second display
	twi_start();
 192:	be df       	rcall	.-132    	; 0x110 <twi_start>
	twi_tx(D0_I2C_ADDR);
 194:	88 ee       	ldi	r24, 0xE8	; 232
 196:	c5 df       	rcall	.-118    	; 0x122 <twi_tx>
	twi_tx(0x00);
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	c3 df       	rcall	.-122    	; 0x122 <twi_tx>
 19c:	c8 e0       	ldi	r28, 0x08	; 8
 19e:	d1 e0       	ldi	r29, 0x01	; 1
 1a0:	00 e0       	ldi	r16, 0x00	; 0
 1a2:	11 e0       	ldi	r17, 0x01	; 1
 1a4:	8a 91       	ld	r24, -Y
	for( uint8_t idx = 0; idx < 8; idx++ ) {
		uint8_t a = buf[7 + 0 * 8 - idx];
 1a6:	80 fb       	bst	r24, 0
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
 1a8:	87 95       	ror	r24
 1aa:	87 f9       	bld	r24, 7
 1ac:	ba df       	rcall	.-140    	; 0x122 <twi_tx>
		twi_tx( 0x00);
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	b8 df       	rcall	.-144    	; 0x122 <twi_tx>
 1b2:	c0 17       	cp	r28, r16
{
	// Second display
	twi_start();
	twi_tx(D0_I2C_ADDR);
	twi_tx(0x00);
	for( uint8_t idx = 0; idx < 8; idx++ ) {
 1b4:	d1 07       	cpc	r29, r17
 1b6:	b1 f7       	brne	.-20     	; 0x1a4 <display+0x1a>
 1b8:	84 e9       	ldi	r24, 0x94	; 148
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 1ba:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 1be:	df 91       	pop	r29
		uint8_t data = (a >> 1) | ((a<<7) & 0x80);
		twi_tx( data);
		twi_tx( 0x00);
	}
	twi_stop();
}
 1c0:	cf 91       	pop	r28
 1c2:	1f 91       	pop	r17
 1c4:	0f 91       	pop	r16
 1c6:	08 95       	ret

000001c8 <main>:
#include "display.h"
#include "gamelogic.h"

int main( void )
{
	displayInit();	
 1c8:	dc df       	rcall	.-72     	; 0x182 <displayInit>
	displayClr();
 1ca:	93 df       	rcall	.-218    	; 0xf2 <displayClr>
	display();
 1cc:	de df       	rcall	.-68     	; 0x18a <display>
	displaySetPixel(5, 3);
 1ce:	63 e0       	ldi	r22, 0x03	; 3
 1d0:	85 e0       	ldi	r24, 0x05	; 5
 1d2:	7a df       	rcall	.-268    	; 0xc8 <displaySetPixel>
	display();
 1d4:	da df       	rcall	.-76     	; 0x18a <display>
 1d6:	84 ef       	ldi	r24, 0xF4	; 244
	wait(500);
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	07 d0       	rcall	.+14     	; 0x1ea <wait>
	displayClrPixel(5,3);
 1dc:	63 e0       	ldi	r22, 0x03	; 3
 1de:	85 e0       	ldi	r24, 0x05	; 5
 1e0:	82 df       	rcall	.-252    	; 0xe6 <displayClrPixel>
 1e2:	d3 df       	rcall	.-90     	; 0x18a <display>
	display();
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0

	return 1;
 1e8:	08 95       	ret

000001ea <wait>:
 */ 
#include "toolbox.h"

void wait( int ms )
{
	for (int i=0; i<ms; i++)
 1ea:	18 16       	cp	r1, r24
 1ec:	19 06       	cpc	r1, r25
 1ee:	6c f4       	brge	.+26     	; 0x20a <wait+0x20>
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	ef ec       	ldi	r30, 0xCF	; 207
 1f6:	f7 e0       	ldi	r31, 0x07	; 7
 1f8:	31 97       	sbiw	r30, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <wait+0xe>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <wait+0x14>
 1fe:	00 00       	nop
 200:	2f 5f       	subi	r18, 0xFF	; 255
 202:	3f 4f       	sbci	r19, 0xFF	; 255
 204:	82 17       	cp	r24, r18
 206:	93 07       	cpc	r25, r19
 208:	a9 f7       	brne	.-22     	; 0x1f4 <wait+0xa>
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
